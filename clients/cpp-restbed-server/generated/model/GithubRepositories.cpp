/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubRepositories.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GithubRepositories::GithubRepositories(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string GithubRepositories::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void GithubRepositories::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree GithubRepositories::toPropertyTree()
{
    return toPropertyTree_internal();
}

void GithubRepositories::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string GithubRepositories::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void GithubRepositories::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree GithubRepositories::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	if (m__links != nullptr) {
		pt.add_child("_links", m__links->toPropertyTree());
	}
	// generate tree for Items
	if (!m_Items.empty()) {
		for (const auto &childEntry : m_Items) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	pt.put("lastPage", m_LastPage);
	pt.put("nextPage", m_NextPage);
	pt.put("pageSize", m_PageSize);
	return pt;
}

void GithubRepositories::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	if (pt.get_child_optional("_links")) {
		m__links = std::make_shared<GithubRepositorieslinks>();
		m__links->fromPropertyTree(pt.get_child("_links"));
	}
	// push all items of Items into member vector
	if (pt.get_child_optional("items")) {
		for (const auto &childTree : pt.get_child("items")) {
            std::shared_ptr<GithubRepository> val =
                std::make_shared<GithubRepository>(childTree.second);
            m_Items.emplace_back(std::move(val));
		}
	}
	m_LastPage = pt.get("lastPage", 0);
	m_NextPage = pt.get("nextPage", 0);
	m_PageSize = pt.get("pageSize", 0);
}

std::string GithubRepositories::get_Class() const
{
    return m__class;
}

void GithubRepositories::set_Class(std::string value)
{
	m__class = value;
}
std::shared_ptr<GithubRepositorieslinks> GithubRepositories::get_Links() const
{
    return m__links;
}

void GithubRepositories::set_Links(std::shared_ptr<GithubRepositorieslinks> value)
{
	m__links = value;
}
std::vector<std::shared_ptr<GithubRepository>> GithubRepositories::getItems() const
{
    return m_Items;
}

void GithubRepositories::setItems(std::vector<std::shared_ptr<GithubRepository>> value)
{
	m_Items = value;
}
int32_t GithubRepositories::getLastPage() const
{
    return m_LastPage;
}

void GithubRepositories::setLastPage(int32_t value)
{
	m_LastPage = value;
}
int32_t GithubRepositories::getNextPage() const
{
    return m_NextPage;
}

void GithubRepositories::setNextPage(int32_t value)
{
	m_NextPage = value;
}
int32_t GithubRepositories::getPageSize() const
{
    return m_PageSize;
}

void GithubRepositories::setPageSize(int32_t value)
{
	m_PageSize = value;
}

std::vector<GithubRepositories> createGithubRepositoriesVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<GithubRepositories>();
    for (const auto& child: pt) {
        vec.emplace_back(GithubRepositories(child.second));
    }

    return vec;
}

}
}
}
}

