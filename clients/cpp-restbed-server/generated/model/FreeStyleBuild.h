/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.5.1-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FreeStyleBuild.h
 *
 * 
 */

#ifndef FreeStyleBuild_H_
#define FreeStyleBuild_H_



#include "EmptyChangeLogSet.h"
#include <string>
#include "CauseAction.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  FreeStyleBuild 
{
public:
    FreeStyleBuild() = default;
    explicit FreeStyleBuild(boost::property_tree::ptree const& pt);
    virtual ~FreeStyleBuild() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// FreeStyleBuild members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumber() const;
    void setNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CauseAction>> getActions() const;
    void setActions(std::vector<std::shared_ptr<CauseAction>> value);

    /// <summary>
    /// 
    /// </summary>
    bool isBuilding() const;
    void setBuilding(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayName() const;
    void setDisplayName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDuration() const;
    void setDuration(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEstimatedDuration() const;
    void setEstimatedDuration(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getExecutor() const;
    void setExecutor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getFullDisplayName() const;
    void setFullDisplayName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isKeepLog() const;
    void setKeepLog(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getQueueId() const;
    void setQueueId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getResult() const;
    void setResult(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBuiltOn() const;
    void setBuiltOn(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EmptyChangeLogSet> getChangeSet() const;
    void setChangeSet(std::shared_ptr<EmptyChangeLogSet> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m__class = "";
    int32_t m_number = 0;
    std::string m_Url = "";
    std::vector<std::shared_ptr<CauseAction>> m_Actions;
    bool m_Building = false;
    std::string m_Description = "";
    std::string m_DisplayName = "";
    int32_t m_Duration = 0;
    int32_t m_EstimatedDuration = 0;
    std::string m_Executor = "";
    std::string m_FullDisplayName = "";
    std::string m_Id = "";
    bool m_KeepLog = false;
    int32_t m_QueueId = 0;
    std::string m_Result = "";
    int32_t m_Timestamp = 0;
    std::string m_BuiltOn = "";
    std::shared_ptr<EmptyChangeLogSet> m_ChangeSet;
};

std::vector<FreeStyleBuild> createFreeStyleBuildVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* FreeStyleBuild_H_ */
