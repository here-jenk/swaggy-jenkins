/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputermonitorData.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputermonitorData::HudsonMasterComputermonitorData(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string HudsonMasterComputermonitorData::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void HudsonMasterComputermonitorData::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree HudsonMasterComputermonitorData::toPropertyTree()
{
    return toPropertyTree_internal();
}

void HudsonMasterComputermonitorData::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string HudsonMasterComputermonitorData::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void HudsonMasterComputermonitorData::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree HudsonMasterComputermonitorData::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	if (m_Hudson_node_monitors_SwapSpaceMonitor != nullptr) {
		pt.add_child("hudson.node_monitors.SwapSpaceMonitor", m_Hudson_node_monitors_SwapSpaceMonitor->toPropertyTree());
	}
	if (m_Hudson_node_monitors_TemporarySpaceMonitor != nullptr) {
		pt.add_child("hudson.node_monitors.TemporarySpaceMonitor", m_Hudson_node_monitors_TemporarySpaceMonitor->toPropertyTree());
	}
	if (m_Hudson_node_monitors_DiskSpaceMonitor != nullptr) {
		pt.add_child("hudson.node_monitors.DiskSpaceMonitor", m_Hudson_node_monitors_DiskSpaceMonitor->toPropertyTree());
	}
	pt.put("hudson.node_monitors.ArchitectureMonitor", m_Hudson_node_monitors_ArchitectureMonitor);
	if (m_Hudson_node_monitors_ResponseTimeMonitor != nullptr) {
		pt.add_child("hudson.node_monitors.ResponseTimeMonitor", m_Hudson_node_monitors_ResponseTimeMonitor->toPropertyTree());
	}
	if (m_Hudson_node_monitors_ClockMonitor != nullptr) {
		pt.add_child("hudson.node_monitors.ClockMonitor", m_Hudson_node_monitors_ClockMonitor->toPropertyTree());
	}
	pt.put("_class", m__class);
	return pt;
}

void HudsonMasterComputermonitorData::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("hudson.node_monitors.SwapSpaceMonitor")) {
		m_Hudson_node_monitors_SwapSpaceMonitor = std::make_shared<SwapSpaceMonitorMemoryUsage2>();
		m_Hudson_node_monitors_SwapSpaceMonitor->fromPropertyTree(pt.get_child("hudson.node_monitors.SwapSpaceMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.TemporarySpaceMonitor")) {
		m_Hudson_node_monitors_TemporarySpaceMonitor = std::make_shared<DiskSpaceMonitorDescriptorDiskSpace>();
		m_Hudson_node_monitors_TemporarySpaceMonitor->fromPropertyTree(pt.get_child("hudson.node_monitors.TemporarySpaceMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.DiskSpaceMonitor")) {
		m_Hudson_node_monitors_DiskSpaceMonitor = std::make_shared<DiskSpaceMonitorDescriptorDiskSpace>();
		m_Hudson_node_monitors_DiskSpaceMonitor->fromPropertyTree(pt.get_child("hudson.node_monitors.DiskSpaceMonitor"));
	}
	m_Hudson_node_monitors_ArchitectureMonitor = pt.get("hudson.node_monitors.ArchitectureMonitor", "");
	if (pt.get_child_optional("hudson.node_monitors.ResponseTimeMonitor")) {
		m_Hudson_node_monitors_ResponseTimeMonitor = std::make_shared<ResponseTimeMonitorData>();
		m_Hudson_node_monitors_ResponseTimeMonitor->fromPropertyTree(pt.get_child("hudson.node_monitors.ResponseTimeMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.ClockMonitor")) {
		m_Hudson_node_monitors_ClockMonitor = std::make_shared<ClockDifference>();
		m_Hudson_node_monitors_ClockMonitor->fromPropertyTree(pt.get_child("hudson.node_monitors.ClockMonitor"));
	}
	m__class = pt.get("_class", "");
}

std::shared_ptr<SwapSpaceMonitorMemoryUsage2> HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(std::shared_ptr<SwapSpaceMonitorMemoryUsage2> value)
{
	m_Hudson_node_monitors_SwapSpaceMonitor = value;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
	m_Hudson_node_monitors_TemporarySpaceMonitor = value;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
	m_Hudson_node_monitors_DiskSpaceMonitor = value;
}
std::string HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(std::string value)
{
	m_Hudson_node_monitors_ArchitectureMonitor = value;
}
std::shared_ptr<ResponseTimeMonitorData> HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(std::shared_ptr<ResponseTimeMonitorData> value)
{
	m_Hudson_node_monitors_ResponseTimeMonitor = value;
}
std::shared_ptr<ClockDifference> HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(std::shared_ptr<ClockDifference> value)
{
	m_Hudson_node_monitors_ClockMonitor = value;
}
std::string HudsonMasterComputermonitorData::get_Class() const
{
    return m__class;
}

void HudsonMasterComputermonitorData::set_Class(std::string value)
{
	m__class = value;
}

std::vector<HudsonMasterComputermonitorData> createHudsonMasterComputermonitorDataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<HudsonMasterComputermonitorData>();
    for (const auto& child: pt) {
        vec.emplace_back(HudsonMasterComputermonitorData(child.second));
    }

    return vec;
}

}
}
}
}

