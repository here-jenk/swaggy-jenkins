/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputerexecutors.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputerexecutors::HudsonMasterComputerexecutors(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string HudsonMasterComputerexecutors::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void HudsonMasterComputerexecutors::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree HudsonMasterComputerexecutors::toPropertyTree()
{
    return toPropertyTree_internal();
}

void HudsonMasterComputerexecutors::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string HudsonMasterComputerexecutors::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void HudsonMasterComputerexecutors::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree HudsonMasterComputerexecutors::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	if (m_CurrentExecutable != nullptr) {
		pt.add_child("currentExecutable", m_CurrentExecutable->toPropertyTree());
	}
	pt.put("idle", m_Idle);
	pt.put("likelyStuck", m_LikelyStuck);
	pt.put("number", m_number);
	pt.put("progress", m_Progress);
	pt.put("_class", m__class);
	return pt;
}

void HudsonMasterComputerexecutors::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("currentExecutable")) {
		m_CurrentExecutable = std::make_shared<FreeStyleBuild>();
		m_CurrentExecutable->fromPropertyTree(pt.get_child("currentExecutable"));
	}
	m_Idle = pt.get("idle", false);
	m_LikelyStuck = pt.get("likelyStuck", false);
	m_number = pt.get("number", 0);
	m_Progress = pt.get("progress", 0);
	m__class = pt.get("_class", "");
}

std::shared_ptr<FreeStyleBuild> HudsonMasterComputerexecutors::getCurrentExecutable() const
{
    return m_CurrentExecutable;
}

void HudsonMasterComputerexecutors::setCurrentExecutable(std::shared_ptr<FreeStyleBuild> value)
{
	m_CurrentExecutable = value;
}
bool HudsonMasterComputerexecutors::isIdle() const
{
    return m_Idle;
}

void HudsonMasterComputerexecutors::setIdle(bool value)
{
	m_Idle = value;
}
bool HudsonMasterComputerexecutors::isLikelyStuck() const
{
    return m_LikelyStuck;
}

void HudsonMasterComputerexecutors::setLikelyStuck(bool value)
{
	m_LikelyStuck = value;
}
int32_t HudsonMasterComputerexecutors::getNumber() const
{
    return m_number;
}

void HudsonMasterComputerexecutors::setNumber(int32_t value)
{
	m_number = value;
}
int32_t HudsonMasterComputerexecutors::getProgress() const
{
    return m_Progress;
}

void HudsonMasterComputerexecutors::setProgress(int32_t value)
{
	m_Progress = value;
}
std::string HudsonMasterComputerexecutors::get_Class() const
{
    return m__class;
}

void HudsonMasterComputerexecutors::set_Class(std::string value)
{
	m__class = value;
}

std::vector<HudsonMasterComputerexecutors> createHudsonMasterComputerexecutorsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<HudsonMasterComputerexecutors>();
    for (const auto& child: pt) {
        vec.emplace_back(HudsonMasterComputerexecutors(child.second));
    }

    return vec;
}

}
}
}
}

