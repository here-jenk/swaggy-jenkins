/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputer.h
 *
 * 
 */

#ifndef HudsonMasterComputer_H_
#define HudsonMasterComputer_H_



#include <string>
#include "HudsonMasterComputermonitorData.h"
#include "Label1.h"
#include <vector>
#include "HudsonMasterComputerexecutors.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  HudsonMasterComputer 
{
public:
    HudsonMasterComputer() = default;
    explicit HudsonMasterComputer(boost::property_tree::ptree const& pt);
    virtual ~HudsonMasterComputer() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// HudsonMasterComputer members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayName() const;
    void setDisplayName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> getExecutors() const;
    void setExecutors(std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIcon() const;
    void setIcon(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIconClassName() const;
    void setIconClassName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isIdle() const;
    void setIdle(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isJnlpAgent() const;
    void setJnlpAgent(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isLaunchSupported() const;
    void setLaunchSupported(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Label1> getLoadStatistics() const;
    void setLoadStatistics(std::shared_ptr<Label1> value);

    /// <summary>
    /// 
    /// </summary>
    bool isManualLaunchAllowed() const;
    void setManualLaunchAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HudsonMasterComputermonitorData> getMonitorData() const;
    void setMonitorData(std::shared_ptr<HudsonMasterComputermonitorData> value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumExecutors() const;
    void setNumExecutors(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isOffline() const;
    void setOffline(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOfflineCause() const;
    void setOfflineCause(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOfflineCauseReason() const;
    void setOfflineCauseReason(std::string value);

    /// <summary>
    /// 
    /// </summary>
    bool isTemporarilyOffline() const;
    void setTemporarilyOffline(bool value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m__class = "";
    std::string m_DisplayName = "";
    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> m_Executors;
    std::string m_Icon = "";
    std::string m_IconClassName = "";
    bool m_Idle = false;
    bool m_JnlpAgent = false;
    bool m_LaunchSupported = false;
    std::shared_ptr<Label1> m_LoadStatistics;
    bool m_ManualLaunchAllowed = false;
    std::shared_ptr<HudsonMasterComputermonitorData> m_MonitorData;
    int32_t m_NumExecutors = 0;
    bool m_Offline = false;
    std::string m_OfflineCause = "";
    std::string m_OfflineCauseReason = "";
    bool m_TemporarilyOffline = false;
};

std::vector<HudsonMasterComputer> createHudsonMasterComputerVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* HudsonMasterComputer_H_ */
