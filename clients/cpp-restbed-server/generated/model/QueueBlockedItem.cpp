/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "QueueBlockedItem.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

QueueBlockedItem::QueueBlockedItem(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string QueueBlockedItem::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void QueueBlockedItem::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree QueueBlockedItem::toPropertyTree()
{
    return toPropertyTree_internal();
}

void QueueBlockedItem::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string QueueBlockedItem::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void QueueBlockedItem::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree QueueBlockedItem::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	// generate tree for Actions
	if (!m_Actions.empty()) {
		for (const auto &childEntry : m_Actions) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("actions", tmp_node);
		tmp_node.clear();
	}
	pt.put("blocked", m_Blocked);
	pt.put("buildable", m_Buildable);
	pt.put("id", m_Id);
	pt.put("inQueueSince", m_InQueueSince);
	pt.put("params", m_Params);
	pt.put("stuck", m_Stuck);
	if (m_Task != nullptr) {
		pt.add_child("task", m_Task->toPropertyTree());
	}
	pt.put("url", m_Url);
	pt.put("why", m_Why);
	pt.put("buildableStartMilliseconds", m_BuildableStartMilliseconds);
	return pt;
}

void QueueBlockedItem::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	// push all items of Actions into member vector
	if (pt.get_child_optional("actions")) {
		for (const auto &childTree : pt.get_child("actions")) {
            std::shared_ptr<CauseAction> val =
                std::make_shared<CauseAction>(childTree.second);
            m_Actions.emplace_back(std::move(val));
		}
	}
	m_Blocked = pt.get("blocked", false);
	m_Buildable = pt.get("buildable", false);
	m_Id = pt.get("id", 0);
	m_InQueueSince = pt.get("inQueueSince", 0);
	m_Params = pt.get("params", "");
	m_Stuck = pt.get("stuck", false);
	if (pt.get_child_optional("task")) {
		m_Task = std::make_shared<FreeStyleProject>();
		m_Task->fromPropertyTree(pt.get_child("task"));
	}
	m_Url = pt.get("url", "");
	m_Why = pt.get("why", "");
	m_BuildableStartMilliseconds = pt.get("buildableStartMilliseconds", 0);
}

std::string QueueBlockedItem::get_Class() const
{
    return m__class;
}

void QueueBlockedItem::set_Class(std::string value)
{
	m__class = value;
}
std::vector<std::shared_ptr<CauseAction>> QueueBlockedItem::getActions() const
{
    return m_Actions;
}

void QueueBlockedItem::setActions(std::vector<std::shared_ptr<CauseAction>> value)
{
	m_Actions = value;
}
bool QueueBlockedItem::isBlocked() const
{
    return m_Blocked;
}

void QueueBlockedItem::setBlocked(bool value)
{
	m_Blocked = value;
}
bool QueueBlockedItem::isBuildable() const
{
    return m_Buildable;
}

void QueueBlockedItem::setBuildable(bool value)
{
	m_Buildable = value;
}
int32_t QueueBlockedItem::getId() const
{
    return m_Id;
}

void QueueBlockedItem::setId(int32_t value)
{
	m_Id = value;
}
int32_t QueueBlockedItem::getInQueueSince() const
{
    return m_InQueueSince;
}

void QueueBlockedItem::setInQueueSince(int32_t value)
{
	m_InQueueSince = value;
}
std::string QueueBlockedItem::getParams() const
{
    return m_Params;
}

void QueueBlockedItem::setParams(std::string value)
{
	m_Params = value;
}
bool QueueBlockedItem::isStuck() const
{
    return m_Stuck;
}

void QueueBlockedItem::setStuck(bool value)
{
	m_Stuck = value;
}
std::shared_ptr<FreeStyleProject> QueueBlockedItem::getTask() const
{
    return m_Task;
}

void QueueBlockedItem::setTask(std::shared_ptr<FreeStyleProject> value)
{
	m_Task = value;
}
std::string QueueBlockedItem::getUrl() const
{
    return m_Url;
}

void QueueBlockedItem::setUrl(std::string value)
{
	m_Url = value;
}
std::string QueueBlockedItem::getWhy() const
{
    return m_Why;
}

void QueueBlockedItem::setWhy(std::string value)
{
	m_Why = value;
}
int32_t QueueBlockedItem::getBuildableStartMilliseconds() const
{
    return m_BuildableStartMilliseconds;
}

void QueueBlockedItem::setBuildableStartMilliseconds(int32_t value)
{
	m_BuildableStartMilliseconds = value;
}

std::vector<QueueBlockedItem> createQueueBlockedItemVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<QueueBlockedItem>();
    for (const auto& child: pt) {
        vec.emplace_back(QueueBlockedItem(child.second));
    }

    return vec;
}

}
}
}
}

