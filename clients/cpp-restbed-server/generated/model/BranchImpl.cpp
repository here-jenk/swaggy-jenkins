/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BranchImpl.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BranchImpl::BranchImpl(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string BranchImpl::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void BranchImpl::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree BranchImpl::toPropertyTree()
{
    return toPropertyTree_internal();
}

void BranchImpl::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string BranchImpl::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BranchImpl::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BranchImpl::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.put("displayName", m_DisplayName);
	pt.put("estimatedDurationInMillis", m_EstimatedDurationInMillis);
	pt.put("fullDisplayName", m_FullDisplayName);
	pt.put("fullName", m_FullName);
	pt.put("name", m_Name);
	pt.put("organization", m_Organization);
	// generate tree for Parameters
	if (!m_Parameters.empty()) {
		for (const auto &childEntry : m_Parameters) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("parameters", tmp_node);
		tmp_node.clear();
	}
	if (m_Permissions != nullptr) {
		pt.add_child("permissions", m_Permissions->toPropertyTree());
	}
	pt.put("weatherScore", m_WeatherScore);
	pt.put("pullRequest", m_PullRequest);
	if (m__links != nullptr) {
		pt.add_child("_links", m__links->toPropertyTree());
	}
	if (m_LatestRun != nullptr) {
		pt.add_child("latestRun", m_LatestRun->toPropertyTree());
	}
	return pt;
}

void BranchImpl::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	m_DisplayName = pt.get("displayName", "");
	m_EstimatedDurationInMillis = pt.get("estimatedDurationInMillis", 0);
	m_FullDisplayName = pt.get("fullDisplayName", "");
	m_FullName = pt.get("fullName", "");
	m_Name = pt.get("name", "");
	m_Organization = pt.get("organization", "");
	// push all items of Parameters into member vector
	if (pt.get_child_optional("parameters")) {
		for (const auto &childTree : pt.get_child("parameters")) {
            std::shared_ptr<StringParameterDefinition> val =
                std::make_shared<StringParameterDefinition>(childTree.second);
            m_Parameters.emplace_back(std::move(val));
		}
	}
	if (pt.get_child_optional("permissions")) {
		m_Permissions = std::make_shared<BranchImplpermissions>();
		m_Permissions->fromPropertyTree(pt.get_child("permissions"));
	}
	m_WeatherScore = pt.get("weatherScore", 0);
	m_PullRequest = pt.get("pullRequest", "");
	if (pt.get_child_optional("_links")) {
		m__links = std::make_shared<BranchImpllinks>();
		m__links->fromPropertyTree(pt.get_child("_links"));
	}
	if (pt.get_child_optional("latestRun")) {
		m_LatestRun = std::make_shared<PipelineRunImpl>();
		m_LatestRun->fromPropertyTree(pt.get_child("latestRun"));
	}
}

std::string BranchImpl::get_Class() const
{
    return m__class;
}

void BranchImpl::set_Class(std::string value)
{
	m__class = value;
}
std::string BranchImpl::getDisplayName() const
{
    return m_DisplayName;
}

void BranchImpl::setDisplayName(std::string value)
{
	m_DisplayName = value;
}
int32_t BranchImpl::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}

void BranchImpl::setEstimatedDurationInMillis(int32_t value)
{
	m_EstimatedDurationInMillis = value;
}
std::string BranchImpl::getFullDisplayName() const
{
    return m_FullDisplayName;
}

void BranchImpl::setFullDisplayName(std::string value)
{
	m_FullDisplayName = value;
}
std::string BranchImpl::getFullName() const
{
    return m_FullName;
}

void BranchImpl::setFullName(std::string value)
{
	m_FullName = value;
}
std::string BranchImpl::getName() const
{
    return m_Name;
}

void BranchImpl::setName(std::string value)
{
	m_Name = value;
}
std::string BranchImpl::getOrganization() const
{
    return m_Organization;
}

void BranchImpl::setOrganization(std::string value)
{
	m_Organization = value;
}
std::vector<std::shared_ptr<StringParameterDefinition>> BranchImpl::getParameters() const
{
    return m_Parameters;
}

void BranchImpl::setParameters(std::vector<std::shared_ptr<StringParameterDefinition>> value)
{
	m_Parameters = value;
}
std::shared_ptr<BranchImplpermissions> BranchImpl::getPermissions() const
{
    return m_Permissions;
}

void BranchImpl::setPermissions(std::shared_ptr<BranchImplpermissions> value)
{
	m_Permissions = value;
}
int32_t BranchImpl::getWeatherScore() const
{
    return m_WeatherScore;
}

void BranchImpl::setWeatherScore(int32_t value)
{
	m_WeatherScore = value;
}
std::string BranchImpl::getPullRequest() const
{
    return m_PullRequest;
}

void BranchImpl::setPullRequest(std::string value)
{
	m_PullRequest = value;
}
std::shared_ptr<BranchImpllinks> BranchImpl::get_Links() const
{
    return m__links;
}

void BranchImpl::set_Links(std::shared_ptr<BranchImpllinks> value)
{
	m__links = value;
}
std::shared_ptr<PipelineRunImpl> BranchImpl::getLatestRun() const
{
    return m_LatestRun;
}

void BranchImpl::setLatestRun(std::shared_ptr<PipelineRunImpl> value)
{
	m_LatestRun = value;
}

std::vector<BranchImpl> createBranchImplVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BranchImpl>();
    for (const auto& child: pt) {
        vec.emplace_back(BranchImpl(child.second));
    }

    return vec;
}

}
}
}
}

