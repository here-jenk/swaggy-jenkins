/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BlueOceanApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BlueOceanApiException::BlueOceanApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BlueOceanApiException::getStatus() const
{
    return m_status;
}
const char* BlueOceanApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue/{queue: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string queue = getPathParam_queue(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(organization, pipeline, queue);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully deleted queue item" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE(
        std::string const & organization, std::string const & pipeline, std::string const & queue)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationUserResource::BlueOceanApiBlueRestOrganizationsOrganizationUserResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/user//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUserResource::~BlueOceanApiBlueRestOrganizationsOrganizationUserResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUserResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUserResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUserResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);



    int status_code = 500;
    std::shared_ptr<User> resultObject = std::make_shared<User>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved authenticated user details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<User>> BlueOceanApiBlueRestOrganizationsOrganizationUserResource::handler_GET(
        std::string const & organization)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationUserResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestClassesClassResource::BlueOceanApiBlueRestClassesClassResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/classes/{class: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestClassesClassResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestClassesClassResource::~BlueOceanApiBlueRestClassesClassResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesClassResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesClassResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesClassResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestClassesClassResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestClassesClassResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestClassesClassResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestClassesClassResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string r_class = getPathParam_r_class(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(r_class);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved class names" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiBlueRestClassesClassResource::handler_GET(
        std::string const & r_class)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestClassesClassResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiJwt-authJwksKeyResource::BlueOceanApiJwt-authJwksKeyResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/jwt-auth/jwks/{key: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiJwt-authJwksKeyResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiJwt-authJwksKeyResource::~BlueOceanApiJwt-authJwksKeyResource()
{
}

std::pair<int, std::string> BlueOceanApiJwt-authJwksKeyResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiJwt-authJwksKeyResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiJwt-authJwksKeyResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiJwt-authJwksKeyResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiJwt-authJwksKeyResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiJwt-authJwksKeyResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiJwt-authJwksKeyResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const int32_t key = getPathParam_key(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(key);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved JWT token" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiJwt-authJwksKeyResource::handler_GET(
        int32_t const & key)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiJwt-authJwksKeyResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiJwt-authTokenResource::BlueOceanApiJwt-authTokenResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/jwt-auth/token/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiJwt-authTokenResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiJwt-authTokenResource::~BlueOceanApiJwt-authTokenResource()
{
}

std::pair<int, std::string> BlueOceanApiJwt-authTokenResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiJwt-authTokenResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiJwt-authTokenResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiJwt-authTokenResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiJwt-authTokenResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiJwt-authTokenResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiJwt-authTokenResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const int32_t expiryTimeInMins = getQueryParam_expiryTimeInMins(request);
    const int32_t maxExpiryTimeInMins = getQueryParam_maxExpiryTimeInMins(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(expiryTimeInMins, maxExpiryTimeInMins);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved JWT token" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiJwt-authTokenResource::handler_GET(
        int32_t const & expiryTimeInMins, int32_t const & maxExpiryTimeInMins)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiJwt-authTokenResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationResource::BlueOceanApiBlueRestOrganizationsOrganizationResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationResource::~BlueOceanApiBlueRestOrganizationsOrganizationResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);



    int status_code = 500;
    std::shared_ptr<Organisation> resultObject = std::make_shared<Organisation>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipeline details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Pipeline cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Organisation>> BlueOceanApiBlueRestOrganizationsOrganizationResource::handler_GET(
        std::string const & organization)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsResource::BlueOceanApiBlueRestOrganizationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsResource::~BlueOceanApiBlueRestOrganizationsResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::vector<std::shared_ptr<Organisation>> resultObject = std::vector<std::shared_ptr<Organisation>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipelines details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<Organisation>>> BlueOceanApiBlueRestOrganizationsResource::handler_GET(
        )
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::shared_ptr<Pipeline> resultObject = std::make_shared<Pipeline>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipeline details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Pipeline cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Pipeline>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET(
        std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/activities/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::vector<std::shared_ptr<PipelineActivity>> resultObject = std::vector<std::shared_ptr<PipelineActivity>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved all activities details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<PipelineActivity>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET(
        std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string branch = getPathParam_branch(request);



    int status_code = 500;
    std::shared_ptr<BranchImpl> resultObject = std::make_shared<BranchImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, branch);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved branch details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<BranchImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & branch)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}/runs/{run: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string branch = getPathParam_branch(request);
    const std::string run = getPathParam_run(request);



    int status_code = 500;
    std::shared_ptr<PipelineRun> resultObject = std::make_shared<PipelineRun>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, branch, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineRun>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & branch, std::string const & run)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::shared_ptr<MultibranchPipeline> resultObject = std::make_shared<MultibranchPipeline>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved all branches details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<MultibranchPipeline>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET(
        std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string folder = getPathParam_folder(request);



    int status_code = 500;
    std::shared_ptr<PipelineFolderImpl> resultObject = std::make_shared<PipelineFolderImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, folder);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved folder details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineFolderImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET(
        std::string const & organization, std::string const & folder)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}/pipelines/{pipeline: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string folder = getPathParam_folder(request);



    int status_code = 500;
    std::shared_ptr<PipelineImpl> resultObject = std::make_shared<PipelineImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, folder);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipeline details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & folder)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::vector<std::shared_ptr<QueueItemImpl>> resultObject = std::vector<std::shared_ptr<QueueItemImpl>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved queue details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<QueueItemImpl>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET(
        std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);



    int status_code = 500;
    std::shared_ptr<PipelineRun> resultObject = std::make_shared<PipelineRun>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineRun>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/log/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);

    // Getting the query params
    const int32_t start = getQueryParam_start(request);
    const bool download = getQueryParam_download(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run, start, download);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipeline run log" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, int32_t const & start, bool const & download)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);
    const std::string node = getPathParam_node(request);



    int status_code = 500;
    std::shared_ptr<PipelineRunNode> resultObject = std::make_shared<PipelineRunNode>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run, node);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run node details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineRunNode>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);
    const std::string node = getPathParam_node(request);
    const std::string step = getPathParam_step(request);



    int status_code = 500;
    std::shared_ptr<PipelineStepImpl> resultObject = std::make_shared<PipelineStepImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run, node, step);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run node step details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineStepImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node, std::string const & step)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}/log/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);
    const std::string node = getPathParam_node(request);
    const std::string step = getPathParam_step(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run, node, step);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipeline run node step log" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node, std::string const & step)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);
    const std::string node = getPathParam_node(request);



    int status_code = 500;
    std::vector<std::shared_ptr<PipelineStepImpl>> resultObject = std::vector<std::shared_ptr<PipelineStepImpl>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run, node);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run node steps details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<PipelineStepImpl>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);



    int status_code = 500;
    std::vector<std::shared_ptr<PipelineRunNode>> resultObject = std::vector<std::shared_ptr<PipelineRunNode>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved run nodes details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<PipelineRunNode>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::vector<std::shared_ptr<PipelineRun>> resultObject = std::vector<std::shared_ptr<PipelineRun>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved runs details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization_x_extension(request);

    const std::string pipeline = getPathParam_pipeline_x_extension(request);


    int status_code = 500;
    std::shared_ptr<QueueItemImpl> resultObject = std::make_shared<QueueItemImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_POST(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully started a build" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::vector<std::shared_ptr<PipelineRun>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET(
        std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<QueueItemImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST(
    std::string const & organization, std::string const & pipeline)
{
    throw BlueOceanApiException(501, "Not implemented");
}

std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);



    int status_code = 500;
    std::vector<std::shared_ptr<Pipeline>> resultObject = std::vector<std::shared_ptr<Pipeline>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved pipelines details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<Pipeline>>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::handler_GET(
        std::string const & organization)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string scm = getPathParam_scm(request);



    int status_code = 500;
    std::shared_ptr<GithubScm> resultObject = std::make_shared<GithubScm>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, scm);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved SCM details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<GithubScm>> BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::handler_GET(
        std::string const & organization, std::string const & scm)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string scm = getPathParam_scm(request);
    const std::string scmOrganisation = getPathParam_scmOrganisation(request);

    // Getting the query params
    const std::string credentialId = getQueryParam_credentialId(request);
    const int32_t pageSize = getQueryParam_pageSize(request);
    const int32_t pageNumber = getQueryParam_pageNumber(request);


    int status_code = 500;
    std::vector<std::shared_ptr<GithubOrganization>> resultObject = std::vector<std::shared_ptr<GithubOrganization>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved SCM organization repositories details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET(
        std::string const & organization, std::string const & scm, std::string const & scmOrganisation, std::string const & credentialId, int32_t const & pageSize, int32_t const & pageNumber)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories/{repository: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string scm = getPathParam_scm(request);
    const std::string scmOrganisation = getPathParam_scmOrganisation(request);
    const std::string repository = getPathParam_repository(request);

    // Getting the query params
    const std::string credentialId = getQueryParam_credentialId(request);


    int status_code = 500;
    std::vector<std::shared_ptr<GithubOrganization>> resultObject = std::vector<std::shared_ptr<GithubOrganization>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, scm, scmOrganisation, repository, credentialId);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved SCM organizations details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET(
        std::string const & organization, std::string const & scm, std::string const & scmOrganisation, std::string const & repository, std::string const & credentialId)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string scm = getPathParam_scm(request);

    // Getting the query params
    const std::string credentialId = getQueryParam_credentialId(request);


    int status_code = 500;
    std::vector<std::shared_ptr<GithubOrganization>> resultObject = std::vector<std::shared_ptr<GithubOrganization>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, scm, credentialId);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved SCM organizations details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET(
        std::string const & organization, std::string const & scm, std::string const & credentialId)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/users/{user: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::~BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string user = getPathParam_user(request);



    int status_code = 500;
    std::shared_ptr<User> resultObject = std::make_shared<User>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization, user);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved users details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<User>> BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::handler_GET(
        std::string const & organization, std::string const & user)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestUsersUserFavoritesResource::BlueOceanApiBlueRestUsersUserFavoritesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/users/{user: .*}/favorites/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestUsersUserFavoritesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestUsersUserFavoritesResource::~BlueOceanApiBlueRestUsersUserFavoritesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestUsersUserFavoritesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestUsersUserFavoritesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestUsersUserFavoritesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestUsersUserFavoritesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestUsersUserFavoritesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestUsersUserFavoritesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestUsersUserFavoritesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string user = getPathParam_user(request);



    int status_code = 500;
    std::vector<std::shared_ptr<FavoriteImpl>> resultObject = std::vector<std::shared_ptr<FavoriteImpl>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(user);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved users favorites details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::shared_ptr<FavoriteImpl>>> BlueOceanApiBlueRestUsersUserFavoritesResource::handler_GET(
        std::string const & user)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestUsersUserFavoritesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::BlueOceanApiBlueRestOrganizationsOrganizationUsersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/users//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::~BlueOceanApiBlueRestOrganizationsOrganizationUsersResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);



    int status_code = 500;
    std::shared_ptr<User> resultObject = std::make_shared<User>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved users details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<User>> BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::handler_GET(
        std::string const & organization)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/replay/");
	this->set_method_handler("POST",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);



    int status_code = 500;
    std::shared_ptr<QueueItemImpl> resultObject = std::make_shared<QueueItemImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully replayed a pipeline run" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<QueueItemImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST(
        std::string const & organization, std::string const & pipeline, std::string const & run)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/favorite/");
	this->set_method_handler("PUT",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);



    int status_code = 500;
    std::shared_ptr<FavoriteImpl> resultObject = std::make_shared<FavoriteImpl>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(organization, pipeline, uNKNOWNBASETYPE);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully favorited/unfavorited a pipeline" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<FavoriteImpl>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT(
        std::string const & organization, std::string const & pipeline, std::shared_ptr<UNKNOWN_BASE_TYPE> const & uNKNOWNBASETYPE)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/stop/");
	this->set_method_handler("PUT",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string organization = getPathParam_organization(request);
    const std::string pipeline = getPathParam_pipeline(request);
    const std::string run = getPathParam_run(request);

    // Getting the query params
    const std::string blocking = getQueryParam_blocking(request);
    const int32_t timeOutInSecs = getQueryParam_timeOutInSecs(request);


    int status_code = 500;
    std::shared_ptr<PipelineRun> resultObject = std::make_shared<PipelineRun>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_PUT(organization, pipeline, run, blocking, timeOutInSecs);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully stopped a build" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<PipelineRun>> BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & blocking, int32_t const & timeOutInSecs)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestSearchResource::BlueOceanApiBlueRestSearchResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/search//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestSearchResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestSearchResource::~BlueOceanApiBlueRestSearchResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestSearchResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestSearchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestSearchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestSearchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestSearchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestSearchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestSearchResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string q = getQueryParam_q(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(q);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved search result" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiBlueRestSearchResource::handler_GET(
        std::string const & q)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestSearchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BlueOceanApiBlueRestClassesResource::BlueOceanApiBlueRestClassesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/classes//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestClassesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestClassesResource::~BlueOceanApiBlueRestClassesResource()
{
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueOceanApiBlueRestClassesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueOceanApiBlueRestClassesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueOceanApiBlueRestClassesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BlueOceanApiBlueRestClassesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueOceanApiBlueRestClassesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string q = getQueryParam_q(request);


    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(q);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved search result" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::string> BlueOceanApiBlueRestClassesResource::handler_GET(
        std::string const & q)
{
    throw BlueOceanApiException(501, "Not implemented");
}


std::string BlueOceanApiBlueRestClassesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

BlueOceanApi::BlueOceanApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BlueOceanApi::~BlueOceanApi() {}

void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUserResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUserResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationUserResource = spBlueOceanApiBlueRestOrganizationsOrganizationUserResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationUserResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestClassesClassResource(std::shared_ptr<BlueOceanApiBlueRestClassesClassResource> spBlueOceanApiBlueRestClassesClassResource) {
    m_spBlueOceanApiBlueRestClassesClassResource = spBlueOceanApiBlueRestClassesClassResource;
    m_service->publish(m_spBlueOceanApiBlueRestClassesClassResource);
}
void BlueOceanApi::setBlueOceanApiJwt-authJwksKeyResource(std::shared_ptr<BlueOceanApiJwt-authJwksKeyResource> spBlueOceanApiJwt-authJwksKeyResource) {
    m_spBlueOceanApiJwt-authJwksKeyResource = spBlueOceanApiJwt-authJwksKeyResource;
    m_service->publish(m_spBlueOceanApiJwt-authJwksKeyResource);
}
void BlueOceanApi::setBlueOceanApiJwt-authTokenResource(std::shared_ptr<BlueOceanApiJwt-authTokenResource> spBlueOceanApiJwt-authTokenResource) {
    m_spBlueOceanApiJwt-authTokenResource = spBlueOceanApiJwt-authTokenResource;
    m_service->publish(m_spBlueOceanApiJwt-authTokenResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationResource> spBlueOceanApiBlueRestOrganizationsOrganizationResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationResource = spBlueOceanApiBlueRestOrganizationsOrganizationResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsResource> spBlueOceanApiBlueRestOrganizationsResource) {
    m_spBlueOceanApiBlueRestOrganizationsResource = spBlueOceanApiBlueRestOrganizationsResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource = spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource = spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource = spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource = spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource = spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestUsersUserFavoritesResource(std::shared_ptr<BlueOceanApiBlueRestUsersUserFavoritesResource> spBlueOceanApiBlueRestUsersUserFavoritesResource) {
    m_spBlueOceanApiBlueRestUsersUserFavoritesResource = spBlueOceanApiBlueRestUsersUserFavoritesResource;
    m_service->publish(m_spBlueOceanApiBlueRestUsersUserFavoritesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUsersResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource = spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource) {
    m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource = spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
    m_service->publish(m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestSearchResource(std::shared_ptr<BlueOceanApiBlueRestSearchResource> spBlueOceanApiBlueRestSearchResource) {
    m_spBlueOceanApiBlueRestSearchResource = spBlueOceanApiBlueRestSearchResource;
    m_service->publish(m_spBlueOceanApiBlueRestSearchResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestClassesResource(std::shared_ptr<BlueOceanApiBlueRestClassesResource> spBlueOceanApiBlueRestClassesResource) {
    m_spBlueOceanApiBlueRestClassesResource = spBlueOceanApiBlueRestClassesResource;
    m_service->publish(m_spBlueOceanApiBlueRestClassesResource);
}


void BlueOceanApi::publishDefaultResources() {
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationUserResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationUserResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUserResource>());
    }
    if (!m_spBlueOceanApiBlueRestClassesClassResource) {
        setBlueOceanApiBlueRestClassesClassResource(std::make_shared<BlueOceanApiBlueRestClassesClassResource>());
    }
    if (!m_spBlueOceanApiJwt-authJwksKeyResource) {
        setBlueOceanApiJwt-authJwksKeyResource(std::make_shared<BlueOceanApiJwt-authJwksKeyResource>());
    }
    if (!m_spBlueOceanApiJwt-authTokenResource) {
        setBlueOceanApiJwt-authTokenResource(std::make_shared<BlueOceanApiJwt-authTokenResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsResource) {
        setBlueOceanApiBlueRestOrganizationsResource(std::make_shared<BlueOceanApiBlueRestOrganizationsResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource>());
    }
    if (!m_spBlueOceanApiBlueRestUsersUserFavoritesResource) {
        setBlueOceanApiBlueRestUsersUserFavoritesResource(std::make_shared<BlueOceanApiBlueRestUsersUserFavoritesResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationUsersResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource>());
    }
    if (!m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource) {
        setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource>());
    }
    if (!m_spBlueOceanApiBlueRestSearchResource) {
        setBlueOceanApiBlueRestSearchResource(std::make_shared<BlueOceanApiBlueRestSearchResource>());
    }
    if (!m_spBlueOceanApiBlueRestClassesResource) {
        setBlueOceanApiBlueRestClassesResource(std::make_shared<BlueOceanApiBlueRestClassesResource>());
    }
}

std::shared_ptr<restbed::Service> BlueOceanApi::service() {
    return m_service;
}


}
}
}
}

