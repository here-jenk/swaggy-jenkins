/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "RemoteAccessApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

RemoteAccessApiException::RemoteAccessApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int RemoteAccessApiException::getStatus() const
{
    return m_status;
}
const char* RemoteAccessApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

RemoteAccessApiComputerApiJsonResource::RemoteAccessApiComputerApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/computer/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiComputerApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiComputerApiJsonResource::~RemoteAccessApiComputerApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiComputerApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiComputerApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiComputerApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiComputerApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiComputerApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiComputerApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiComputerApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const int32_t depth = getQueryParam_depth(request);


    int status_code = 500;
    std::shared_ptr<ComputerSet> resultObject = std::make_shared<ComputerSet>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(depth);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved computer details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<ComputerSet>> RemoteAccessApiComputerApiJsonResource::handler_GET(
        int32_t const & depth)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiComputerApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiApiJsonResource::RemoteAccessApiApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("HEAD",
		std::bind(&RemoteAccessApiApiJsonResource::handler_HEAD_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiApiJsonResource::~RemoteAccessApiApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::shared_ptr<Hudson> resultObject = std::make_shared<Hudson>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved Jenkins details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void RemoteAccessApiApiJsonResource::handler_HEAD_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();


    int status_code = 500;
    std::string result = "";

    try {
        status_code =
            handler_HEAD();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        // Description: Jenkins version number
        setResponseHeader(session, "x-jenkins");

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved Jenkins headers" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<Hudson>> RemoteAccessApiApiJsonResource::handler_GET(
        )
{
    throw RemoteAccessApiException(501, "Not implemented");
}

int RemoteAccessApiApiJsonResource::handler_HEAD(
    )
{
    throw RemoteAccessApiException(501, "Not implemented");
}

std::string RemoteAccessApiApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameApiJsonResource::RemoteAccessApiJobNameApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiJobNameApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameApiJsonResource::~RemoteAccessApiJobNameApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);



    int status_code = 500;
    std::shared_ptr<FreeStyleProject> resultObject = std::make_shared<FreeStyleProject>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved job details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<FreeStyleProject>> RemoteAccessApiJobNameApiJsonResource::handler_GET(
        std::string const & name)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameConfig.xmlResource::RemoteAccessApiJobNameConfig.xmlResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/config.xml/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiJobNameConfig.xmlResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameConfig.xmlResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameConfig.xmlResource::~RemoteAccessApiJobNameConfig.xmlResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameConfig.xmlResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameConfig.xmlResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameConfig.xmlResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameConfig.xmlResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameConfig.xmlResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameConfig.xmlResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameConfig.xmlResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved job configuration in config.xml format" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void RemoteAccessApiJobNameConfig.xmlResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto name = std::make_shared<>(bodyContent);
    auto body = std::make_shared<std::string>(bodyContent);
    auto jenkinsCrumb = std::make_shared<>(bodyContent);

    // Getting the path params
    const std::string name = getPathParam_name_x_extension(request);

    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb_x_extension(request);


    int status_code = 500;
    std::string result = "";

    try {
        status_code =
            handler_POST(name, body, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved job configuration in config.xml format" : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "An error has occurred - error message is embedded inside the HTML response" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::string> RemoteAccessApiJobNameConfig.xmlResource::handler_GET(
        std::string const & name)
{
    throw RemoteAccessApiException(501, "Not implemented");
}

int RemoteAccessApiJobNameConfig.xmlResource::handler_POST(
    std::string const & name, std::string const & body, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}

std::string RemoteAccessApiJobNameConfig.xmlResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameLastBuildApiJsonResource::RemoteAccessApiJobNameLastBuildApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/lastBuild/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiJobNameLastBuildApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameLastBuildApiJsonResource::~RemoteAccessApiJobNameLastBuildApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameLastBuildApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameLastBuildApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameLastBuildApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameLastBuildApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);



    int status_code = 500;
    std::shared_ptr<FreeStyleBuild> resultObject = std::make_shared<FreeStyleBuild>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved job&#39;s last build details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<FreeStyleBuild>> RemoteAccessApiJobNameLastBuildApiJsonResource::handler_GET(
        std::string const & name)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameLastBuildApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::RemoteAccessApiJobNameNumberLogTextProgressiveTextResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/{number: .*}/logText/progressiveText/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::~RemoteAccessApiJobNameNumberLogTextProgressiveTextResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);
    const std::string number = getPathParam_number(request);

    // Getting the query params
    const std::string start = getQueryParam_start(request);


    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_GET(name, number, start);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved job&#39;s build progressive text output" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::handler_GET(
        std::string const & name, std::string const & number, std::string const & start)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameNumberLogTextProgressiveTextResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiQueueApiJsonResource::RemoteAccessApiQueueApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/queue/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiQueueApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiQueueApiJsonResource::~RemoteAccessApiQueueApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiQueueApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiQueueApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiQueueApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiQueueApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiQueueApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiQueueApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiQueueApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();




    int status_code = 500;
    std::shared_ptr<Queue> resultObject = std::make_shared<Queue>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved queue details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Queue>> RemoteAccessApiQueueApiJsonResource::handler_GET(
        )
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiQueueApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiQueueItemNumberApiJsonResource::RemoteAccessApiQueueItemNumberApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/queue/item/{number: .*}/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiQueueItemNumberApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiQueueItemNumberApiJsonResource::~RemoteAccessApiQueueItemNumberApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiQueueItemNumberApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiQueueItemNumberApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiQueueItemNumberApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiQueueItemNumberApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiQueueItemNumberApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiQueueItemNumberApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiQueueItemNumberApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string number = getPathParam_number(request);



    int status_code = 500;
    std::shared_ptr<Queue> resultObject = std::make_shared<Queue>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(number);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved queued item details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Queue>> RemoteAccessApiQueueItemNumberApiJsonResource::handler_GET(
        std::string const & number)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiQueueItemNumberApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiViewNameApiJsonResource::RemoteAccessApiViewNameApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/view/{name: .*}/api/json/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiViewNameApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiViewNameApiJsonResource::~RemoteAccessApiViewNameApiJsonResource()
{
}

std::pair<int, std::string> RemoteAccessApiViewNameApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiViewNameApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiViewNameApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiViewNameApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiViewNameApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiViewNameApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiViewNameApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);



    int status_code = 500;
    std::shared_ptr<ListView> resultObject = std::make_shared<ListView>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved view details" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "View cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<ListView>> RemoteAccessApiViewNameApiJsonResource::handler_GET(
        std::string const & name)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiViewNameApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiViewNameConfig.xmlResource::RemoteAccessApiViewNameConfig.xmlResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/view/{name: .*}/config.xml/");
	this->set_method_handler("GET",
		std::bind(&RemoteAccessApiViewNameConfig.xmlResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiViewNameConfig.xmlResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiViewNameConfig.xmlResource::~RemoteAccessApiViewNameConfig.xmlResource()
{
}

std::pair<int, std::string> RemoteAccessApiViewNameConfig.xmlResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiViewNameConfig.xmlResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiViewNameConfig.xmlResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiViewNameConfig.xmlResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiViewNameConfig.xmlResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiViewNameConfig.xmlResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiViewNameConfig.xmlResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);



    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject;

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Successfully retrieved view configuration in config.xml format" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "View cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void RemoteAccessApiViewNameConfig.xmlResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto name = std::make_shared<>(bodyContent);
    auto body = std::make_shared<std::string>(bodyContent);
    auto jenkinsCrumb = std::make_shared<>(bodyContent);

    // Getting the path params
    const std::string name = getPathParam_name_x_extension(request);

    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb_x_extension(request);


    int status_code = 500;
    std::string result = "";

    try {
        status_code =
            handler_POST(name, body, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully updated view configuration" : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "An error has occurred - error message is embedded inside the HTML response" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "View cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::string> RemoteAccessApiViewNameConfig.xmlResource::handler_GET(
        std::string const & name)
{
    throw RemoteAccessApiException(501, "Not implemented");
}

int RemoteAccessApiViewNameConfig.xmlResource::handler_POST(
    std::string const & name, std::string const & body, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}

std::string RemoteAccessApiViewNameConfig.xmlResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiCreateItemResource::RemoteAccessApiCreateItemResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/createItem/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiCreateItemResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiCreateItemResource::~RemoteAccessApiCreateItemResource()
{
}

std::pair<int, std::string> RemoteAccessApiCreateItemResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiCreateItemResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiCreateItemResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiCreateItemResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiCreateItemResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiCreateItemResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiCreateItemResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string


    // Getting the query params
    const std::string name = getQueryParam_name(request);
    const std::string from = getQueryParam_from(request);
    const std::string mode = getQueryParam_mode(request);

    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);
    const std::string contentType = getHeader_Content-Type(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, from, mode, jenkinsCrumb, contentType, body);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully created a new job" : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "An error has occurred - error message is embedded inside the HTML response" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiCreateItemResource::handler_POST(
        std::string const & name, std::string const & from, std::string const & mode, std::string const & jenkinsCrumb, std::string const & contentType, std::string const & body)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiCreateItemResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiCreateViewResource::RemoteAccessApiCreateViewResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/createView/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiCreateViewResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiCreateViewResource::~RemoteAccessApiCreateViewResource()
{
}

std::pair<int, std::string> RemoteAccessApiCreateViewResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiCreateViewResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiCreateViewResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiCreateViewResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiCreateViewResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiCreateViewResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiCreateViewResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string


    // Getting the query params
    const std::string name = getQueryParam_name(request);

    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);
    const std::string contentType = getHeader_Content-Type(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, jenkinsCrumb, contentType, body);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully created the view" : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "An error has occurred - error message is embedded inside the HTML response" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiCreateViewResource::handler_POST(
        std::string const & name, std::string const & jenkinsCrumb, std::string const & contentType, std::string const & body)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiCreateViewResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameBuildResource::RemoteAccessApiJobNameBuildResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/build/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameBuildResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameBuildResource::~RemoteAccessApiJobNameBuildResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameBuildResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameBuildResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameBuildResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameBuildResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameBuildResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameBuildResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameBuildResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);

    // Getting the query params
    const std::string json = getQueryParam_json(request);
    const std::string token = getQueryParam_token(request);

    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, json, token, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully built the job (backward compatibility for older versions of Jenkins)" : result, contentType);
        return;
    }
    if (status_code == 201) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 201, result.empty() ? "Successfully built the job" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameBuildResource::handler_POST(
        std::string const & name, std::string const & json, std::string const & token, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameBuildResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameDoDeleteResource::RemoteAccessApiJobNameDoDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/doDelete/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameDoDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameDoDeleteResource::~RemoteAccessApiJobNameDoDeleteResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameDoDeleteResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameDoDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameDoDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameDoDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameDoDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameDoDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameDoDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);


    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully deleted the job" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameDoDeleteResource::handler_POST(
        std::string const & name, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameDoDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameDisableResource::RemoteAccessApiJobNameDisableResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/disable/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameDisableResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameDisableResource::~RemoteAccessApiJobNameDisableResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameDisableResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameDisableResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameDisableResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameDisableResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameDisableResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameDisableResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameDisableResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);


    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully disabled the job" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameDisableResource::handler_POST(
        std::string const & name, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameDisableResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameEnableResource::RemoteAccessApiJobNameEnableResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/enable/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameEnableResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameEnableResource::~RemoteAccessApiJobNameEnableResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameEnableResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameEnableResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameEnableResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameEnableResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameEnableResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameEnableResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameEnableResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);


    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully enabled the job" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameEnableResource::handler_POST(
        std::string const & name, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameEnableResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
RemoteAccessApiJobNameLastBuildStopResource::RemoteAccessApiJobNameLastBuildStopResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/lastBuild/stop/");
	this->set_method_handler("POST",
		std::bind(&RemoteAccessApiJobNameLastBuildStopResource::handler_POST_internal, this,
			std::placeholders::_1));
}

RemoteAccessApiJobNameLastBuildStopResource::~RemoteAccessApiJobNameLastBuildStopResource()
{
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildStopResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildStopResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> RemoteAccessApiJobNameLastBuildStopResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void RemoteAccessApiJobNameLastBuildStopResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void RemoteAccessApiJobNameLastBuildStopResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void RemoteAccessApiJobNameLastBuildStopResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void RemoteAccessApiJobNameLastBuildStopResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string name = getPathParam_name(request);


    // Getting the headers
    const std::string jenkinsCrumb = getHeader_Jenkins-Crumb(request);

    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 200, result.empty() ? "Successfully stopped the job" : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 401, result.empty() ? "Authentication failed - incorrect username and/or password" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 403, result.empty() ? "Jenkins requires authentication - please set username and password" : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 404, result.empty() ? "Job cannot be found on Jenkins instance" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


int RemoteAccessApiJobNameLastBuildStopResource::handler_POST(
        std::string const & name, std::string const & jenkinsCrumb)
{
    throw RemoteAccessApiException(501, "Not implemented");
}


std::string RemoteAccessApiJobNameLastBuildStopResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

RemoteAccessApi::RemoteAccessApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

RemoteAccessApi::~RemoteAccessApi() {}

void RemoteAccessApi::setRemoteAccessApiComputerApiJsonResource(std::shared_ptr<RemoteAccessApiComputerApiJsonResource> spRemoteAccessApiComputerApiJsonResource) {
    m_spRemoteAccessApiComputerApiJsonResource = spRemoteAccessApiComputerApiJsonResource;
    m_service->publish(m_spRemoteAccessApiComputerApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiApiJsonResource(std::shared_ptr<RemoteAccessApiApiJsonResource> spRemoteAccessApiApiJsonResource) {
    m_spRemoteAccessApiApiJsonResource = spRemoteAccessApiApiJsonResource;
    m_service->publish(m_spRemoteAccessApiApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameApiJsonResource(std::shared_ptr<RemoteAccessApiJobNameApiJsonResource> spRemoteAccessApiJobNameApiJsonResource) {
    m_spRemoteAccessApiJobNameApiJsonResource = spRemoteAccessApiJobNameApiJsonResource;
    m_service->publish(m_spRemoteAccessApiJobNameApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameConfig.xmlResource(std::shared_ptr<RemoteAccessApiJobNameConfig.xmlResource> spRemoteAccessApiJobNameConfig.xmlResource) {
    m_spRemoteAccessApiJobNameConfig.xmlResource = spRemoteAccessApiJobNameConfig.xmlResource;
    m_service->publish(m_spRemoteAccessApiJobNameConfig.xmlResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameLastBuildApiJsonResource(std::shared_ptr<RemoteAccessApiJobNameLastBuildApiJsonResource> spRemoteAccessApiJobNameLastBuildApiJsonResource) {
    m_spRemoteAccessApiJobNameLastBuildApiJsonResource = spRemoteAccessApiJobNameLastBuildApiJsonResource;
    m_service->publish(m_spRemoteAccessApiJobNameLastBuildApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameNumberLogTextProgressiveTextResource(std::shared_ptr<RemoteAccessApiJobNameNumberLogTextProgressiveTextResource> spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource) {
    m_spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource = spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource;
    m_service->publish(m_spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource);
}
void RemoteAccessApi::setRemoteAccessApiQueueApiJsonResource(std::shared_ptr<RemoteAccessApiQueueApiJsonResource> spRemoteAccessApiQueueApiJsonResource) {
    m_spRemoteAccessApiQueueApiJsonResource = spRemoteAccessApiQueueApiJsonResource;
    m_service->publish(m_spRemoteAccessApiQueueApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiQueueItemNumberApiJsonResource(std::shared_ptr<RemoteAccessApiQueueItemNumberApiJsonResource> spRemoteAccessApiQueueItemNumberApiJsonResource) {
    m_spRemoteAccessApiQueueItemNumberApiJsonResource = spRemoteAccessApiQueueItemNumberApiJsonResource;
    m_service->publish(m_spRemoteAccessApiQueueItemNumberApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiViewNameApiJsonResource(std::shared_ptr<RemoteAccessApiViewNameApiJsonResource> spRemoteAccessApiViewNameApiJsonResource) {
    m_spRemoteAccessApiViewNameApiJsonResource = spRemoteAccessApiViewNameApiJsonResource;
    m_service->publish(m_spRemoteAccessApiViewNameApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiViewNameConfig.xmlResource(std::shared_ptr<RemoteAccessApiViewNameConfig.xmlResource> spRemoteAccessApiViewNameConfig.xmlResource) {
    m_spRemoteAccessApiViewNameConfig.xmlResource = spRemoteAccessApiViewNameConfig.xmlResource;
    m_service->publish(m_spRemoteAccessApiViewNameConfig.xmlResource);
}
void RemoteAccessApi::setRemoteAccessApiCreateItemResource(std::shared_ptr<RemoteAccessApiCreateItemResource> spRemoteAccessApiCreateItemResource) {
    m_spRemoteAccessApiCreateItemResource = spRemoteAccessApiCreateItemResource;
    m_service->publish(m_spRemoteAccessApiCreateItemResource);
}
void RemoteAccessApi::setRemoteAccessApiCreateViewResource(std::shared_ptr<RemoteAccessApiCreateViewResource> spRemoteAccessApiCreateViewResource) {
    m_spRemoteAccessApiCreateViewResource = spRemoteAccessApiCreateViewResource;
    m_service->publish(m_spRemoteAccessApiCreateViewResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameBuildResource(std::shared_ptr<RemoteAccessApiJobNameBuildResource> spRemoteAccessApiJobNameBuildResource) {
    m_spRemoteAccessApiJobNameBuildResource = spRemoteAccessApiJobNameBuildResource;
    m_service->publish(m_spRemoteAccessApiJobNameBuildResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameDoDeleteResource(std::shared_ptr<RemoteAccessApiJobNameDoDeleteResource> spRemoteAccessApiJobNameDoDeleteResource) {
    m_spRemoteAccessApiJobNameDoDeleteResource = spRemoteAccessApiJobNameDoDeleteResource;
    m_service->publish(m_spRemoteAccessApiJobNameDoDeleteResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameDisableResource(std::shared_ptr<RemoteAccessApiJobNameDisableResource> spRemoteAccessApiJobNameDisableResource) {
    m_spRemoteAccessApiJobNameDisableResource = spRemoteAccessApiJobNameDisableResource;
    m_service->publish(m_spRemoteAccessApiJobNameDisableResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameEnableResource(std::shared_ptr<RemoteAccessApiJobNameEnableResource> spRemoteAccessApiJobNameEnableResource) {
    m_spRemoteAccessApiJobNameEnableResource = spRemoteAccessApiJobNameEnableResource;
    m_service->publish(m_spRemoteAccessApiJobNameEnableResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameLastBuildStopResource(std::shared_ptr<RemoteAccessApiJobNameLastBuildStopResource> spRemoteAccessApiJobNameLastBuildStopResource) {
    m_spRemoteAccessApiJobNameLastBuildStopResource = spRemoteAccessApiJobNameLastBuildStopResource;
    m_service->publish(m_spRemoteAccessApiJobNameLastBuildStopResource);
}


void RemoteAccessApi::publishDefaultResources() {
    if (!m_spRemoteAccessApiComputerApiJsonResource) {
        setRemoteAccessApiComputerApiJsonResource(std::make_shared<RemoteAccessApiComputerApiJsonResource>());
    }
    if (!m_spRemoteAccessApiApiJsonResource) {
        setRemoteAccessApiApiJsonResource(std::make_shared<RemoteAccessApiApiJsonResource>());
    }
    if (!m_spRemoteAccessApiJobNameApiJsonResource) {
        setRemoteAccessApiJobNameApiJsonResource(std::make_shared<RemoteAccessApiJobNameApiJsonResource>());
    }
    if (!m_spRemoteAccessApiJobNameConfig.xmlResource) {
        setRemoteAccessApiJobNameConfig.xmlResource(std::make_shared<RemoteAccessApiJobNameConfig.xmlResource>());
    }
    if (!m_spRemoteAccessApiJobNameLastBuildApiJsonResource) {
        setRemoteAccessApiJobNameLastBuildApiJsonResource(std::make_shared<RemoteAccessApiJobNameLastBuildApiJsonResource>());
    }
    if (!m_spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource) {
        setRemoteAccessApiJobNameNumberLogTextProgressiveTextResource(std::make_shared<RemoteAccessApiJobNameNumberLogTextProgressiveTextResource>());
    }
    if (!m_spRemoteAccessApiQueueApiJsonResource) {
        setRemoteAccessApiQueueApiJsonResource(std::make_shared<RemoteAccessApiQueueApiJsonResource>());
    }
    if (!m_spRemoteAccessApiQueueItemNumberApiJsonResource) {
        setRemoteAccessApiQueueItemNumberApiJsonResource(std::make_shared<RemoteAccessApiQueueItemNumberApiJsonResource>());
    }
    if (!m_spRemoteAccessApiViewNameApiJsonResource) {
        setRemoteAccessApiViewNameApiJsonResource(std::make_shared<RemoteAccessApiViewNameApiJsonResource>());
    }
    if (!m_spRemoteAccessApiViewNameConfig.xmlResource) {
        setRemoteAccessApiViewNameConfig.xmlResource(std::make_shared<RemoteAccessApiViewNameConfig.xmlResource>());
    }
    if (!m_spRemoteAccessApiCreateItemResource) {
        setRemoteAccessApiCreateItemResource(std::make_shared<RemoteAccessApiCreateItemResource>());
    }
    if (!m_spRemoteAccessApiCreateViewResource) {
        setRemoteAccessApiCreateViewResource(std::make_shared<RemoteAccessApiCreateViewResource>());
    }
    if (!m_spRemoteAccessApiJobNameBuildResource) {
        setRemoteAccessApiJobNameBuildResource(std::make_shared<RemoteAccessApiJobNameBuildResource>());
    }
    if (!m_spRemoteAccessApiJobNameDoDeleteResource) {
        setRemoteAccessApiJobNameDoDeleteResource(std::make_shared<RemoteAccessApiJobNameDoDeleteResource>());
    }
    if (!m_spRemoteAccessApiJobNameDisableResource) {
        setRemoteAccessApiJobNameDisableResource(std::make_shared<RemoteAccessApiJobNameDisableResource>());
    }
    if (!m_spRemoteAccessApiJobNameEnableResource) {
        setRemoteAccessApiJobNameEnableResource(std::make_shared<RemoteAccessApiJobNameEnableResource>());
    }
    if (!m_spRemoteAccessApiJobNameLastBuildStopResource) {
        setRemoteAccessApiJobNameLastBuildStopResource(std::make_shared<RemoteAccessApiJobNameLastBuildStopResource>());
    }
}

std::shared_ptr<restbed::Service> RemoteAccessApi::service() {
    return m_service;
}


}
}
}
}

