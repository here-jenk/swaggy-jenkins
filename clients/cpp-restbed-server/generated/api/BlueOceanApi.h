/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BlueOceanApi.h
 *
 * 
 */

#ifndef BlueOceanApi_H_
#define BlueOceanApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "BranchImpl.h"
#include "FavoriteImpl.h"
#include "GithubOrganization.h"
#include "GithubScm.h"
#include "MultibranchPipeline.h"
#include "Object.h"
#include "Organisation.h"
#include "Pipeline.h"
#include "PipelineActivity.h"
#include "PipelineFolderImpl.h"
#include "PipelineImpl.h"
#include "PipelineRun.h"
#include "PipelineRunNode.h"
#include "PipelineStepImpl.h"
#include "QueueItemImpl.h"
#include "UNKNOWN_BASE_TYPE.h"
#include "User.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BlueOceanApiException: public std::exception
{
public:
    BlueOceanApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete queue item from an organization pipeline queue
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & organization, std::string const & pipeline, std::string const & queue);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_queue(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("queue", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve authenticated user details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUserResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationUserResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUserResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<User>> handler_GET(
        std::string const & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get a list of class names supported by a given class
/// </remarks>
class  BlueOceanApiBlueRestClassesClassResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestClassesClassResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestClassesClassResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & r_class);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_r_class(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("r_class", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Key
/// </remarks>
class  BlueOceanApiJwt-authJwksKeyResource: public restbed::Resource
{
public:
    BlueOceanApiJwt-authJwksKeyResource(const std::string& context = "");
    virtual ~BlueOceanApiJwt-authJwksKeyResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t const & key);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int32_t getPathParam_key(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("key", 0);
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Token
/// </remarks>
class  BlueOceanApiJwt-authTokenResource: public restbed::Resource
{
public:
    BlueOceanApiJwt-authTokenResource(const std::string& context = "");
    virtual ~BlueOceanApiJwt-authTokenResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t const & expiryTimeInMins, int32_t const & maxExpiryTimeInMins);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int32_t getQueryParam_expiryTimeInMins(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("expiryTimeInMins", 0);
    }

    virtual int32_t getQueryParam_maxExpiryTimeInMins(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("maxExpiryTimeInMins", 0);
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve organization details
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Organisation>> handler_GET(
        std::string const & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all organizations details
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<Organisation>>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Pipeline>> handler_GET(
        std::string const & organization, std::string const & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all activities details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<PipelineActivity>>> handler_GET(
        std::string const & organization, std::string const & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<BranchImpl>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & branch);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_branch(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("branch", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch run details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineRun>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & branch, std::string const & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_branch(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("branch", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all branches details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<MultibranchPipeline>> handler_GET(
        std::string const & organization, std::string const & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline folder for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineFolderImpl>> handler_GET(
        std::string const & organization, std::string const & folder);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_folder(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("folder", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization folder
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineImpl>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & folder);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_folder(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("folder", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<QueueItemImpl>>> handler_GET(
        std::string const & organization, std::string const & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineRun>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, int32_t const & start, bool const & download);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual int32_t getQueryParam_start(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("start", 0);
    }

    virtual bool getQueryParam_download(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("download", false);
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineRunNode>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual std::string getPathParam_node(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("node", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineStepImpl>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node, std::string const & step);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual std::string getPathParam_node(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("node", "");
    }

    virtual std::string getPathParam_step(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("step", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run node step
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node, std::string const & step);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual std::string getPathParam_node(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("node", "");
    }

    virtual std::string getPathParam_step(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("step", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node steps details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<PipelineStepImpl>>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & node);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual std::string getPathParam_node(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("node", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run nodes details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<PipelineRunNode>>> handler_GET(
        std::string const & organization, std::string const & pipeline, std::string const & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all runs details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<PipelineRun>>> handler_GET(
        std::string const & organization, std::string const & pipeline);

    virtual std::pair<int, std::shared_ptr<QueueItemImpl>> handler_POST(
        std::string const & organization, std::string const & pipeline);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }


    virtual std::string getPathParam_organization_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }
    virtual std::string getPathParam_pipeline_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all pipelines details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<Pipeline>>> handler_GET(
        std::string const & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<GithubScm>> handler_GET(
        std::string const & organization, std::string const & scm);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_scm(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scm", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repositories details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> handler_GET(
        std::string const & organization, std::string const & scm, std::string const & scmOrganisation, std::string const & credentialId, int32_t const & pageSize, int32_t const & pageNumber);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_scm(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scm", "");
    }

    virtual std::string getPathParam_scmOrganisation(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scmOrganisation", "");
    }

    virtual std::string getQueryParam_credentialId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("credentialId", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 0);
    }

    virtual int32_t getQueryParam_pageNumber(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageNumber", 0);
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repository details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> handler_GET(
        std::string const & organization, std::string const & scm, std::string const & scmOrganisation, std::string const & repository, std::string const & credentialId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_scm(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scm", "");
    }

    virtual std::string getPathParam_scmOrganisation(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scmOrganisation", "");
    }

    virtual std::string getPathParam_repository(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("repository", "");
    }

    virtual std::string getQueryParam_credentialId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("credentialId", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organizations details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<GithubOrganization>>> handler_GET(
        std::string const & organization, std::string const & scm, std::string const & credentialId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_scm(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("scm", "");
    }

    virtual std::string getQueryParam_credentialId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("credentialId", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<User>> handler_GET(
        std::string const & organization, std::string const & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_user(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("user", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user favorites details for an organization
/// </remarks>
class  BlueOceanApiBlueRestUsersUserFavoritesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestUsersUserFavoritesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestUsersUserFavoritesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::shared_ptr<FavoriteImpl>>> handler_GET(
        std::string const & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_user(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("user", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve users details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUsersResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationUsersResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUsersResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<User>> handler_GET(
        std::string const & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Replay an organization pipeline run
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<QueueItemImpl>> handler_POST(
        std::string const & organization, std::string const & pipeline, std::string const & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Favorite/unfavorite a pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<FavoriteImpl>> handler_PUT(
        std::string const & organization, std::string const & pipeline, std::shared_ptr<UNKNOWN_BASE_TYPE> const & uNKNOWNBASETYPE);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a build of an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<PipelineRun>> handler_PUT(
        std::string const & organization, std::string const & pipeline, std::string const & run, std::string const & blocking, int32_t const & timeOutInSecs);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_organization(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("organization", "");
    }

    virtual std::string getPathParam_pipeline(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pipeline", "");
    }

    virtual std::string getPathParam_run(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("run", "");
    }

    virtual std::string getQueryParam_blocking(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("blocking", "");
    }

    virtual int32_t getQueryParam_timeOutInSecs(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("timeOutInSecs", 0);
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Search for any resource details
/// </remarks>
class  BlueOceanApiBlueRestSearchResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestSearchResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestSearchResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & q);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_q(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("q", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get classes details
/// </remarks>
class  BlueOceanApiBlueRestClassesResource: public restbed::Resource
{
public:
    BlueOceanApiBlueRestClassesResource(const std::string& context = "");
    virtual ~BlueOceanApiBlueRestClassesResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & q);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_q(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("q", "");
    }



    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  BlueOceanApi
{
public:
    explicit BlueOceanApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~BlueOceanApi();

    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUserResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUserResource);
    virtual void setBlueOceanApiBlueRestClassesClassResource(std::shared_ptr<BlueOceanApiBlueRestClassesClassResource> spBlueOceanApiBlueRestClassesClassResource);
    virtual void setBlueOceanApiJwt-authJwksKeyResource(std::shared_ptr<BlueOceanApiJwt-authJwksKeyResource> spBlueOceanApiJwt-authJwksKeyResource);
    virtual void setBlueOceanApiJwt-authTokenResource(std::shared_ptr<BlueOceanApiJwt-authTokenResource> spBlueOceanApiJwt-authTokenResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationResource> spBlueOceanApiBlueRestOrganizationsOrganizationResource);
    virtual void setBlueOceanApiBlueRestOrganizationsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsResource> spBlueOceanApiBlueRestOrganizationsResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource);
    virtual void setBlueOceanApiBlueRestUsersUserFavoritesResource(std::shared_ptr<BlueOceanApiBlueRestUsersUserFavoritesResource> spBlueOceanApiBlueRestUsersUserFavoritesResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUsersResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
    virtual void setBlueOceanApiBlueRestSearchResource(std::shared_ptr<BlueOceanApiBlueRestSearchResource> spBlueOceanApiBlueRestSearchResource);
    virtual void setBlueOceanApiBlueRestClassesResource(std::shared_ptr<BlueOceanApiBlueRestClassesResource> spBlueOceanApiBlueRestClassesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUserResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationUserResource;
	std::shared_ptr<BlueOceanApiBlueRestClassesClassResource> m_spBlueOceanApiBlueRestClassesClassResource;
	std::shared_ptr<BlueOceanApiJwt-authJwksKeyResource> m_spBlueOceanApiJwt-authJwksKeyResource;
	std::shared_ptr<BlueOceanApiJwt-authTokenResource> m_spBlueOceanApiJwt-authTokenResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsResource> m_spBlueOceanApiBlueRestOrganizationsResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource;
	std::shared_ptr<BlueOceanApiBlueRestUsersUserFavoritesResource> m_spBlueOceanApiBlueRestUsersUserFavoritesResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> m_spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
	std::shared_ptr<BlueOceanApiBlueRestSearchResource> m_spBlueOceanApiBlueRestSearchResource;
	std::shared_ptr<BlueOceanApiBlueRestClassesResource> m_spBlueOceanApiBlueRestClassesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BlueOceanApi_H_ */

