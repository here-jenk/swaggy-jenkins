/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef RemoteAccessApi_H_
#define RemoteAccessApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ComputerSet.h"
#include "FreeStyleBuild.h"
#include "FreeStyleProject.h"
#include "Hudson.h"
#include "ListView.h"
#include "Queue.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  RemoteAccessApiException: public std::exception
{
public:
    RemoteAccessApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve computer details
/// </remarks>
class  RemoteAccessApiComputerApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiComputerApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiComputerApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<ComputerSet>> handler_GET(
        int32_t const & depth);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual int32_t getQueryParam_depth(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("depth", 0);
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve Jenkins details
/// </remarks>
class  RemoteAccessApiApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Hudson>> handler_GET(
        );

    virtual int handler_HEAD(
        );

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_HEAD_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job details
/// </remarks>
class  RemoteAccessApiJobNameApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<FreeStyleProject>> handler_GET(
        std::string const & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job configuration
/// </remarks>
class  RemoteAccessApiJobNameConfig.xmlResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameConfig.xmlResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameConfig.xmlResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & name);

    virtual int handler_POST(
        std::string const & name, std::string const & body, std::string const & jenkinsCrumb);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }


    virtual std::string getPathParam_name_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }
    virtual std::string getHeader_Jenkins-Crumb_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s last build details
/// </remarks>
class  RemoteAccessApiJobNameLastBuildApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameLastBuildApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameLastBuildApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<FreeStyleBuild>> handler_GET(
        std::string const & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s build progressive text output
/// </remarks>
class  RemoteAccessApiJobNameNumberLogTextProgressiveTextResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameNumberLogTextProgressiveTextResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameNumberLogTextProgressiveTextResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_GET(
        std::string const & name, std::string const & number, std::string const & start);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getPathParam_number(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("number", "");
    }

    virtual std::string getQueryParam_start(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("start", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details
/// </remarks>
class  RemoteAccessApiQueueApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiQueueApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiQueueApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Queue>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queued item details
/// </remarks>
class  RemoteAccessApiQueueItemNumberApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiQueueItemNumberApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiQueueItemNumberApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Queue>> handler_GET(
        std::string const & number);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_number(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("number", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view details
/// </remarks>
class  RemoteAccessApiViewNameApiJsonResource: public restbed::Resource
{
public:
    RemoteAccessApiViewNameApiJsonResource(const std::string& context = "");
    virtual ~RemoteAccessApiViewNameApiJsonResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<ListView>> handler_GET(
        std::string const & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view configuration
/// </remarks>
class  RemoteAccessApiViewNameConfig.xmlResource: public restbed::Resource
{
public:
    RemoteAccessApiViewNameConfig.xmlResource(const std::string& context = "");
    virtual ~RemoteAccessApiViewNameConfig.xmlResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string const & name);

    virtual int handler_POST(
        std::string const & name, std::string const & body, std::string const & jenkinsCrumb);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }


    virtual std::string getPathParam_name_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }
    virtual std::string getHeader_Jenkins-Crumb_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new job using job configuration, or copied from an existing job
/// </remarks>
class  RemoteAccessApiCreateItemResource: public restbed::Resource
{
public:
    RemoteAccessApiCreateItemResource(const std::string& context = "");
    virtual ~RemoteAccessApiCreateItemResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & from, std::string const & mode, std::string const & jenkinsCrumb, std::string const & contentType, std::string const & body);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("name", "");
    }

    virtual std::string getQueryParam_from(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("from", "");
    }

    virtual std::string getQueryParam_mode(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("mode", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }

    virtual std::string getHeader_Content-Type(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Content-Type", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new view using view configuration
/// </remarks>
class  RemoteAccessApiCreateViewResource: public restbed::Resource
{
public:
    RemoteAccessApiCreateViewResource(const std::string& context = "");
    virtual ~RemoteAccessApiCreateViewResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & jenkinsCrumb, std::string const & contentType, std::string const & body);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("name", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }

    virtual std::string getHeader_Content-Type(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Content-Type", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Build a job
/// </remarks>
class  RemoteAccessApiJobNameBuildResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameBuildResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameBuildResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & json, std::string const & token, std::string const & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getQueryParam_json(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("json", "");
    }

    virtual std::string getQueryParam_token(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("token", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete a job
/// </remarks>
class  RemoteAccessApiJobNameDoDeleteResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameDoDeleteResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameDoDeleteResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Disable a job
/// </remarks>
class  RemoteAccessApiJobNameDisableResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameDisableResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameDisableResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Enable a job
/// </remarks>
class  RemoteAccessApiJobNameEnableResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameEnableResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameEnableResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a job
/// </remarks>
class  RemoteAccessApiJobNameLastBuildStopResource: public restbed::Resource
{
public:
    RemoteAccessApiJobNameLastBuildStopResource(const std::string& context = "");
    virtual ~RemoteAccessApiJobNameLastBuildStopResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string const & name, std::string const & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_name(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("name", "");
    }

    virtual std::string getHeader_Jenkins-Crumb(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_header("Jenkins-Crumb", "");
    }



    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  RemoteAccessApi
{
public:
    explicit RemoteAccessApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~RemoteAccessApi();

    virtual void setRemoteAccessApiComputerApiJsonResource(std::shared_ptr<RemoteAccessApiComputerApiJsonResource> spRemoteAccessApiComputerApiJsonResource);
    virtual void setRemoteAccessApiApiJsonResource(std::shared_ptr<RemoteAccessApiApiJsonResource> spRemoteAccessApiApiJsonResource);
    virtual void setRemoteAccessApiJobNameApiJsonResource(std::shared_ptr<RemoteAccessApiJobNameApiJsonResource> spRemoteAccessApiJobNameApiJsonResource);
    virtual void setRemoteAccessApiJobNameConfig.xmlResource(std::shared_ptr<RemoteAccessApiJobNameConfig.xmlResource> spRemoteAccessApiJobNameConfig.xmlResource);
    virtual void setRemoteAccessApiJobNameLastBuildApiJsonResource(std::shared_ptr<RemoteAccessApiJobNameLastBuildApiJsonResource> spRemoteAccessApiJobNameLastBuildApiJsonResource);
    virtual void setRemoteAccessApiJobNameNumberLogTextProgressiveTextResource(std::shared_ptr<RemoteAccessApiJobNameNumberLogTextProgressiveTextResource> spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource);
    virtual void setRemoteAccessApiQueueApiJsonResource(std::shared_ptr<RemoteAccessApiQueueApiJsonResource> spRemoteAccessApiQueueApiJsonResource);
    virtual void setRemoteAccessApiQueueItemNumberApiJsonResource(std::shared_ptr<RemoteAccessApiQueueItemNumberApiJsonResource> spRemoteAccessApiQueueItemNumberApiJsonResource);
    virtual void setRemoteAccessApiViewNameApiJsonResource(std::shared_ptr<RemoteAccessApiViewNameApiJsonResource> spRemoteAccessApiViewNameApiJsonResource);
    virtual void setRemoteAccessApiViewNameConfig.xmlResource(std::shared_ptr<RemoteAccessApiViewNameConfig.xmlResource> spRemoteAccessApiViewNameConfig.xmlResource);
    virtual void setRemoteAccessApiCreateItemResource(std::shared_ptr<RemoteAccessApiCreateItemResource> spRemoteAccessApiCreateItemResource);
    virtual void setRemoteAccessApiCreateViewResource(std::shared_ptr<RemoteAccessApiCreateViewResource> spRemoteAccessApiCreateViewResource);
    virtual void setRemoteAccessApiJobNameBuildResource(std::shared_ptr<RemoteAccessApiJobNameBuildResource> spRemoteAccessApiJobNameBuildResource);
    virtual void setRemoteAccessApiJobNameDoDeleteResource(std::shared_ptr<RemoteAccessApiJobNameDoDeleteResource> spRemoteAccessApiJobNameDoDeleteResource);
    virtual void setRemoteAccessApiJobNameDisableResource(std::shared_ptr<RemoteAccessApiJobNameDisableResource> spRemoteAccessApiJobNameDisableResource);
    virtual void setRemoteAccessApiJobNameEnableResource(std::shared_ptr<RemoteAccessApiJobNameEnableResource> spRemoteAccessApiJobNameEnableResource);
    virtual void setRemoteAccessApiJobNameLastBuildStopResource(std::shared_ptr<RemoteAccessApiJobNameLastBuildStopResource> spRemoteAccessApiJobNameLastBuildStopResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<RemoteAccessApiComputerApiJsonResource> m_spRemoteAccessApiComputerApiJsonResource;
	std::shared_ptr<RemoteAccessApiApiJsonResource> m_spRemoteAccessApiApiJsonResource;
	std::shared_ptr<RemoteAccessApiJobNameApiJsonResource> m_spRemoteAccessApiJobNameApiJsonResource;
	std::shared_ptr<RemoteAccessApiJobNameConfig.xmlResource> m_spRemoteAccessApiJobNameConfig.xmlResource;
	std::shared_ptr<RemoteAccessApiJobNameLastBuildApiJsonResource> m_spRemoteAccessApiJobNameLastBuildApiJsonResource;
	std::shared_ptr<RemoteAccessApiJobNameNumberLogTextProgressiveTextResource> m_spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource;
	std::shared_ptr<RemoteAccessApiQueueApiJsonResource> m_spRemoteAccessApiQueueApiJsonResource;
	std::shared_ptr<RemoteAccessApiQueueItemNumberApiJsonResource> m_spRemoteAccessApiQueueItemNumberApiJsonResource;
	std::shared_ptr<RemoteAccessApiViewNameApiJsonResource> m_spRemoteAccessApiViewNameApiJsonResource;
	std::shared_ptr<RemoteAccessApiViewNameConfig.xmlResource> m_spRemoteAccessApiViewNameConfig.xmlResource;
	std::shared_ptr<RemoteAccessApiCreateItemResource> m_spRemoteAccessApiCreateItemResource;
	std::shared_ptr<RemoteAccessApiCreateViewResource> m_spRemoteAccessApiCreateViewResource;
	std::shared_ptr<RemoteAccessApiJobNameBuildResource> m_spRemoteAccessApiJobNameBuildResource;
	std::shared_ptr<RemoteAccessApiJobNameDoDeleteResource> m_spRemoteAccessApiJobNameDoDeleteResource;
	std::shared_ptr<RemoteAccessApiJobNameDisableResource> m_spRemoteAccessApiJobNameDisableResource;
	std::shared_ptr<RemoteAccessApiJobNameEnableResource> m_spRemoteAccessApiJobNameEnableResource;
	std::shared_ptr<RemoteAccessApiJobNameLastBuildStopResource> m_spRemoteAccessApiJobNameLastBuildStopResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* RemoteAccessApi_H_ */

