# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /api                        controllers.ApiDocController.api


#Functions for Base API
GET     /crumbIssuer/api/json                     controllers.BaseApiController.getCrumb(request: Request)

#Functions for BlueOcean API
DELETE     /blue/rest/organizations/:organization/pipelines/:pipeline/queue/:queue                     controllers.BlueOceanApiController.deletePipelineQueueItem(request: Request, organization: String, pipeline: String, queue: String)
GET     /blue/rest/organizations/:organization/user/                     controllers.BlueOceanApiController.getAuthenticatedUser(request: Request, organization: String)
GET     /blue/rest/classes/:class                     controllers.BlueOceanApiController.getClasses(request: Request, propertyClass: String)
GET     /jwt-auth/jwks/:key                     controllers.BlueOceanApiController.getJsonWebKey(request: Request, key: Integer)
GET     /jwt-auth/token                     controllers.BlueOceanApiController.getJsonWebToken(request: Request)
GET     /blue/rest/organizations/:organization                     controllers.BlueOceanApiController.getOrganisation(request: Request, organization: String)
GET     /blue/rest/organizations/                     controllers.BlueOceanApiController.getOrganisations(request: Request)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline                     controllers.BlueOceanApiController.getPipeline(request: Request, organization: String, pipeline: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/activities                     controllers.BlueOceanApiController.getPipelineActivities(request: Request, organization: String, pipeline: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/                     controllers.BlueOceanApiController.getPipelineBranch(request: Request, organization: String, pipeline: String, branch: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/runs/:run                     controllers.BlueOceanApiController.getPipelineBranchRun(request: Request, organization: String, pipeline: String, branch: String, run: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/branches                     controllers.BlueOceanApiController.getPipelineBranches(request: Request, organization: String, pipeline: String)
GET     /blue/rest/organizations/:organization/pipelines/:folder/                     controllers.BlueOceanApiController.getPipelineFolder(request: Request, organization: String, folder: String)
GET     /blue/rest/organizations/:organization/pipelines/:folder/pipelines/:pipeline                     controllers.BlueOceanApiController.getPipelineFolderPipeline(request: Request, organization: String, pipeline: String, folder: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/queue                     controllers.BlueOceanApiController.getPipelineQueue(request: Request, organization: String, pipeline: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run                     controllers.BlueOceanApiController.getPipelineRun(request: Request, organization: String, pipeline: String, run: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/log                     controllers.BlueOceanApiController.getPipelineRunLog(request: Request, organization: String, pipeline: String, run: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node                     controllers.BlueOceanApiController.getPipelineRunNode(request: Request, organization: String, pipeline: String, run: String, node: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step                     controllers.BlueOceanApiController.getPipelineRunNodeStep(request: Request, organization: String, pipeline: String, run: String, node: String, step: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step/log                     controllers.BlueOceanApiController.getPipelineRunNodeStepLog(request: Request, organization: String, pipeline: String, run: String, node: String, step: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps                     controllers.BlueOceanApiController.getPipelineRunNodeSteps(request: Request, organization: String, pipeline: String, run: String, node: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes                     controllers.BlueOceanApiController.getPipelineRunNodes(request: Request, organization: String, pipeline: String, run: String)
GET     /blue/rest/organizations/:organization/pipelines/:pipeline/runs                     controllers.BlueOceanApiController.getPipelineRuns(request: Request, organization: String, pipeline: String)
GET     /blue/rest/organizations/:organization/pipelines/                     controllers.BlueOceanApiController.getPipelines(request: Request, organization: String)
GET     /blue/rest/organizations/:organization/scm/:scm                     controllers.BlueOceanApiController.getSCM(request: Request, organization: String, scm: String)
GET     /blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories                     controllers.BlueOceanApiController.getSCMOrganisationRepositories(request: Request, organization: String, scm: String, scmOrganisation: String)
GET     /blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories/:repository                     controllers.BlueOceanApiController.getSCMOrganisationRepository(request: Request, organization: String, scm: String, scmOrganisation: String, repository: String)
GET     /blue/rest/organizations/:organization/scm/:scm/organizations                     controllers.BlueOceanApiController.getSCMOrganisations(request: Request, organization: String, scm: String)
GET     /blue/rest/organizations/:organization/users/:user                     controllers.BlueOceanApiController.getUser(request: Request, organization: String, user: String)
GET     /blue/rest/users/:user/favorites                     controllers.BlueOceanApiController.getUserFavorites(request: Request, user: String)
GET     /blue/rest/organizations/:organization/users/                     controllers.BlueOceanApiController.getUsers(request: Request, organization: String)
POST     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/replay                     controllers.BlueOceanApiController.postPipelineRun(request: Request, organization: String, pipeline: String, run: String)
POST     /blue/rest/organizations/:organization/pipelines/:pipeline/runs                     controllers.BlueOceanApiController.postPipelineRuns(request: Request, organization: String, pipeline: String)
PUT     /blue/rest/organizations/:organization/pipelines/:pipeline/favorite                     controllers.BlueOceanApiController.putPipelineFavorite(request: Request, organization: String, pipeline: String)
PUT     /blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/stop                     controllers.BlueOceanApiController.putPipelineRun(request: Request, organization: String, pipeline: String, run: String)
GET     /blue/rest/search/                     controllers.BlueOceanApiController.search(request: Request)
GET     /blue/rest/classes/                     controllers.BlueOceanApiController.searchClasses(request: Request)

#Functions for RemoteAccess API
GET     /computer/api/json                     controllers.RemoteAccessApiController.getComputer(request: Request)
GET     /api/json                     controllers.RemoteAccessApiController.getJenkins(request: Request)
GET     /job/:name/api/json                     controllers.RemoteAccessApiController.getJob(request: Request, name: String)
GET     /job/:name/config.xml                     controllers.RemoteAccessApiController.getJobConfig(request: Request, name: String)
GET     /job/:name/lastBuild/api/json                     controllers.RemoteAccessApiController.getJobLastBuild(request: Request, name: String)
GET     /job/:name/:number/logText/progressiveText                     controllers.RemoteAccessApiController.getJobProgressiveText(request: Request, name: String, number: String)
GET     /queue/api/json                     controllers.RemoteAccessApiController.getQueue(request: Request)
GET     /queue/item/:number/api/json                     controllers.RemoteAccessApiController.getQueueItem(request: Request, number: String)
GET     /view/:name/api/json                     controllers.RemoteAccessApiController.getView(request: Request, name: String)
GET     /view/:name/config.xml                     controllers.RemoteAccessApiController.getViewConfig(request: Request, name: String)
HEAD     /api/json                     controllers.RemoteAccessApiController.headJenkins(request: Request)
POST     /createItem                     controllers.RemoteAccessApiController.postCreateItem(request: Request)
POST     /createView                     controllers.RemoteAccessApiController.postCreateView(request: Request)
POST     /job/:name/build                     controllers.RemoteAccessApiController.postJobBuild(request: Request, name: String)
POST     /job/:name/config.xml                     controllers.RemoteAccessApiController.postJobConfig(request: Request, name: String)
POST     /job/:name/doDelete                     controllers.RemoteAccessApiController.postJobDelete(request: Request, name: String)
POST     /job/:name/disable                     controllers.RemoteAccessApiController.postJobDisable(request: Request, name: String)
POST     /job/:name/enable                     controllers.RemoteAccessApiController.postJobEnable(request: Request, name: String)
POST     /job/:name/lastBuild/stop                     controllers.RemoteAccessApiController.postJobLastBuildStop(request: Request, name: String)
POST     /view/:name/config.xml                     controllers.RemoteAccessApiController.postViewConfig(request: Request, name: String)

# Map static resources from the /public folder to the /assets URL path
GET /assets/*file           controllers.Assets.at(file)
GET /versionedAssets/*file  controllers.Assets.versioned(file)