/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleBuild.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




FreeStyleBuild::FreeStyleBuild()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_number = 0;
    m_numberIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ActionsIsSet = false;
    m_Building = false;
    m_BuildingIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_EstimatedDuration = 0;
    m_EstimatedDurationIsSet = false;
    m_Executor = utility::conversions::to_string_t("");
    m_ExecutorIsSet = false;
    m_FullDisplayName = utility::conversions::to_string_t("");
    m_FullDisplayNameIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_KeepLog = false;
    m_KeepLogIsSet = false;
    m_QueueId = 0;
    m_QueueIdIsSet = false;
    m_Result = utility::conversions::to_string_t("");
    m_ResultIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_BuiltOn = utility::conversions::to_string_t("");
    m_BuiltOnIsSet = false;
    m_ChangeSetIsSet = false;
}

FreeStyleBuild::~FreeStyleBuild()
{
}

void FreeStyleBuild::validate()
{
    // TODO: implement validation
}

web::json::value FreeStyleBuild::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("number"))] = ModelBase::toJson(m_number);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ActionsIsSet)
    {
        val[utility::conversions::to_string_t(U("actions"))] = ModelBase::toJson(m_Actions);
    }
    if(m_BuildingIsSet)
    {
        val[utility::conversions::to_string_t(U("building"))] = ModelBase::toJson(m_Building);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_DurationIsSet)
    {
        val[utility::conversions::to_string_t(U("duration"))] = ModelBase::toJson(m_Duration);
    }
    if(m_EstimatedDurationIsSet)
    {
        val[utility::conversions::to_string_t(U("estimatedDuration"))] = ModelBase::toJson(m_EstimatedDuration);
    }
    if(m_ExecutorIsSet)
    {
        val[utility::conversions::to_string_t(U("executor"))] = ModelBase::toJson(m_Executor);
    }
    if(m_FullDisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullDisplayName"))] = ModelBase::toJson(m_FullDisplayName);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_KeepLogIsSet)
    {
        val[utility::conversions::to_string_t(U("keepLog"))] = ModelBase::toJson(m_KeepLog);
    }
    if(m_QueueIdIsSet)
    {
        val[utility::conversions::to_string_t(U("queueId"))] = ModelBase::toJson(m_QueueId);
    }
    if(m_ResultIsSet)
    {
        val[utility::conversions::to_string_t(U("result"))] = ModelBase::toJson(m_Result);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_BuiltOnIsSet)
    {
        val[utility::conversions::to_string_t(U("builtOn"))] = ModelBase::toJson(m_BuiltOn);
    }
    if(m_ChangeSetIsSet)
    {
        val[utility::conversions::to_string_t(U("changeSet"))] = ModelBase::toJson(m_ChangeSet);
    }

    return val;
}

bool FreeStyleBuild::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_number;
            ok &= ModelBase::fromJson(fieldValue, refVal_number);
            setNumber(refVal_number);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("actions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("actions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CauseAction>> refVal_actions;
            ok &= ModelBase::fromJson(fieldValue, refVal_actions);
            setActions(refVal_actions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("building"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("building")));
        if(!fieldValue.is_null())
        {
            bool refVal_building;
            ok &= ModelBase::fromJson(fieldValue, refVal_building);
            setBuilding(refVal_building);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duration")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_duration;
            ok &= ModelBase::fromJson(fieldValue, refVal_duration);
            setDuration(refVal_duration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimatedDuration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimatedDuration")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_estimatedDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_estimatedDuration);
            setEstimatedDuration(refVal_estimatedDuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_executor;
            ok &= ModelBase::fromJson(fieldValue, refVal_executor);
            setExecutor(refVal_executor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullDisplayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullDisplayName);
            setFullDisplayName(refVal_fullDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keepLog"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keepLog")));
        if(!fieldValue.is_null())
        {
            bool refVal_keepLog;
            ok &= ModelBase::fromJson(fieldValue, refVal_keepLog);
            setKeepLog(refVal_keepLog);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("queueId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("queueId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_queueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_queueId);
            setQueueId(refVal_queueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("result"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("result")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_result;
            ok &= ModelBase::fromJson(fieldValue, refVal_result);
            setResult(refVal_result);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("builtOn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("builtOn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_builtOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_builtOn);
            setBuiltOn(refVal_builtOn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("changeSet"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("changeSet")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmptyChangeLogSet> refVal_changeSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_changeSet);
            setChangeSet(refVal_changeSet);
        }
    }
    return ok;
}

void FreeStyleBuild::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number")), m_number));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ActionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("actions")), m_Actions));
    }
    if(m_BuildingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("building")), m_Building));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duration")), m_Duration));
    }
    if(m_EstimatedDurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimatedDuration")), m_EstimatedDuration));
    }
    if(m_ExecutorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executor")), m_Executor));
    }
    if(m_FullDisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullDisplayName")), m_FullDisplayName));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_KeepLogIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keepLog")), m_KeepLog));
    }
    if(m_QueueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("queueId")), m_QueueId));
    }
    if(m_ResultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("result")), m_Result));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_BuiltOnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("builtOn")), m_BuiltOn));
    }
    if(m_ChangeSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("changeSet")), m_ChangeSet));
    }
}

bool FreeStyleBuild::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number"))))
    {
        int32_t refVal_number;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number"))), refVal_number );
        setNumber(refVal_number);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("actions"))))
    {
        std::vector<std::shared_ptr<CauseAction>> refVal_actions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("actions"))), refVal_actions );
        setActions(refVal_actions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("building"))))
    {
        bool refVal_building;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("building"))), refVal_building );
        setBuilding(refVal_building);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duration"))))
    {
        int32_t refVal_duration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duration"))), refVal_duration );
        setDuration(refVal_duration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimatedDuration"))))
    {
        int32_t refVal_estimatedDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimatedDuration"))), refVal_estimatedDuration );
        setEstimatedDuration(refVal_estimatedDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executor"))))
    {
        utility::string_t refVal_executor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executor"))), refVal_executor );
        setExecutor(refVal_executor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        utility::string_t refVal_fullDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullDisplayName"))), refVal_fullDisplayName );
        setFullDisplayName(refVal_fullDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keepLog"))))
    {
        bool refVal_keepLog;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keepLog"))), refVal_keepLog );
        setKeepLog(refVal_keepLog);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("queueId"))))
    {
        int32_t refVal_queueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("queueId"))), refVal_queueId );
        setQueueId(refVal_queueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("result"))))
    {
        utility::string_t refVal_result;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("result"))), refVal_result );
        setResult(refVal_result);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        int32_t refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("builtOn"))))
    {
        utility::string_t refVal_builtOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("builtOn"))), refVal_builtOn );
        setBuiltOn(refVal_builtOn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("changeSet"))))
    {
        std::shared_ptr<EmptyChangeLogSet> refVal_changeSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("changeSet"))), refVal_changeSet );
        setChangeSet(refVal_changeSet);
    }
    return ok;
}

utility::string_t FreeStyleBuild::getClass() const
{
    return m__class;
}

void FreeStyleBuild::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool FreeStyleBuild::r_classIsSet() const
{
    return m__classIsSet;
}

void FreeStyleBuild::unset_class()
{
    m__classIsSet = false;
}
int32_t FreeStyleBuild::getNumber() const
{
    return m_number;
}

void FreeStyleBuild::setNumber(int32_t value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool FreeStyleBuild::numberIsSet() const
{
    return m_numberIsSet;
}

void FreeStyleBuild::unsetnumber()
{
    m_numberIsSet = false;
}
utility::string_t FreeStyleBuild::getUrl() const
{
    return m_Url;
}

void FreeStyleBuild::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool FreeStyleBuild::urlIsSet() const
{
    return m_UrlIsSet;
}

void FreeStyleBuild::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<std::shared_ptr<CauseAction>>& FreeStyleBuild::getActions()
{
    return m_Actions;
}

void FreeStyleBuild::setActions(const std::vector<std::shared_ptr<CauseAction>>& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}

bool FreeStyleBuild::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void FreeStyleBuild::unsetActions()
{
    m_ActionsIsSet = false;
}
bool FreeStyleBuild::isBuilding() const
{
    return m_Building;
}

void FreeStyleBuild::setBuilding(bool value)
{
    m_Building = value;
    m_BuildingIsSet = true;
}

bool FreeStyleBuild::buildingIsSet() const
{
    return m_BuildingIsSet;
}

void FreeStyleBuild::unsetBuilding()
{
    m_BuildingIsSet = false;
}
utility::string_t FreeStyleBuild::getDescription() const
{
    return m_Description;
}

void FreeStyleBuild::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool FreeStyleBuild::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FreeStyleBuild::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t FreeStyleBuild::getDisplayName() const
{
    return m_DisplayName;
}

void FreeStyleBuild::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool FreeStyleBuild::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void FreeStyleBuild::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t FreeStyleBuild::getDuration() const
{
    return m_Duration;
}

void FreeStyleBuild::setDuration(int32_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool FreeStyleBuild::durationIsSet() const
{
    return m_DurationIsSet;
}

void FreeStyleBuild::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t FreeStyleBuild::getEstimatedDuration() const
{
    return m_EstimatedDuration;
}

void FreeStyleBuild::setEstimatedDuration(int32_t value)
{
    m_EstimatedDuration = value;
    m_EstimatedDurationIsSet = true;
}

bool FreeStyleBuild::estimatedDurationIsSet() const
{
    return m_EstimatedDurationIsSet;
}

void FreeStyleBuild::unsetEstimatedDuration()
{
    m_EstimatedDurationIsSet = false;
}
utility::string_t FreeStyleBuild::getExecutor() const
{
    return m_Executor;
}

void FreeStyleBuild::setExecutor(const utility::string_t& value)
{
    m_Executor = value;
    m_ExecutorIsSet = true;
}

bool FreeStyleBuild::executorIsSet() const
{
    return m_ExecutorIsSet;
}

void FreeStyleBuild::unsetExecutor()
{
    m_ExecutorIsSet = false;
}
utility::string_t FreeStyleBuild::getFullDisplayName() const
{
    return m_FullDisplayName;
}

void FreeStyleBuild::setFullDisplayName(const utility::string_t& value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}

bool FreeStyleBuild::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}

void FreeStyleBuild::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}
utility::string_t FreeStyleBuild::getId() const
{
    return m_Id;
}

void FreeStyleBuild::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FreeStyleBuild::idIsSet() const
{
    return m_IdIsSet;
}

void FreeStyleBuild::unsetId()
{
    m_IdIsSet = false;
}
bool FreeStyleBuild::isKeepLog() const
{
    return m_KeepLog;
}

void FreeStyleBuild::setKeepLog(bool value)
{
    m_KeepLog = value;
    m_KeepLogIsSet = true;
}

bool FreeStyleBuild::keepLogIsSet() const
{
    return m_KeepLogIsSet;
}

void FreeStyleBuild::unsetKeepLog()
{
    m_KeepLogIsSet = false;
}
int32_t FreeStyleBuild::getQueueId() const
{
    return m_QueueId;
}

void FreeStyleBuild::setQueueId(int32_t value)
{
    m_QueueId = value;
    m_QueueIdIsSet = true;
}

bool FreeStyleBuild::queueIdIsSet() const
{
    return m_QueueIdIsSet;
}

void FreeStyleBuild::unsetQueueId()
{
    m_QueueIdIsSet = false;
}
utility::string_t FreeStyleBuild::getResult() const
{
    return m_Result;
}

void FreeStyleBuild::setResult(const utility::string_t& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}

bool FreeStyleBuild::resultIsSet() const
{
    return m_ResultIsSet;
}

void FreeStyleBuild::unsetResult()
{
    m_ResultIsSet = false;
}
int32_t FreeStyleBuild::getTimestamp() const
{
    return m_Timestamp;
}

void FreeStyleBuild::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool FreeStyleBuild::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void FreeStyleBuild::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t FreeStyleBuild::getBuiltOn() const
{
    return m_BuiltOn;
}

void FreeStyleBuild::setBuiltOn(const utility::string_t& value)
{
    m_BuiltOn = value;
    m_BuiltOnIsSet = true;
}

bool FreeStyleBuild::builtOnIsSet() const
{
    return m_BuiltOnIsSet;
}

void FreeStyleBuild::unsetBuiltOn()
{
    m_BuiltOnIsSet = false;
}
std::shared_ptr<EmptyChangeLogSet> FreeStyleBuild::getChangeSet() const
{
    return m_ChangeSet;
}

void FreeStyleBuild::setChangeSet(const std::shared_ptr<EmptyChangeLogSet>& value)
{
    m_ChangeSet = value;
    m_ChangeSetIsSet = true;
}

bool FreeStyleBuild::changeSetIsSet() const
{
    return m_ChangeSetIsSet;
}

void FreeStyleBuild::unsetChangeSet()
{
    m_ChangeSetIsSet = false;
}
}
}
}
}


