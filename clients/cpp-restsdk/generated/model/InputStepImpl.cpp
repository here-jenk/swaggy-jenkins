/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InputStepImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




InputStepImpl::InputStepImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Ok = utility::conversions::to_string_t("");
    m_OkIsSet = false;
    m_ParametersIsSet = false;
    m_Submitter = utility::conversions::to_string_t("");
    m_SubmitterIsSet = false;
}

InputStepImpl::~InputStepImpl()
{
}

void InputStepImpl::validate()
{
    // TODO: implement validation
}

web::json::value InputStepImpl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_OkIsSet)
    {
        val[utility::conversions::to_string_t(U("ok"))] = ModelBase::toJson(m_Ok);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t(U("parameters"))] = ModelBase::toJson(m_Parameters);
    }
    if(m_SubmitterIsSet)
    {
        val[utility::conversions::to_string_t(U("submitter"))] = ModelBase::toJson(m_Submitter);
    }

    return val;
}

bool InputStepImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<InputStepImpllinks> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ok"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ok")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ok;
            ok &= ModelBase::fromJson(fieldValue, refVal_ok);
            setOk(refVal_ok);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parameters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StringParameterDefinition>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submitter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submitter")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_submitter;
            ok &= ModelBase::fromJson(fieldValue, refVal_submitter);
            setSubmitter(refVal_submitter);
        }
    }
    return ok;
}

void InputStepImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_OkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ok")), m_Ok));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parameters")), m_Parameters));
    }
    if(m_SubmitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submitter")), m_Submitter));
    }
}

bool InputStepImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<InputStepImpllinks> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal__links );
        setLinks(refVal__links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ok"))))
    {
        utility::string_t refVal_ok;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ok"))), refVal_ok );
        setOk(refVal_ok);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parameters"))))
    {
        std::vector<std::shared_ptr<StringParameterDefinition>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parameters"))), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submitter"))))
    {
        utility::string_t refVal_submitter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submitter"))), refVal_submitter );
        setSubmitter(refVal_submitter);
    }
    return ok;
}

utility::string_t InputStepImpl::getClass() const
{
    return m__class;
}

void InputStepImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool InputStepImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void InputStepImpl::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<InputStepImpllinks> InputStepImpl::getLinks() const
{
    return m__links;
}

void InputStepImpl::setLinks(const std::shared_ptr<InputStepImpllinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool InputStepImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void InputStepImpl::unset_links()
{
    m__linksIsSet = false;
}
utility::string_t InputStepImpl::getId() const
{
    return m_Id;
}

void InputStepImpl::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool InputStepImpl::idIsSet() const
{
    return m_IdIsSet;
}

void InputStepImpl::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t InputStepImpl::getMessage() const
{
    return m_Message;
}

void InputStepImpl::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool InputStepImpl::messageIsSet() const
{
    return m_MessageIsSet;
}

void InputStepImpl::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t InputStepImpl::getOk() const
{
    return m_Ok;
}

void InputStepImpl::setOk(const utility::string_t& value)
{
    m_Ok = value;
    m_OkIsSet = true;
}

bool InputStepImpl::okIsSet() const
{
    return m_OkIsSet;
}

void InputStepImpl::unsetOk()
{
    m_OkIsSet = false;
}
std::vector<std::shared_ptr<StringParameterDefinition>>& InputStepImpl::getParameters()
{
    return m_Parameters;
}

void InputStepImpl::setParameters(const std::vector<std::shared_ptr<StringParameterDefinition>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool InputStepImpl::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void InputStepImpl::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::string_t InputStepImpl::getSubmitter() const
{
    return m_Submitter;
}

void InputStepImpl::setSubmitter(const utility::string_t& value)
{
    m_Submitter = value;
    m_SubmitterIsSet = true;
}

bool InputStepImpl::submitterIsSet() const
{
    return m_SubmitterIsSet;
}

void InputStepImpl::unsetSubmitter()
{
    m_SubmitterIsSet = false;
}
}
}
}
}


