/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BranchImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BranchImpl::BranchImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_FullDisplayName = utility::conversions::to_string_t("");
    m_FullDisplayNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Organization = utility::conversions::to_string_t("");
    m_OrganizationIsSet = false;
    m_ParametersIsSet = false;
    m_PermissionsIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_PullRequest = utility::conversions::to_string_t("");
    m_PullRequestIsSet = false;
    m__linksIsSet = false;
    m_LatestRunIsSet = false;
}

BranchImpl::~BranchImpl()
{
}

void BranchImpl::validate()
{
    // TODO: implement validation
}

web::json::value BranchImpl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val[utility::conversions::to_string_t(U("estimatedDurationInMillis"))] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_FullDisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullDisplayName"))] = ModelBase::toJson(m_FullDisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t(U("parameters"))] = ModelBase::toJson(m_Parameters);
    }
    if(m_PermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("permissions"))] = ModelBase::toJson(m_Permissions);
    }
    if(m_WeatherScoreIsSet)
    {
        val[utility::conversions::to_string_t(U("weatherScore"))] = ModelBase::toJson(m_WeatherScore);
    }
    if(m_PullRequestIsSet)
    {
        val[utility::conversions::to_string_t(U("pullRequest"))] = ModelBase::toJson(m_PullRequest);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_LatestRunIsSet)
    {
        val[utility::conversions::to_string_t(U("latestRun"))] = ModelBase::toJson(m_LatestRun);
    }

    return val;
}

bool BranchImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimatedDurationInMillis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimatedDurationInMillis")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_estimatedDurationInMillis;
            ok &= ModelBase::fromJson(fieldValue, refVal_estimatedDurationInMillis);
            setEstimatedDurationInMillis(refVal_estimatedDurationInMillis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullDisplayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullDisplayName);
            setFullDisplayName(refVal_fullDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullName);
            setFullName(refVal_fullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parameters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StringParameterDefinition>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("permissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("permissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BranchImplpermissions> refVal_permissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_permissions);
            setPermissions(refVal_permissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weatherScore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weatherScore")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_weatherScore;
            ok &= ModelBase::fromJson(fieldValue, refVal_weatherScore);
            setWeatherScore(refVal_weatherScore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pullRequest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pullRequest")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pullRequest;
            ok &= ModelBase::fromJson(fieldValue, refVal_pullRequest);
            setPullRequest(refVal_pullRequest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BranchImpllinks> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latestRun"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latestRun")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineRunImpl> refVal_latestRun;
            ok &= ModelBase::fromJson(fieldValue, refVal_latestRun);
            setLatestRun(refVal_latestRun);
        }
    }
    return ok;
}

void BranchImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimatedDurationInMillis")), m_EstimatedDurationInMillis));
    }
    if(m_FullDisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullDisplayName")), m_FullDisplayName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parameters")), m_Parameters));
    }
    if(m_PermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("permissions")), m_Permissions));
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weatherScore")), m_WeatherScore));
    }
    if(m_PullRequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pullRequest")), m_PullRequest));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_LatestRunIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latestRun")), m_LatestRun));
    }
}

bool BranchImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimatedDurationInMillis"))))
    {
        int32_t refVal_estimatedDurationInMillis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimatedDurationInMillis"))), refVal_estimatedDurationInMillis );
        setEstimatedDurationInMillis(refVal_estimatedDurationInMillis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        utility::string_t refVal_fullDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullDisplayName"))), refVal_fullDisplayName );
        setFullDisplayName(refVal_fullDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_fullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_fullName );
        setFullName(refVal_fullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        utility::string_t refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parameters"))))
    {
        std::vector<std::shared_ptr<StringParameterDefinition>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parameters"))), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("permissions"))))
    {
        std::shared_ptr<BranchImplpermissions> refVal_permissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("permissions"))), refVal_permissions );
        setPermissions(refVal_permissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weatherScore"))))
    {
        int32_t refVal_weatherScore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weatherScore"))), refVal_weatherScore );
        setWeatherScore(refVal_weatherScore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pullRequest"))))
    {
        utility::string_t refVal_pullRequest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pullRequest"))), refVal_pullRequest );
        setPullRequest(refVal_pullRequest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<BranchImpllinks> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal__links );
        setLinks(refVal__links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latestRun"))))
    {
        std::shared_ptr<PipelineRunImpl> refVal_latestRun;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latestRun"))), refVal_latestRun );
        setLatestRun(refVal_latestRun);
    }
    return ok;
}

utility::string_t BranchImpl::getClass() const
{
    return m__class;
}

void BranchImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool BranchImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void BranchImpl::unset_class()
{
    m__classIsSet = false;
}
utility::string_t BranchImpl::getDisplayName() const
{
    return m_DisplayName;
}

void BranchImpl::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool BranchImpl::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void BranchImpl::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t BranchImpl::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}

void BranchImpl::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}

bool BranchImpl::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}

void BranchImpl::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}
utility::string_t BranchImpl::getFullDisplayName() const
{
    return m_FullDisplayName;
}

void BranchImpl::setFullDisplayName(const utility::string_t& value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}

bool BranchImpl::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}

void BranchImpl::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}
utility::string_t BranchImpl::getFullName() const
{
    return m_FullName;
}

void BranchImpl::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool BranchImpl::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void BranchImpl::unsetFullName()
{
    m_FullNameIsSet = false;
}
utility::string_t BranchImpl::getName() const
{
    return m_Name;
}

void BranchImpl::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BranchImpl::nameIsSet() const
{
    return m_NameIsSet;
}

void BranchImpl::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BranchImpl::getOrganization() const
{
    return m_Organization;
}

void BranchImpl::setOrganization(const utility::string_t& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool BranchImpl::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void BranchImpl::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
std::vector<std::shared_ptr<StringParameterDefinition>>& BranchImpl::getParameters()
{
    return m_Parameters;
}

void BranchImpl::setParameters(const std::vector<std::shared_ptr<StringParameterDefinition>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BranchImpl::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BranchImpl::unsetParameters()
{
    m_ParametersIsSet = false;
}
std::shared_ptr<BranchImplpermissions> BranchImpl::getPermissions() const
{
    return m_Permissions;
}

void BranchImpl::setPermissions(const std::shared_ptr<BranchImplpermissions>& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}

bool BranchImpl::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void BranchImpl::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
int32_t BranchImpl::getWeatherScore() const
{
    return m_WeatherScore;
}

void BranchImpl::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}

bool BranchImpl::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}

void BranchImpl::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}
utility::string_t BranchImpl::getPullRequest() const
{
    return m_PullRequest;
}

void BranchImpl::setPullRequest(const utility::string_t& value)
{
    m_PullRequest = value;
    m_PullRequestIsSet = true;
}

bool BranchImpl::pullRequestIsSet() const
{
    return m_PullRequestIsSet;
}

void BranchImpl::unsetPullRequest()
{
    m_PullRequestIsSet = false;
}
std::shared_ptr<BranchImpllinks> BranchImpl::getLinks() const
{
    return m__links;
}

void BranchImpl::setLinks(const std::shared_ptr<BranchImpllinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool BranchImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void BranchImpl::unset_links()
{
    m__linksIsSet = false;
}
std::shared_ptr<PipelineRunImpl> BranchImpl::getLatestRun() const
{
    return m_LatestRun;
}

void BranchImpl::setLatestRun(const std::shared_ptr<PipelineRunImpl>& value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}

bool BranchImpl::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}

void BranchImpl::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}
}
}
}
}


