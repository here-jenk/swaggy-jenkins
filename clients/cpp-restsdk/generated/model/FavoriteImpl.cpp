/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FavoriteImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




FavoriteImpl::FavoriteImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_ItemIsSet = false;
}

FavoriteImpl::~FavoriteImpl()
{
}

void FavoriteImpl::validate()
{
    // TODO: implement validation
}

web::json::value FavoriteImpl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_ItemIsSet)
    {
        val[utility::conversions::to_string_t(U("item"))] = ModelBase::toJson(m_Item);
    }

    return val;
}

bool FavoriteImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FavoriteImpllinks> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineImpl> refVal_item;
            ok &= ModelBase::fromJson(fieldValue, refVal_item);
            setItem(refVal_item);
        }
    }
    return ok;
}

void FavoriteImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_ItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item")), m_Item));
    }
}

bool FavoriteImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<FavoriteImpllinks> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal__links );
        setLinks(refVal__links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item"))))
    {
        std::shared_ptr<PipelineImpl> refVal_item;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item"))), refVal_item );
        setItem(refVal_item);
    }
    return ok;
}

utility::string_t FavoriteImpl::getClass() const
{
    return m__class;
}

void FavoriteImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool FavoriteImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void FavoriteImpl::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<FavoriteImpllinks> FavoriteImpl::getLinks() const
{
    return m__links;
}

void FavoriteImpl::setLinks(const std::shared_ptr<FavoriteImpllinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool FavoriteImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void FavoriteImpl::unset_links()
{
    m__linksIsSet = false;
}
std::shared_ptr<PipelineImpl> FavoriteImpl::getItem() const
{
    return m_Item;
}

void FavoriteImpl::setItem(const std::shared_ptr<PipelineImpl>& value)
{
    m_Item = value;
    m_ItemIsSet = true;
}

bool FavoriteImpl::itemIsSet() const
{
    return m_ItemIsSet;
}

void FavoriteImpl::unsetItem()
{
    m_ItemIsSet = false;
}
}
}
}
}


