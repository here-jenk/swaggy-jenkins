/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Hudson.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Hudson::Hudson()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_AssignedLabelsIsSet = false;
    m_Mode = utility::conversions::to_string_t("");
    m_ModeIsSet = false;
    m_NodeDescription = utility::conversions::to_string_t("");
    m_NodeDescriptionIsSet = false;
    m_NodeName = utility::conversions::to_string_t("");
    m_NodeNameIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_JobsIsSet = false;
    m_PrimaryViewIsSet = false;
    m_QuietingDown = false;
    m_QuietingDownIsSet = false;
    m_SlaveAgentPort = 0;
    m_SlaveAgentPortIsSet = false;
    m_UnlabeledLoadIsSet = false;
    m_UseCrumbs = false;
    m_UseCrumbsIsSet = false;
    m_UseSecurity = false;
    m_UseSecurityIsSet = false;
    m_ViewsIsSet = false;
}

Hudson::~Hudson()
{
}

void Hudson::validate()
{
    // TODO: implement validation
}

web::json::value Hudson::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_AssignedLabelsIsSet)
    {
        val[utility::conversions::to_string_t(U("assignedLabels"))] = ModelBase::toJson(m_AssignedLabels);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mode"))] = ModelBase::toJson(m_Mode);
    }
    if(m_NodeDescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("nodeDescription"))] = ModelBase::toJson(m_NodeDescription);
    }
    if(m_NodeNameIsSet)
    {
        val[utility::conversions::to_string_t(U("nodeName"))] = ModelBase::toJson(m_NodeName);
    }
    if(m_NumExecutorsIsSet)
    {
        val[utility::conversions::to_string_t(U("numExecutors"))] = ModelBase::toJson(m_NumExecutors);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_JobsIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs"))] = ModelBase::toJson(m_Jobs);
    }
    if(m_PrimaryViewIsSet)
    {
        val[utility::conversions::to_string_t(U("primaryView"))] = ModelBase::toJson(m_PrimaryView);
    }
    if(m_QuietingDownIsSet)
    {
        val[utility::conversions::to_string_t(U("quietingDown"))] = ModelBase::toJson(m_QuietingDown);
    }
    if(m_SlaveAgentPortIsSet)
    {
        val[utility::conversions::to_string_t(U("slaveAgentPort"))] = ModelBase::toJson(m_SlaveAgentPort);
    }
    if(m_UnlabeledLoadIsSet)
    {
        val[utility::conversions::to_string_t(U("unlabeledLoad"))] = ModelBase::toJson(m_UnlabeledLoad);
    }
    if(m_UseCrumbsIsSet)
    {
        val[utility::conversions::to_string_t(U("useCrumbs"))] = ModelBase::toJson(m_UseCrumbs);
    }
    if(m_UseSecurityIsSet)
    {
        val[utility::conversions::to_string_t(U("useSecurity"))] = ModelBase::toJson(m_UseSecurity);
    }
    if(m_ViewsIsSet)
    {
        val[utility::conversions::to_string_t(U("views"))] = ModelBase::toJson(m_Views);
    }

    return val;
}

bool Hudson::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assignedLabels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assignedLabels")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<HudsonassignedLabels>> refVal_assignedLabels;
            ok &= ModelBase::fromJson(fieldValue, refVal_assignedLabels);
            setAssignedLabels(refVal_assignedLabels);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode);
            setMode(refVal_mode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodeDescription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodeDescription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeDescription);
            setNodeDescription(refVal_nodeDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodeName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodeName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeName);
            setNodeName(refVal_nodeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("numExecutors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("numExecutors")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_numExecutors;
            ok &= ModelBase::fromJson(fieldValue, refVal_numExecutors);
            setNumExecutors(refVal_numExecutors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FreeStyleProject>> refVal_jobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_jobs);
            setJobs(refVal_jobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primaryView"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primaryView")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AllView> refVal_primaryView;
            ok &= ModelBase::fromJson(fieldValue, refVal_primaryView);
            setPrimaryView(refVal_primaryView);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quietingDown"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quietingDown")));
        if(!fieldValue.is_null())
        {
            bool refVal_quietingDown;
            ok &= ModelBase::fromJson(fieldValue, refVal_quietingDown);
            setQuietingDown(refVal_quietingDown);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slaveAgentPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slaveAgentPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_slaveAgentPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_slaveAgentPort);
            setSlaveAgentPort(refVal_slaveAgentPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unlabeledLoad"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unlabeledLoad")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UnlabeledLoadStatistics> refVal_unlabeledLoad;
            ok &= ModelBase::fromJson(fieldValue, refVal_unlabeledLoad);
            setUnlabeledLoad(refVal_unlabeledLoad);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useCrumbs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useCrumbs")));
        if(!fieldValue.is_null())
        {
            bool refVal_useCrumbs;
            ok &= ModelBase::fromJson(fieldValue, refVal_useCrumbs);
            setUseCrumbs(refVal_useCrumbs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useSecurity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useSecurity")));
        if(!fieldValue.is_null())
        {
            bool refVal_useSecurity;
            ok &= ModelBase::fromJson(fieldValue, refVal_useSecurity);
            setUseSecurity(refVal_useSecurity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("views"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("views")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AllView>> refVal_views;
            ok &= ModelBase::fromJson(fieldValue, refVal_views);
            setViews(refVal_views);
        }
    }
    return ok;
}

void Hudson::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_AssignedLabelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assignedLabels")), m_AssignedLabels));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
    }
    if(m_NodeDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodeDescription")), m_NodeDescription));
    }
    if(m_NodeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodeName")), m_NodeName));
    }
    if(m_NumExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("numExecutors")), m_NumExecutors));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_JobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs")), m_Jobs));
    }
    if(m_PrimaryViewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primaryView")), m_PrimaryView));
    }
    if(m_QuietingDownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quietingDown")), m_QuietingDown));
    }
    if(m_SlaveAgentPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slaveAgentPort")), m_SlaveAgentPort));
    }
    if(m_UnlabeledLoadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unlabeledLoad")), m_UnlabeledLoad));
    }
    if(m_UseCrumbsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useCrumbs")), m_UseCrumbs));
    }
    if(m_UseSecurityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useSecurity")), m_UseSecurity));
    }
    if(m_ViewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("views")), m_Views));
    }
}

bool Hudson::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assignedLabels"))))
    {
        std::vector<std::shared_ptr<HudsonassignedLabels>> refVal_assignedLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assignedLabels"))), refVal_assignedLabels );
        setAssignedLabels(refVal_assignedLabels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mode"))))
    {
        utility::string_t refVal_mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mode"))), refVal_mode );
        setMode(refVal_mode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodeDescription"))))
    {
        utility::string_t refVal_nodeDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodeDescription"))), refVal_nodeDescription );
        setNodeDescription(refVal_nodeDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodeName"))))
    {
        utility::string_t refVal_nodeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodeName"))), refVal_nodeName );
        setNodeName(refVal_nodeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("numExecutors"))))
    {
        int32_t refVal_numExecutors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("numExecutors"))), refVal_numExecutors );
        setNumExecutors(refVal_numExecutors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs"))))
    {
        std::vector<std::shared_ptr<FreeStyleProject>> refVal_jobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs"))), refVal_jobs );
        setJobs(refVal_jobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primaryView"))))
    {
        std::shared_ptr<AllView> refVal_primaryView;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primaryView"))), refVal_primaryView );
        setPrimaryView(refVal_primaryView);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quietingDown"))))
    {
        bool refVal_quietingDown;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quietingDown"))), refVal_quietingDown );
        setQuietingDown(refVal_quietingDown);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slaveAgentPort"))))
    {
        int32_t refVal_slaveAgentPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slaveAgentPort"))), refVal_slaveAgentPort );
        setSlaveAgentPort(refVal_slaveAgentPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unlabeledLoad"))))
    {
        std::shared_ptr<UnlabeledLoadStatistics> refVal_unlabeledLoad;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unlabeledLoad"))), refVal_unlabeledLoad );
        setUnlabeledLoad(refVal_unlabeledLoad);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useCrumbs"))))
    {
        bool refVal_useCrumbs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useCrumbs"))), refVal_useCrumbs );
        setUseCrumbs(refVal_useCrumbs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useSecurity"))))
    {
        bool refVal_useSecurity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useSecurity"))), refVal_useSecurity );
        setUseSecurity(refVal_useSecurity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("views"))))
    {
        std::vector<std::shared_ptr<AllView>> refVal_views;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("views"))), refVal_views );
        setViews(refVal_views);
    }
    return ok;
}

utility::string_t Hudson::getClass() const
{
    return m__class;
}

void Hudson::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool Hudson::r_classIsSet() const
{
    return m__classIsSet;
}

void Hudson::unset_class()
{
    m__classIsSet = false;
}
std::vector<std::shared_ptr<HudsonassignedLabels>>& Hudson::getAssignedLabels()
{
    return m_AssignedLabels;
}

void Hudson::setAssignedLabels(const std::vector<std::shared_ptr<HudsonassignedLabels>>& value)
{
    m_AssignedLabels = value;
    m_AssignedLabelsIsSet = true;
}

bool Hudson::assignedLabelsIsSet() const
{
    return m_AssignedLabelsIsSet;
}

void Hudson::unsetAssignedLabels()
{
    m_AssignedLabelsIsSet = false;
}
utility::string_t Hudson::getMode() const
{
    return m_Mode;
}

void Hudson::setMode(const utility::string_t& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool Hudson::modeIsSet() const
{
    return m_ModeIsSet;
}

void Hudson::unsetMode()
{
    m_ModeIsSet = false;
}
utility::string_t Hudson::getNodeDescription() const
{
    return m_NodeDescription;
}

void Hudson::setNodeDescription(const utility::string_t& value)
{
    m_NodeDescription = value;
    m_NodeDescriptionIsSet = true;
}

bool Hudson::nodeDescriptionIsSet() const
{
    return m_NodeDescriptionIsSet;
}

void Hudson::unsetNodeDescription()
{
    m_NodeDescriptionIsSet = false;
}
utility::string_t Hudson::getNodeName() const
{
    return m_NodeName;
}

void Hudson::setNodeName(const utility::string_t& value)
{
    m_NodeName = value;
    m_NodeNameIsSet = true;
}

bool Hudson::nodeNameIsSet() const
{
    return m_NodeNameIsSet;
}

void Hudson::unsetNodeName()
{
    m_NodeNameIsSet = false;
}
int32_t Hudson::getNumExecutors() const
{
    return m_NumExecutors;
}

void Hudson::setNumExecutors(int32_t value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}

bool Hudson::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}

void Hudson::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}
utility::string_t Hudson::getDescription() const
{
    return m_Description;
}

void Hudson::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Hudson::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Hudson::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::shared_ptr<FreeStyleProject>>& Hudson::getJobs()
{
    return m_Jobs;
}

void Hudson::setJobs(const std::vector<std::shared_ptr<FreeStyleProject>>& value)
{
    m_Jobs = value;
    m_JobsIsSet = true;
}

bool Hudson::jobsIsSet() const
{
    return m_JobsIsSet;
}

void Hudson::unsetJobs()
{
    m_JobsIsSet = false;
}
std::shared_ptr<AllView> Hudson::getPrimaryView() const
{
    return m_PrimaryView;
}

void Hudson::setPrimaryView(const std::shared_ptr<AllView>& value)
{
    m_PrimaryView = value;
    m_PrimaryViewIsSet = true;
}

bool Hudson::primaryViewIsSet() const
{
    return m_PrimaryViewIsSet;
}

void Hudson::unsetPrimaryView()
{
    m_PrimaryViewIsSet = false;
}
bool Hudson::isQuietingDown() const
{
    return m_QuietingDown;
}

void Hudson::setQuietingDown(bool value)
{
    m_QuietingDown = value;
    m_QuietingDownIsSet = true;
}

bool Hudson::quietingDownIsSet() const
{
    return m_QuietingDownIsSet;
}

void Hudson::unsetQuietingDown()
{
    m_QuietingDownIsSet = false;
}
int32_t Hudson::getSlaveAgentPort() const
{
    return m_SlaveAgentPort;
}

void Hudson::setSlaveAgentPort(int32_t value)
{
    m_SlaveAgentPort = value;
    m_SlaveAgentPortIsSet = true;
}

bool Hudson::slaveAgentPortIsSet() const
{
    return m_SlaveAgentPortIsSet;
}

void Hudson::unsetSlaveAgentPort()
{
    m_SlaveAgentPortIsSet = false;
}
std::shared_ptr<UnlabeledLoadStatistics> Hudson::getUnlabeledLoad() const
{
    return m_UnlabeledLoad;
}

void Hudson::setUnlabeledLoad(const std::shared_ptr<UnlabeledLoadStatistics>& value)
{
    m_UnlabeledLoad = value;
    m_UnlabeledLoadIsSet = true;
}

bool Hudson::unlabeledLoadIsSet() const
{
    return m_UnlabeledLoadIsSet;
}

void Hudson::unsetUnlabeledLoad()
{
    m_UnlabeledLoadIsSet = false;
}
bool Hudson::isUseCrumbs() const
{
    return m_UseCrumbs;
}

void Hudson::setUseCrumbs(bool value)
{
    m_UseCrumbs = value;
    m_UseCrumbsIsSet = true;
}

bool Hudson::useCrumbsIsSet() const
{
    return m_UseCrumbsIsSet;
}

void Hudson::unsetUseCrumbs()
{
    m_UseCrumbsIsSet = false;
}
bool Hudson::isUseSecurity() const
{
    return m_UseSecurity;
}

void Hudson::setUseSecurity(bool value)
{
    m_UseSecurity = value;
    m_UseSecurityIsSet = true;
}

bool Hudson::useSecurityIsSet() const
{
    return m_UseSecurityIsSet;
}

void Hudson::unsetUseSecurity()
{
    m_UseSecurityIsSet = false;
}
std::vector<std::shared_ptr<AllView>>& Hudson::getViews()
{
    return m_Views;
}

void Hudson::setViews(const std::vector<std::shared_ptr<AllView>>& value)
{
    m_Views = value;
    m_ViewsIsSet = true;
}

bool Hudson::viewsIsSet() const
{
    return m_ViewsIsSet;
}

void Hudson::unsetViews()
{
    m_ViewsIsSet = false;
}
}
}
}
}


