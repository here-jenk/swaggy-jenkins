/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineBranchesitempullRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PipelineBranchesitempullRequest::PipelineBranchesitempullRequest()
{
    m__linksIsSet = false;
    m_Author = utility::conversions::to_string_t("");
    m_AuthorIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

PipelineBranchesitempullRequest::~PipelineBranchesitempullRequest()
{
}

void PipelineBranchesitempullRequest::validate()
{
    // TODO: implement validation
}

web::json::value PipelineBranchesitempullRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool PipelineBranchesitempullRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineBranchesitempullRequestlinks> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_author;
            ok &= ModelBase::fromJson(fieldValue, refVal_author);
            setAuthor(refVal_author);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    return ok;
}

void PipelineBranchesitempullRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool PipelineBranchesitempullRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<PipelineBranchesitempullRequestlinks> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal__links );
        setLinks(refVal__links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        utility::string_t refVal_author;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_author );
        setAuthor(refVal_author);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    return ok;
}

std::shared_ptr<PipelineBranchesitempullRequestlinks> PipelineBranchesitempullRequest::getLinks() const
{
    return m__links;
}

void PipelineBranchesitempullRequest::setLinks(const std::shared_ptr<PipelineBranchesitempullRequestlinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool PipelineBranchesitempullRequest::linksIsSet() const
{
    return m__linksIsSet;
}

void PipelineBranchesitempullRequest::unset_links()
{
    m__linksIsSet = false;
}
utility::string_t PipelineBranchesitempullRequest::getAuthor() const
{
    return m_Author;
}

void PipelineBranchesitempullRequest::setAuthor(const utility::string_t& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool PipelineBranchesitempullRequest::authorIsSet() const
{
    return m_AuthorIsSet;
}

void PipelineBranchesitempullRequest::unsetAuthor()
{
    m_AuthorIsSet = false;
}
utility::string_t PipelineBranchesitempullRequest::getId() const
{
    return m_Id;
}

void PipelineBranchesitempullRequest::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PipelineBranchesitempullRequest::idIsSet() const
{
    return m_IdIsSet;
}

void PipelineBranchesitempullRequest::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PipelineBranchesitempullRequest::getTitle() const
{
    return m_Title;
}

void PipelineBranchesitempullRequest::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool PipelineBranchesitempullRequest::titleIsSet() const
{
    return m_TitleIsSet;
}

void PipelineBranchesitempullRequest::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t PipelineBranchesitempullRequest::getUrl() const
{
    return m_Url;
}

void PipelineBranchesitempullRequest::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool PipelineBranchesitempullRequest::urlIsSet() const
{
    return m_UrlIsSet;
}

void PipelineBranchesitempullRequest::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t PipelineBranchesitempullRequest::getClass() const
{
    return m__class;
}

void PipelineBranchesitempullRequest::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool PipelineBranchesitempullRequest::r_classIsSet() const
{
    return m__classIsSet;
}

void PipelineBranchesitempullRequest::unset_class()
{
    m__classIsSet = false;
}
}
}
}
}


