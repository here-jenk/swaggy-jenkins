/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputermonitorData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




HudsonMasterComputermonitorData::HudsonMasterComputermonitorData()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_ArchitectureMonitor = utility::conversions::to_string_t("");
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

HudsonMasterComputermonitorData::~HudsonMasterComputermonitorData()
{
}

void HudsonMasterComputermonitorData::validate()
{
    // TODO: implement validation
}

web::json::value HudsonMasterComputermonitorData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Hudson_node_monitors_SwapSpaceMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_SwapSpaceMonitor);
    }
    if(m_Hudson_node_monitors_TemporarySpaceMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_TemporarySpaceMonitor);
    }
    if(m_Hudson_node_monitors_DiskSpaceMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_DiskSpaceMonitor);
    }
    if(m_Hudson_node_monitors_ArchitectureMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_ArchitectureMonitor);
    }
    if(m_Hudson_node_monitors_ResponseTimeMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_ResponseTimeMonitor);
    }
    if(m_Hudson_node_monitors_ClockMonitorIsSet)
    {
        val[utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor"))] = ModelBase::toJson(m_Hudson_node_monitors_ClockMonitor);
    }
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool HudsonMasterComputermonitorData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SwapSpaceMonitorMemoryUsage2> refVal_hudson.node_monitors.SwapSpaceMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.SwapSpaceMonitor);
            setHudsonNodeMonitorsSwapSpaceMonitor(refVal_hudson.node_monitors.SwapSpaceMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> refVal_hudson.node_monitors.TemporarySpaceMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.TemporarySpaceMonitor);
            setHudsonNodeMonitorsTemporarySpaceMonitor(refVal_hudson.node_monitors.TemporarySpaceMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> refVal_hudson.node_monitors.DiskSpaceMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.DiskSpaceMonitor);
            setHudsonNodeMonitorsDiskSpaceMonitor(refVal_hudson.node_monitors.DiskSpaceMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hudson.node_monitors.ArchitectureMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.ArchitectureMonitor);
            setHudsonNodeMonitorsArchitectureMonitor(refVal_hudson.node_monitors.ArchitectureMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseTimeMonitorData> refVal_hudson.node_monitors.ResponseTimeMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.ResponseTimeMonitor);
            setHudsonNodeMonitorsResponseTimeMonitor(refVal_hudson.node_monitors.ResponseTimeMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ClockDifference> refVal_hudson.node_monitors.ClockMonitor;
            ok &= ModelBase::fromJson(fieldValue, refVal_hudson.node_monitors.ClockMonitor);
            setHudsonNodeMonitorsClockMonitor(refVal_hudson.node_monitors.ClockMonitor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal__class;
            ok &= ModelBase::fromJson(fieldValue, refVal__class);
            setClass(refVal__class);
        }
    }
    return ok;
}

void HudsonMasterComputermonitorData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Hudson_node_monitors_SwapSpaceMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor")), m_Hudson_node_monitors_SwapSpaceMonitor));
    }
    if(m_Hudson_node_monitors_TemporarySpaceMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor")), m_Hudson_node_monitors_TemporarySpaceMonitor));
    }
    if(m_Hudson_node_monitors_DiskSpaceMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor")), m_Hudson_node_monitors_DiskSpaceMonitor));
    }
    if(m_Hudson_node_monitors_ArchitectureMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor")), m_Hudson_node_monitors_ArchitectureMonitor));
    }
    if(m_Hudson_node_monitors_ResponseTimeMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor")), m_Hudson_node_monitors_ResponseTimeMonitor));
    }
    if(m_Hudson_node_monitors_ClockMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor")), m_Hudson_node_monitors_ClockMonitor));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool HudsonMasterComputermonitorData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor"))))
    {
        std::shared_ptr<SwapSpaceMonitorMemoryUsage2> refVal_hudson.node_monitors.SwapSpaceMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.SwapSpaceMonitor"))), refVal_hudson.node_monitors.SwapSpaceMonitor );
        setHudsonNodeMonitorsSwapSpaceMonitor(refVal_hudson.node_monitors.SwapSpaceMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor"))))
    {
        std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> refVal_hudson.node_monitors.TemporarySpaceMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.TemporarySpaceMonitor"))), refVal_hudson.node_monitors.TemporarySpaceMonitor );
        setHudsonNodeMonitorsTemporarySpaceMonitor(refVal_hudson.node_monitors.TemporarySpaceMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor"))))
    {
        std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> refVal_hudson.node_monitors.DiskSpaceMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.DiskSpaceMonitor"))), refVal_hudson.node_monitors.DiskSpaceMonitor );
        setHudsonNodeMonitorsDiskSpaceMonitor(refVal_hudson.node_monitors.DiskSpaceMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor"))))
    {
        utility::string_t refVal_hudson.node_monitors.ArchitectureMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.ArchitectureMonitor"))), refVal_hudson.node_monitors.ArchitectureMonitor );
        setHudsonNodeMonitorsArchitectureMonitor(refVal_hudson.node_monitors.ArchitectureMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor"))))
    {
        std::shared_ptr<ResponseTimeMonitorData> refVal_hudson.node_monitors.ResponseTimeMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.ResponseTimeMonitor"))), refVal_hudson.node_monitors.ResponseTimeMonitor );
        setHudsonNodeMonitorsResponseTimeMonitor(refVal_hudson.node_monitors.ResponseTimeMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor"))))
    {
        std::shared_ptr<ClockDifference> refVal_hudson.node_monitors.ClockMonitor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hudson.node_monitors.ClockMonitor"))), refVal_hudson.node_monitors.ClockMonitor );
        setHudsonNodeMonitorsClockMonitor(refVal_hudson.node_monitors.ClockMonitor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal__class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal__class );
        setClass(refVal__class);
    }
    return ok;
}

std::shared_ptr<SwapSpaceMonitorMemoryUsage2> HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(const std::shared_ptr<SwapSpaceMonitorMemoryUsage2>& value)
{
    m_Hudson_node_monitors_SwapSpaceMonitor = value;
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsSwapSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_SwapSpaceMonitor()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(const std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace>& value)
{
    m_Hudson_node_monitors_TemporarySpaceMonitor = value;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsTemporarySpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_TemporarySpaceMonitor()
{
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(const std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace>& value)
{
    m_Hudson_node_monitors_DiskSpaceMonitor = value;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsDiskSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_DiskSpaceMonitor()
{
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
}
utility::string_t HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(const utility::string_t& value)
{
    m_Hudson_node_monitors_ArchitectureMonitor = value;
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsArchitectureMonitorIsSet() const
{
    return m_Hudson_node_monitors_ArchitectureMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ArchitectureMonitor()
{
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
}
std::shared_ptr<ResponseTimeMonitorData> HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(const std::shared_ptr<ResponseTimeMonitorData>& value)
{
    m_Hudson_node_monitors_ResponseTimeMonitor = value;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsResponseTimeMonitorIsSet() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ResponseTimeMonitor()
{
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
}
std::shared_ptr<ClockDifference> HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(const std::shared_ptr<ClockDifference>& value)
{
    m_Hudson_node_monitors_ClockMonitor = value;
    m_Hudson_node_monitors_ClockMonitorIsSet = true;
}

bool HudsonMasterComputermonitorData::hudsonNodeMonitorsClockMonitorIsSet() const
{
    return m_Hudson_node_monitors_ClockMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ClockMonitor()
{
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
}
utility::string_t HudsonMasterComputermonitorData::getClass() const
{
    return m__class;
}

void HudsonMasterComputermonitorData::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool HudsonMasterComputermonitorData::r_classIsSet() const
{
    return m__classIsSet;
}

void HudsonMasterComputermonitorData::unset_class()
{
    m__classIsSet = false;
}
}
}
}
}


