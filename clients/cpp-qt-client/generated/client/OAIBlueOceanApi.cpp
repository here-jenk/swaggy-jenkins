/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlueOceanApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIBlueOceanApi::OAIBlueOceanApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIBlueOceanApi::~OAIBlueOceanApi() {
}

void OAIBlueOceanApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deletePipelineQueueItem", defaultConf);
    _serverIndices.insert("deletePipelineQueueItem", 0);
    _serverConfigs.insert("getAuthenticatedUser", defaultConf);
    _serverIndices.insert("getAuthenticatedUser", 0);
    _serverConfigs.insert("getClasses", defaultConf);
    _serverIndices.insert("getClasses", 0);
    _serverConfigs.insert("getJsonWebKey", defaultConf);
    _serverIndices.insert("getJsonWebKey", 0);
    _serverConfigs.insert("getJsonWebToken", defaultConf);
    _serverIndices.insert("getJsonWebToken", 0);
    _serverConfigs.insert("getOrganisation", defaultConf);
    _serverIndices.insert("getOrganisation", 0);
    _serverConfigs.insert("getOrganisations", defaultConf);
    _serverIndices.insert("getOrganisations", 0);
    _serverConfigs.insert("getPipeline", defaultConf);
    _serverIndices.insert("getPipeline", 0);
    _serverConfigs.insert("getPipelineActivities", defaultConf);
    _serverIndices.insert("getPipelineActivities", 0);
    _serverConfigs.insert("getPipelineBranch", defaultConf);
    _serverIndices.insert("getPipelineBranch", 0);
    _serverConfigs.insert("getPipelineBranchRun", defaultConf);
    _serverIndices.insert("getPipelineBranchRun", 0);
    _serverConfigs.insert("getPipelineBranches", defaultConf);
    _serverIndices.insert("getPipelineBranches", 0);
    _serverConfigs.insert("getPipelineFolder", defaultConf);
    _serverIndices.insert("getPipelineFolder", 0);
    _serverConfigs.insert("getPipelineFolderPipeline", defaultConf);
    _serverIndices.insert("getPipelineFolderPipeline", 0);
    _serverConfigs.insert("getPipelineQueue", defaultConf);
    _serverIndices.insert("getPipelineQueue", 0);
    _serverConfigs.insert("getPipelineRun", defaultConf);
    _serverIndices.insert("getPipelineRun", 0);
    _serverConfigs.insert("getPipelineRunLog", defaultConf);
    _serverIndices.insert("getPipelineRunLog", 0);
    _serverConfigs.insert("getPipelineRunNode", defaultConf);
    _serverIndices.insert("getPipelineRunNode", 0);
    _serverConfigs.insert("getPipelineRunNodeStep", defaultConf);
    _serverIndices.insert("getPipelineRunNodeStep", 0);
    _serverConfigs.insert("getPipelineRunNodeStepLog", defaultConf);
    _serverIndices.insert("getPipelineRunNodeStepLog", 0);
    _serverConfigs.insert("getPipelineRunNodeSteps", defaultConf);
    _serverIndices.insert("getPipelineRunNodeSteps", 0);
    _serverConfigs.insert("getPipelineRunNodes", defaultConf);
    _serverIndices.insert("getPipelineRunNodes", 0);
    _serverConfigs.insert("getPipelineRuns", defaultConf);
    _serverIndices.insert("getPipelineRuns", 0);
    _serverConfigs.insert("getPipelines", defaultConf);
    _serverIndices.insert("getPipelines", 0);
    _serverConfigs.insert("getSCM", defaultConf);
    _serverIndices.insert("getSCM", 0);
    _serverConfigs.insert("getSCMOrganisationRepositories", defaultConf);
    _serverIndices.insert("getSCMOrganisationRepositories", 0);
    _serverConfigs.insert("getSCMOrganisationRepository", defaultConf);
    _serverIndices.insert("getSCMOrganisationRepository", 0);
    _serverConfigs.insert("getSCMOrganisations", defaultConf);
    _serverIndices.insert("getSCMOrganisations", 0);
    _serverConfigs.insert("getUser", defaultConf);
    _serverIndices.insert("getUser", 0);
    _serverConfigs.insert("getUserFavorites", defaultConf);
    _serverIndices.insert("getUserFavorites", 0);
    _serverConfigs.insert("getUsers", defaultConf);
    _serverIndices.insert("getUsers", 0);
    _serverConfigs.insert("postPipelineRun", defaultConf);
    _serverIndices.insert("postPipelineRun", 0);
    _serverConfigs.insert("postPipelineRuns", defaultConf);
    _serverIndices.insert("postPipelineRuns", 0);
    _serverConfigs.insert("putPipelineFavorite", defaultConf);
    _serverIndices.insert("putPipelineFavorite", 0);
    _serverConfigs.insert("putPipelineRun", defaultConf);
    _serverIndices.insert("putPipelineRun", 0);
    _serverConfigs.insert("search", defaultConf);
    _serverIndices.insert("search", 0);
    _serverConfigs.insert("searchClasses", defaultConf);
    _serverIndices.insert("searchClasses", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIBlueOceanApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIBlueOceanApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIBlueOceanApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName,apiKey);
}

void OAIBlueOceanApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIBlueOceanApi::setUsername(const QString &username) {
    _username = username;
}

void OAIBlueOceanApi::setPassword(const QString &password) {
    _password = password;
}


void OAIBlueOceanApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIBlueOceanApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIBlueOceanApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIBlueOceanApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIBlueOceanApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
#else
    for (auto &e : _serverIndices.keys()) {
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
#endif
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIBlueOceanApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIBlueOceanApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIBlueOceanApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIBlueOceanApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIBlueOceanApi::abortRequests() {
    emit abortRequestsSignal();
}

QString OAIBlueOceanApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIBlueOceanApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIBlueOceanApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIBlueOceanApi::deletePipelineQueueItem(const QString &organization, const QString &pipeline, const QString &queue) {
    QString fullPath = QString(_serverConfigs["deletePipelineQueueItem"][_serverIndices.value("deletePipelineQueueItem")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString queuePathParam("{");
        queuePathParam.append("queue").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "queue", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"queue"+pathSuffix : pathPrefix;
        fullPath.replace(queuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::deletePipelineQueueItemCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::deletePipelineQueueItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deletePipelineQueueItemSignal();
        emit deletePipelineQueueItemSignalFull(worker);
    } else {
        emit deletePipelineQueueItemSignalE(error_type, error_str);
        emit deletePipelineQueueItemSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getAuthenticatedUser(const QString &organization) {
    QString fullPath = QString(_serverConfigs["getAuthenticatedUser"][_serverIndices.value("getAuthenticatedUser")].URL()+"/blue/rest/organizations/{organization}/user/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getAuthenticatedUserCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getAuthenticatedUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAuthenticatedUserSignal(output);
        emit getAuthenticatedUserSignalFull(worker, output);
    } else {
        emit getAuthenticatedUserSignalE(output, error_type, error_str);
        emit getAuthenticatedUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getClasses(const QString &r_class) {
    QString fullPath = QString(_serverConfigs["getClasses"][_serverIndices.value("getClasses")].URL()+"/blue/rest/classes/{class}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getClassesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getClassesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getClassesSignal(output);
        emit getClassesSignalFull(worker, output);
    } else {
        emit getClassesSignalE(output, error_type, error_str);
        emit getClassesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getJsonWebKey(const qint32 &key) {
    QString fullPath = QString(_serverConfigs["getJsonWebKey"][_serverIndices.value("getJsonWebKey")].URL()+"/jwt-auth/jwks/{key}");
    
    
    {
        QString keyPathParam("{");
        keyPathParam.append("key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key"+pathSuffix : pathPrefix;
        fullPath.replace(keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getJsonWebKeyCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getJsonWebKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJsonWebKeySignal(output);
        emit getJsonWebKeySignalFull(worker, output);
    } else {
        emit getJsonWebKeySignalE(output, error_type, error_str);
        emit getJsonWebKeySignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getJsonWebToken(const ::OpenAPI::OptionalParam<qint32> &expiry_time_in_mins, const ::OpenAPI::OptionalParam<qint32> &max_expiry_time_in_mins) {
    QString fullPath = QString(_serverConfigs["getJsonWebToken"][_serverIndices.value("getJsonWebToken")].URL()+"/jwt-auth/token");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (expiry_time_in_mins.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "expiryTimeInMins", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("expiryTimeInMins")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(expiry_time_in_mins.value())));
    }
    if (max_expiry_time_in_mins.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxExpiryTimeInMins", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxExpiryTimeInMins")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(max_expiry_time_in_mins.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getJsonWebTokenCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getJsonWebTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getJsonWebTokenSignal(output);
        emit getJsonWebTokenSignalFull(worker, output);
    } else {
        emit getJsonWebTokenSignalE(output, error_type, error_str);
        emit getJsonWebTokenSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getOrganisation(const QString &organization) {
    QString fullPath = QString(_serverConfigs["getOrganisation"][_serverIndices.value("getOrganisation")].URL()+"/blue/rest/organizations/{organization}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getOrganisationCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getOrganisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrganisation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getOrganisationSignal(output);
        emit getOrganisationSignalFull(worker, output);
    } else {
        emit getOrganisationSignalE(output, error_type, error_str);
        emit getOrganisationSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getOrganisations() {
    QString fullPath = QString(_serverConfigs["getOrganisations"][_serverIndices.value("getOrganisations")].URL()+"/blue/rest/organizations/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getOrganisationsCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getOrganisationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOrganisation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIOrganisation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getOrganisationsSignal(output);
        emit getOrganisationsSignalFull(worker, output);
    } else {
        emit getOrganisationsSignalE(output, error_type, error_str);
        emit getOrganisationsSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipeline(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["getPipeline"][_serverIndices.value("getPipeline")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipeline output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineSignal(output);
        emit getPipelineSignalFull(worker, output);
    } else {
        emit getPipelineSignalE(output, error_type, error_str);
        emit getPipelineSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineActivities(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["getPipelineActivities"][_serverIndices.value("getPipelineActivities")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineActivitiesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineActivitiesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPipelineActivity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIPipelineActivity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineActivitiesSignal(output);
        emit getPipelineActivitiesSignalFull(worker, output);
    } else {
        emit getPipelineActivitiesSignalE(output, error_type, error_str);
        emit getPipelineActivitiesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineBranch(const QString &organization, const QString &pipeline, const QString &branch) {
    QString fullPath = QString(_serverConfigs["getPipelineBranch"][_serverIndices.value("getPipelineBranch")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString branchPathParam("{");
        branchPathParam.append("branch").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "branch", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"branch"+pathSuffix : pathPrefix;
        fullPath.replace(branchPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(branch)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineBranchCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineBranchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBranchImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineBranchSignal(output);
        emit getPipelineBranchSignalFull(worker, output);
    } else {
        emit getPipelineBranchSignalE(output, error_type, error_str);
        emit getPipelineBranchSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineBranchRun(const QString &organization, const QString &pipeline, const QString &branch, const QString &run) {
    QString fullPath = QString(_serverConfigs["getPipelineBranchRun"][_serverIndices.value("getPipelineBranchRun")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString branchPathParam("{");
        branchPathParam.append("branch").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "branch", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"branch"+pathSuffix : pathPrefix;
        fullPath.replace(branchPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(branch)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineBranchRunCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineBranchRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineRun output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineBranchRunSignal(output);
        emit getPipelineBranchRunSignalFull(worker, output);
    } else {
        emit getPipelineBranchRunSignalE(output, error_type, error_str);
        emit getPipelineBranchRunSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineBranches(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["getPipelineBranches"][_serverIndices.value("getPipelineBranches")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineBranchesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineBranchesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMultibranchPipeline output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineBranchesSignal(output);
        emit getPipelineBranchesSignalFull(worker, output);
    } else {
        emit getPipelineBranchesSignalE(output, error_type, error_str);
        emit getPipelineBranchesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineFolder(const QString &organization, const QString &folder) {
    QString fullPath = QString(_serverConfigs["getPipelineFolder"][_serverIndices.value("getPipelineFolder")].URL()+"/blue/rest/organizations/{organization}/pipelines/{folder}/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString folderPathParam("{");
        folderPathParam.append("folder").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "folder", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"folder"+pathSuffix : pathPrefix;
        fullPath.replace(folderPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(folder)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineFolderCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineFolderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineFolderImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineFolderSignal(output);
        emit getPipelineFolderSignalFull(worker, output);
    } else {
        emit getPipelineFolderSignalE(output, error_type, error_str);
        emit getPipelineFolderSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineFolderPipeline(const QString &organization, const QString &pipeline, const QString &folder) {
    QString fullPath = QString(_serverConfigs["getPipelineFolderPipeline"][_serverIndices.value("getPipelineFolderPipeline")].URL()+"/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString folderPathParam("{");
        folderPathParam.append("folder").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "folder", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"folder"+pathSuffix : pathPrefix;
        fullPath.replace(folderPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(folder)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineFolderPipelineCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineFolderPipelineCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineFolderPipelineSignal(output);
        emit getPipelineFolderPipelineSignalFull(worker, output);
    } else {
        emit getPipelineFolderPipelineSignalE(output, error_type, error_str);
        emit getPipelineFolderPipelineSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineQueue(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["getPipelineQueue"][_serverIndices.value("getPipelineQueue")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineQueueCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineQueueCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIQueueItemImpl> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIQueueItemImpl val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineQueueSignal(output);
        emit getPipelineQueueSignalFull(worker, output);
    } else {
        emit getPipelineQueueSignalE(output, error_type, error_str);
        emit getPipelineQueueSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRun(const QString &organization, const QString &pipeline, const QString &run) {
    QString fullPath = QString(_serverConfigs["getPipelineRun"][_serverIndices.value("getPipelineRun")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineRun output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunSignal(output);
        emit getPipelineRunSignalFull(worker, output);
    } else {
        emit getPipelineRunSignalE(output, error_type, error_str);
        emit getPipelineRunSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunLog(const QString &organization, const QString &pipeline, const QString &run, const ::OpenAPI::OptionalParam<qint32> &start, const ::OpenAPI::OptionalParam<bool> &download) {
    QString fullPath = QString(_serverConfigs["getPipelineRunLog"][_serverIndices.value("getPipelineRunLog")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start.value())));
    }
    if (download.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "download", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("download")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(download.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunLogCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunLogCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunLogSignal(output);
        emit getPipelineRunLogSignalFull(worker, output);
    } else {
        emit getPipelineRunLogSignalE(output, error_type, error_str);
        emit getPipelineRunLogSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunNode(const QString &organization, const QString &pipeline, const QString &run, const QString &node) {
    QString fullPath = QString(_serverConfigs["getPipelineRunNode"][_serverIndices.value("getPipelineRunNode")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    
    {
        QString nodePathParam("{");
        nodePathParam.append("node").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node"+pathSuffix : pathPrefix;
        fullPath.replace(nodePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunNodeCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunNodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineRunNode output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunNodeSignal(output);
        emit getPipelineRunNodeSignalFull(worker, output);
    } else {
        emit getPipelineRunNodeSignalE(output, error_type, error_str);
        emit getPipelineRunNodeSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunNodeStep(const QString &organization, const QString &pipeline, const QString &run, const QString &node, const QString &step) {
    QString fullPath = QString(_serverConfigs["getPipelineRunNodeStep"][_serverIndices.value("getPipelineRunNodeStep")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    
    {
        QString nodePathParam("{");
        nodePathParam.append("node").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node"+pathSuffix : pathPrefix;
        fullPath.replace(nodePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunNodeStepCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunNodeStepCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineStepImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunNodeStepSignal(output);
        emit getPipelineRunNodeStepSignalFull(worker, output);
    } else {
        emit getPipelineRunNodeStepSignalE(output, error_type, error_str);
        emit getPipelineRunNodeStepSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunNodeStepLog(const QString &organization, const QString &pipeline, const QString &run, const QString &node, const QString &step) {
    QString fullPath = QString(_serverConfigs["getPipelineRunNodeStepLog"][_serverIndices.value("getPipelineRunNodeStepLog")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    
    {
        QString nodePathParam("{");
        nodePathParam.append("node").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node"+pathSuffix : pathPrefix;
        fullPath.replace(nodePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node)));
    }
    
    {
        QString stepPathParam("{");
        stepPathParam.append("step").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "step", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"step"+pathSuffix : pathPrefix;
        fullPath.replace(stepPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(step)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunNodeStepLogCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunNodeStepLogCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunNodeStepLogSignal(output);
        emit getPipelineRunNodeStepLogSignalFull(worker, output);
    } else {
        emit getPipelineRunNodeStepLogSignalE(output, error_type, error_str);
        emit getPipelineRunNodeStepLogSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunNodeSteps(const QString &organization, const QString &pipeline, const QString &run, const QString &node) {
    QString fullPath = QString(_serverConfigs["getPipelineRunNodeSteps"][_serverIndices.value("getPipelineRunNodeSteps")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    
    {
        QString nodePathParam("{");
        nodePathParam.append("node").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node"+pathSuffix : pathPrefix;
        fullPath.replace(nodePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunNodeStepsCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunNodeStepsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPipelineStepImpl> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIPipelineStepImpl val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunNodeStepsSignal(output);
        emit getPipelineRunNodeStepsSignalFull(worker, output);
    } else {
        emit getPipelineRunNodeStepsSignalE(output, error_type, error_str);
        emit getPipelineRunNodeStepsSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRunNodes(const QString &organization, const QString &pipeline, const QString &run) {
    QString fullPath = QString(_serverConfigs["getPipelineRunNodes"][_serverIndices.value("getPipelineRunNodes")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunNodesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunNodesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPipelineRunNode> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIPipelineRunNode val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunNodesSignal(output);
        emit getPipelineRunNodesSignalFull(worker, output);
    } else {
        emit getPipelineRunNodesSignalE(output, error_type, error_str);
        emit getPipelineRunNodesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelineRuns(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["getPipelineRuns"][_serverIndices.value("getPipelineRuns")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelineRunsCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelineRunsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPipelineRun> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIPipelineRun val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelineRunsSignal(output);
        emit getPipelineRunsSignalFull(worker, output);
    } else {
        emit getPipelineRunsSignalE(output, error_type, error_str);
        emit getPipelineRunsSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getPipelines(const QString &organization) {
    QString fullPath = QString(_serverConfigs["getPipelines"][_serverIndices.value("getPipelines")].URL()+"/blue/rest/organizations/{organization}/pipelines/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getPipelinesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getPipelinesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPipeline> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIPipeline val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPipelinesSignal(output);
        emit getPipelinesSignalFull(worker, output);
    } else {
        emit getPipelinesSignalE(output, error_type, error_str);
        emit getPipelinesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getSCM(const QString &organization, const QString &scm) {
    QString fullPath = QString(_serverConfigs["getSCM"][_serverIndices.value("getSCM")].URL()+"/blue/rest/organizations/{organization}/scm/{scm}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString scmPathParam("{");
        scmPathParam.append("scm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scm"+pathSuffix : pathPrefix;
        fullPath.replace(scmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getSCMCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getSCMCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGithubScm output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSCMSignal(output);
        emit getSCMSignalFull(worker, output);
    } else {
        emit getSCMSignalE(output, error_type, error_str);
        emit getSCMSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getSCMOrganisationRepositories(const QString &organization, const QString &scm, const QString &scm_organisation, const ::OpenAPI::OptionalParam<QString> &credential_id, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page_number) {
    QString fullPath = QString(_serverConfigs["getSCMOrganisationRepositories"][_serverIndices.value("getSCMOrganisationRepositories")].URL()+"/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString scmPathParam("{");
        scmPathParam.append("scm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scm"+pathSuffix : pathPrefix;
        fullPath.replace(scmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm)));
    }
    
    {
        QString scm_organisationPathParam("{");
        scm_organisationPathParam.append("scmOrganisation").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scmOrganisation", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scmOrganisation"+pathSuffix : pathPrefix;
        fullPath.replace(scm_organisationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm_organisation)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (credential_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "credentialId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("credentialId")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(credential_id.value())));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size.value())));
    }
    if (page_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageNumber")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_number.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getSCMOrganisationRepositoriesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getSCMOrganisationRepositoriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGithubOrganization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIGithubOrganization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSCMOrganisationRepositoriesSignal(output);
        emit getSCMOrganisationRepositoriesSignalFull(worker, output);
    } else {
        emit getSCMOrganisationRepositoriesSignalE(output, error_type, error_str);
        emit getSCMOrganisationRepositoriesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getSCMOrganisationRepository(const QString &organization, const QString &scm, const QString &scm_organisation, const QString &repository, const ::OpenAPI::OptionalParam<QString> &credential_id) {
    QString fullPath = QString(_serverConfigs["getSCMOrganisationRepository"][_serverIndices.value("getSCMOrganisationRepository")].URL()+"/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString scmPathParam("{");
        scmPathParam.append("scm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scm"+pathSuffix : pathPrefix;
        fullPath.replace(scmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm)));
    }
    
    {
        QString scm_organisationPathParam("{");
        scm_organisationPathParam.append("scmOrganisation").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scmOrganisation", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scmOrganisation"+pathSuffix : pathPrefix;
        fullPath.replace(scm_organisationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm_organisation)));
    }
    
    {
        QString repositoryPathParam("{");
        repositoryPathParam.append("repository").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repository", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repository"+pathSuffix : pathPrefix;
        fullPath.replace(repositoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repository)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (credential_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "credentialId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("credentialId")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(credential_id.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getSCMOrganisationRepositoryCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getSCMOrganisationRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGithubOrganization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIGithubOrganization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSCMOrganisationRepositorySignal(output);
        emit getSCMOrganisationRepositorySignalFull(worker, output);
    } else {
        emit getSCMOrganisationRepositorySignalE(output, error_type, error_str);
        emit getSCMOrganisationRepositorySignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getSCMOrganisations(const QString &organization, const QString &scm, const ::OpenAPI::OptionalParam<QString> &credential_id) {
    QString fullPath = QString(_serverConfigs["getSCMOrganisations"][_serverIndices.value("getSCMOrganisations")].URL()+"/blue/rest/organizations/{organization}/scm/{scm}/organizations");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString scmPathParam("{");
        scmPathParam.append("scm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scm"+pathSuffix : pathPrefix;
        fullPath.replace(scmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scm)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (credential_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "credentialId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("credentialId")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(credential_id.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getSCMOrganisationsCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getSCMOrganisationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGithubOrganization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIGithubOrganization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSCMOrganisationsSignal(output);
        emit getSCMOrganisationsSignalFull(worker, output);
    } else {
        emit getSCMOrganisationsSignalE(output, error_type, error_str);
        emit getSCMOrganisationsSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getUser(const QString &organization, const QString &user) {
    QString fullPath = QString(_serverConfigs["getUser"][_serverIndices.value("getUser")].URL()+"/blue/rest/organizations/{organization}/users/{user}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString userPathParam("{");
        userPathParam.append("user").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user"+pathSuffix : pathPrefix;
        fullPath.replace(userPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getUserCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserSignal(output);
        emit getUserSignalFull(worker, output);
    } else {
        emit getUserSignalE(output, error_type, error_str);
        emit getUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getUserFavorites(const QString &user) {
    QString fullPath = QString(_serverConfigs["getUserFavorites"][_serverIndices.value("getUserFavorites")].URL()+"/blue/rest/users/{user}/favorites");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString userPathParam("{");
        userPathParam.append("user").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user"+pathSuffix : pathPrefix;
        fullPath.replace(userPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getUserFavoritesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getUserFavoritesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFavoriteImpl> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIFavoriteImpl val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserFavoritesSignal(output);
        emit getUserFavoritesSignalFull(worker, output);
    } else {
        emit getUserFavoritesSignalE(output, error_type, error_str);
        emit getUserFavoritesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::getUsers(const QString &organization) {
    QString fullPath = QString(_serverConfigs["getUsers"][_serverIndices.value("getUsers")].URL()+"/blue/rest/organizations/{organization}/users/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::getUsersCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::getUsersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUser output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUsersSignal(output);
        emit getUsersSignalFull(worker, output);
    } else {
        emit getUsersSignalE(output, error_type, error_str);
        emit getUsersSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::postPipelineRun(const QString &organization, const QString &pipeline, const QString &run) {
    QString fullPath = QString(_serverConfigs["postPipelineRun"][_serverIndices.value("postPipelineRun")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::postPipelineRunCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::postPipelineRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQueueItemImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPipelineRunSignal(output);
        emit postPipelineRunSignalFull(worker, output);
    } else {
        emit postPipelineRunSignalE(output, error_type, error_str);
        emit postPipelineRunSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::postPipelineRuns(const QString &organization, const QString &pipeline) {
    QString fullPath = QString(_serverConfigs["postPipelineRuns"][_serverIndices.value("postPipelineRuns")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::postPipelineRunsCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::postPipelineRunsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQueueItemImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPipelineRunsSignal(output);
        emit postPipelineRunsSignalFull(worker, output);
    } else {
        emit postPipelineRunsSignalE(output, error_type, error_str);
        emit postPipelineRunsSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::putPipelineFavorite(const QString &organization, const QString &pipeline, const bool &body) {
    QString fullPath = QString(_serverConfigs["putPipelineFavorite"][_serverIndices.value("putPipelineFavorite")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::putPipelineFavoriteCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::putPipelineFavoriteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFavoriteImpl output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putPipelineFavoriteSignal(output);
        emit putPipelineFavoriteSignalFull(worker, output);
    } else {
        emit putPipelineFavoriteSignalE(output, error_type, error_str);
        emit putPipelineFavoriteSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::putPipelineRun(const QString &organization, const QString &pipeline, const QString &run, const ::OpenAPI::OptionalParam<QString> &blocking, const ::OpenAPI::OptionalParam<qint32> &time_out_in_secs) {
    QString fullPath = QString(_serverConfigs["putPipelineRun"][_serverIndices.value("putPipelineRun")].URL()+"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString organizationPathParam("{");
        organizationPathParam.append("organization").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization"+pathSuffix : pathPrefix;
        fullPath.replace(organizationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization)));
    }
    
    {
        QString pipelinePathParam("{");
        pipelinePathParam.append("pipeline").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pipeline", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pipeline"+pathSuffix : pathPrefix;
        fullPath.replace(pipelinePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pipeline)));
    }
    
    {
        QString runPathParam("{");
        runPathParam.append("run").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "run", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"run"+pathSuffix : pathPrefix;
        fullPath.replace(runPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(run)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (blocking.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "blocking", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("blocking")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(blocking.value())));
    }
    if (time_out_in_secs.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeOutInSecs", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeOutInSecs")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(time_out_in_secs.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::putPipelineRunCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::putPipelineRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPipelineRun output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit putPipelineRunSignal(output);
        emit putPipelineRunSignalFull(worker, output);
    } else {
        emit putPipelineRunSignalE(output, error_type, error_str);
        emit putPipelineRunSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::search(const QString &q) {
    QString fullPath = QString(_serverConfigs["search"][_serverIndices.value("search")].URL()+"/blue/rest/search/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::searchCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::searchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchSignal(output);
        emit searchSignalFull(worker, output);
    } else {
        emit searchSignalE(output, error_type, error_str);
        emit searchSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::searchClasses(const QString &q) {
    QString fullPath = QString(_serverConfigs["searchClasses"][_serverIndices.value("searchClasses")].URL()+"/blue/rest/classes/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBlueOceanApi::searchClassesCallback);
    connect(this, &OAIBlueOceanApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBlueOceanApi::searchClassesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchClassesSignal(output);
        emit searchClassesSignalFull(worker, output);
    } else {
        emit searchClassesSignalE(output, error_type, error_str);
        emit searchClassesSignalEFull(worker, error_type, error_str);
    }
}

void OAIBlueOceanApi::tokenAvailable(){
  
    oauthToken token; 
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retreive a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));    
            qDebug() << "Could not retreive a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));    
            qDebug() << "Could not retreive a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));    
            qDebug() << "Could not retreive a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
