/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.5.1-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputer
    /// </summary>
    [DataContract]
    public partial class HudsonMasterComputer :  IEquatable<HudsonMasterComputer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputer" /> class.
        /// </summary>
        /// <param name="_class">_class.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="executors">executors.</param>
        /// <param name="icon">icon.</param>
        /// <param name="iconClassName">iconClassName.</param>
        /// <param name="idle">idle.</param>
        /// <param name="jnlpAgent">jnlpAgent.</param>
        /// <param name="launchSupported">launchSupported.</param>
        /// <param name="loadStatistics">loadStatistics.</param>
        /// <param name="manualLaunchAllowed">manualLaunchAllowed.</param>
        /// <param name="monitorData">monitorData.</param>
        /// <param name="numExecutors">numExecutors.</param>
        /// <param name="offline">offline.</param>
        /// <param name="offlineCause">offlineCause.</param>
        /// <param name="offlineCauseReason">offlineCauseReason.</param>
        /// <param name="temporarilyOffline">temporarilyOffline.</param>
        public HudsonMasterComputer(string _class = default(string), string displayName = default(string), List<HudsonMasterComputerexecutors> executors = default(List<HudsonMasterComputerexecutors>), string icon = default(string), string iconClassName = default(string), bool idle = default(bool), bool jnlpAgent = default(bool), bool launchSupported = default(bool), Label1 loadStatistics = default(Label1), bool manualLaunchAllowed = default(bool), HudsonMasterComputermonitorData monitorData = default(HudsonMasterComputermonitorData), int numExecutors = default(int), bool offline = default(bool), string offlineCause = default(string), string offlineCauseReason = default(string), bool temporarilyOffline = default(bool))
        {
            this.Class = _class;
            this.DisplayName = displayName;
            this.Executors = executors;
            this.Icon = icon;
            this.IconClassName = iconClassName;
            this.Idle = idle;
            this.JnlpAgent = jnlpAgent;
            this.LaunchSupported = launchSupported;
            this.LoadStatistics = loadStatistics;
            this.ManualLaunchAllowed = manualLaunchAllowed;
            this.MonitorData = monitorData;
            this.NumExecutors = numExecutors;
            this.Offline = offline;
            this.OfflineCause = offlineCause;
            this.OfflineCauseReason = offlineCauseReason;
            this.TemporarilyOffline = temporarilyOffline;
        }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string Class { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Executors
        /// </summary>
        [DataMember(Name="executors", EmitDefaultValue=false)]
        public List<HudsonMasterComputerexecutors> Executors { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets IconClassName
        /// </summary>
        [DataMember(Name="iconClassName", EmitDefaultValue=false)]
        public string IconClassName { get; set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [DataMember(Name="idle", EmitDefaultValue=false)]
        public bool Idle { get; set; }

        /// <summary>
        /// Gets or Sets JnlpAgent
        /// </summary>
        [DataMember(Name="jnlpAgent", EmitDefaultValue=false)]
        public bool JnlpAgent { get; set; }

        /// <summary>
        /// Gets or Sets LaunchSupported
        /// </summary>
        [DataMember(Name="launchSupported", EmitDefaultValue=false)]
        public bool LaunchSupported { get; set; }

        /// <summary>
        /// Gets or Sets LoadStatistics
        /// </summary>
        [DataMember(Name="loadStatistics", EmitDefaultValue=false)]
        public Label1 LoadStatistics { get; set; }

        /// <summary>
        /// Gets or Sets ManualLaunchAllowed
        /// </summary>
        [DataMember(Name="manualLaunchAllowed", EmitDefaultValue=false)]
        public bool ManualLaunchAllowed { get; set; }

        /// <summary>
        /// Gets or Sets MonitorData
        /// </summary>
        [DataMember(Name="monitorData", EmitDefaultValue=false)]
        public HudsonMasterComputermonitorData MonitorData { get; set; }

        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [DataMember(Name="numExecutors", EmitDefaultValue=false)]
        public int NumExecutors { get; set; }

        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [DataMember(Name="offline", EmitDefaultValue=false)]
        public bool Offline { get; set; }

        /// <summary>
        /// Gets or Sets OfflineCause
        /// </summary>
        [DataMember(Name="offlineCause", EmitDefaultValue=false)]
        public string OfflineCause { get; set; }

        /// <summary>
        /// Gets or Sets OfflineCauseReason
        /// </summary>
        [DataMember(Name="offlineCauseReason", EmitDefaultValue=false)]
        public string OfflineCauseReason { get; set; }

        /// <summary>
        /// Gets or Sets TemporarilyOffline
        /// </summary>
        [DataMember(Name="temporarilyOffline", EmitDefaultValue=false)]
        public bool TemporarilyOffline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonMasterComputer {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Executors: ").Append(Executors).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconClassName: ").Append(IconClassName).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  JnlpAgent: ").Append(JnlpAgent).Append("\n");
            sb.Append("  LaunchSupported: ").Append(LaunchSupported).Append("\n");
            sb.Append("  LoadStatistics: ").Append(LoadStatistics).Append("\n");
            sb.Append("  ManualLaunchAllowed: ").Append(ManualLaunchAllowed).Append("\n");
            sb.Append("  MonitorData: ").Append(MonitorData).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  OfflineCause: ").Append(OfflineCause).Append("\n");
            sb.Append("  OfflineCauseReason: ").Append(OfflineCauseReason).Append("\n");
            sb.Append("  TemporarilyOffline: ").Append(TemporarilyOffline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HudsonMasterComputer);
        }

        /// <summary>
        /// Returns true if HudsonMasterComputer instances are equal
        /// </summary>
        /// <param name="input">Instance of HudsonMasterComputer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonMasterComputer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Executors == input.Executors ||
                    this.Executors != null &&
                    input.Executors != null &&
                    this.Executors.SequenceEqual(input.Executors)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IconClassName == input.IconClassName ||
                    (this.IconClassName != null &&
                    this.IconClassName.Equals(input.IconClassName))
                ) && 
                (
                    this.Idle == input.Idle ||
                    (this.Idle != null &&
                    this.Idle.Equals(input.Idle))
                ) && 
                (
                    this.JnlpAgent == input.JnlpAgent ||
                    (this.JnlpAgent != null &&
                    this.JnlpAgent.Equals(input.JnlpAgent))
                ) && 
                (
                    this.LaunchSupported == input.LaunchSupported ||
                    (this.LaunchSupported != null &&
                    this.LaunchSupported.Equals(input.LaunchSupported))
                ) && 
                (
                    this.LoadStatistics == input.LoadStatistics ||
                    (this.LoadStatistics != null &&
                    this.LoadStatistics.Equals(input.LoadStatistics))
                ) && 
                (
                    this.ManualLaunchAllowed == input.ManualLaunchAllowed ||
                    (this.ManualLaunchAllowed != null &&
                    this.ManualLaunchAllowed.Equals(input.ManualLaunchAllowed))
                ) && 
                (
                    this.MonitorData == input.MonitorData ||
                    (this.MonitorData != null &&
                    this.MonitorData.Equals(input.MonitorData))
                ) && 
                (
                    this.NumExecutors == input.NumExecutors ||
                    (this.NumExecutors != null &&
                    this.NumExecutors.Equals(input.NumExecutors))
                ) && 
                (
                    this.Offline == input.Offline ||
                    (this.Offline != null &&
                    this.Offline.Equals(input.Offline))
                ) && 
                (
                    this.OfflineCause == input.OfflineCause ||
                    (this.OfflineCause != null &&
                    this.OfflineCause.Equals(input.OfflineCause))
                ) && 
                (
                    this.OfflineCauseReason == input.OfflineCauseReason ||
                    (this.OfflineCauseReason != null &&
                    this.OfflineCauseReason.Equals(input.OfflineCauseReason))
                ) && 
                (
                    this.TemporarilyOffline == input.TemporarilyOffline ||
                    (this.TemporarilyOffline != null &&
                    this.TemporarilyOffline.Equals(input.TemporarilyOffline))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Class != null)
                    hashCode = hashCode * 59 + this.Class.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Executors != null)
                    hashCode = hashCode * 59 + this.Executors.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.IconClassName != null)
                    hashCode = hashCode * 59 + this.IconClassName.GetHashCode();
                if (this.Idle != null)
                    hashCode = hashCode * 59 + this.Idle.GetHashCode();
                if (this.JnlpAgent != null)
                    hashCode = hashCode * 59 + this.JnlpAgent.GetHashCode();
                if (this.LaunchSupported != null)
                    hashCode = hashCode * 59 + this.LaunchSupported.GetHashCode();
                if (this.LoadStatistics != null)
                    hashCode = hashCode * 59 + this.LoadStatistics.GetHashCode();
                if (this.ManualLaunchAllowed != null)
                    hashCode = hashCode * 59 + this.ManualLaunchAllowed.GetHashCode();
                if (this.MonitorData != null)
                    hashCode = hashCode * 59 + this.MonitorData.GetHashCode();
                if (this.NumExecutors != null)
                    hashCode = hashCode * 59 + this.NumExecutors.GetHashCode();
                if (this.Offline != null)
                    hashCode = hashCode * 59 + this.Offline.GetHashCode();
                if (this.OfflineCause != null)
                    hashCode = hashCode * 59 + this.OfflineCause.GetHashCode();
                if (this.OfflineCauseReason != null)
                    hashCode = hashCode * 59 + this.OfflineCauseReason.GetHashCode();
                if (this.TemporarilyOffline != null)
                    hashCode = hashCode * 59 + this.TemporarilyOffline.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
