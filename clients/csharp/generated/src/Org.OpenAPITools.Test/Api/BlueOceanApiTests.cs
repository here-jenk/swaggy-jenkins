/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing BlueOceanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BlueOceanApiTests
    {
        private BlueOceanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BlueOceanApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BlueOceanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' BlueOceanApi
            //Assert.IsInstanceOf(typeof(BlueOceanApi), instance);
        }

        
        /// <summary>
        /// Test DeletePipelineQueueItem
        /// </summary>
        [Test]
        public void DeletePipelineQueueItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string queue = null;
            //instance.DeletePipelineQueueItem(organization, pipeline, queue);
            
        }
        
        /// <summary>
        /// Test GetAuthenticatedUser
        /// </summary>
        [Test]
        public void GetAuthenticatedUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //var response = instance.GetAuthenticatedUser(organization);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test GetClasses
        /// </summary>
        [Test]
        public void GetClassesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _class = null;
            //var response = instance.GetClasses(_class);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetJsonWebKey
        /// </summary>
        [Test]
        public void GetJsonWebKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int key = null;
            //var response = instance.GetJsonWebKey(key);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetJsonWebToken
        /// </summary>
        [Test]
        public void GetJsonWebTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? expiryTimeInMins = null;
            //int? maxExpiryTimeInMins = null;
            //var response = instance.GetJsonWebToken(expiryTimeInMins, maxExpiryTimeInMins);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetOrganisation
        /// </summary>
        [Test]
        public void GetOrganisationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //var response = instance.GetOrganisation(organization);
            //Assert.IsInstanceOf(typeof(Organisation), response, "response is Organisation");
        }
        
        /// <summary>
        /// Test GetOrganisations
        /// </summary>
        [Test]
        public void GetOrganisationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrganisations();
            //Assert.IsInstanceOf(typeof(List<Organisation>), response, "response is List<Organisation>");
        }
        
        /// <summary>
        /// Test GetPipeline
        /// </summary>
        [Test]
        public void GetPipelineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.GetPipeline(organization, pipeline);
            //Assert.IsInstanceOf(typeof(Pipeline), response, "response is Pipeline");
        }
        
        /// <summary>
        /// Test GetPipelineActivities
        /// </summary>
        [Test]
        public void GetPipelineActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.GetPipelineActivities(organization, pipeline);
            //Assert.IsInstanceOf(typeof(List<PipelineActivity>), response, "response is List<PipelineActivity>");
        }
        
        /// <summary>
        /// Test GetPipelineBranch
        /// </summary>
        [Test]
        public void GetPipelineBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string branch = null;
            //var response = instance.GetPipelineBranch(organization, pipeline, branch);
            //Assert.IsInstanceOf(typeof(BranchImpl), response, "response is BranchImpl");
        }
        
        /// <summary>
        /// Test GetPipelineBranchRun
        /// </summary>
        [Test]
        public void GetPipelineBranchRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string branch = null;
            //string run = null;
            //var response = instance.GetPipelineBranchRun(organization, pipeline, branch, run);
            //Assert.IsInstanceOf(typeof(PipelineRun), response, "response is PipelineRun");
        }
        
        /// <summary>
        /// Test GetPipelineBranches
        /// </summary>
        [Test]
        public void GetPipelineBranchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.GetPipelineBranches(organization, pipeline);
            //Assert.IsInstanceOf(typeof(MultibranchPipeline), response, "response is MultibranchPipeline");
        }
        
        /// <summary>
        /// Test GetPipelineFolder
        /// </summary>
        [Test]
        public void GetPipelineFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string folder = null;
            //var response = instance.GetPipelineFolder(organization, folder);
            //Assert.IsInstanceOf(typeof(PipelineFolderImpl), response, "response is PipelineFolderImpl");
        }
        
        /// <summary>
        /// Test GetPipelineFolderPipeline
        /// </summary>
        [Test]
        public void GetPipelineFolderPipelineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string folder = null;
            //var response = instance.GetPipelineFolderPipeline(organization, pipeline, folder);
            //Assert.IsInstanceOf(typeof(PipelineImpl), response, "response is PipelineImpl");
        }
        
        /// <summary>
        /// Test GetPipelineQueue
        /// </summary>
        [Test]
        public void GetPipelineQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.GetPipelineQueue(organization, pipeline);
            //Assert.IsInstanceOf(typeof(List<QueueItemImpl>), response, "response is List<QueueItemImpl>");
        }
        
        /// <summary>
        /// Test GetPipelineRun
        /// </summary>
        [Test]
        public void GetPipelineRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //var response = instance.GetPipelineRun(organization, pipeline, run);
            //Assert.IsInstanceOf(typeof(PipelineRun), response, "response is PipelineRun");
        }
        
        /// <summary>
        /// Test GetPipelineRunLog
        /// </summary>
        [Test]
        public void GetPipelineRunLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //int? start = null;
            //bool? download = null;
            //var response = instance.GetPipelineRunLog(organization, pipeline, run, start, download);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetPipelineRunNode
        /// </summary>
        [Test]
        public void GetPipelineRunNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //string node = null;
            //var response = instance.GetPipelineRunNode(organization, pipeline, run, node);
            //Assert.IsInstanceOf(typeof(PipelineRunNode), response, "response is PipelineRunNode");
        }
        
        /// <summary>
        /// Test GetPipelineRunNodeStep
        /// </summary>
        [Test]
        public void GetPipelineRunNodeStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //string node = null;
            //string step = null;
            //var response = instance.GetPipelineRunNodeStep(organization, pipeline, run, node, step);
            //Assert.IsInstanceOf(typeof(PipelineStepImpl), response, "response is PipelineStepImpl");
        }
        
        /// <summary>
        /// Test GetPipelineRunNodeStepLog
        /// </summary>
        [Test]
        public void GetPipelineRunNodeStepLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //string node = null;
            //string step = null;
            //var response = instance.GetPipelineRunNodeStepLog(organization, pipeline, run, node, step);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetPipelineRunNodeSteps
        /// </summary>
        [Test]
        public void GetPipelineRunNodeStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //string node = null;
            //var response = instance.GetPipelineRunNodeSteps(organization, pipeline, run, node);
            //Assert.IsInstanceOf(typeof(List<PipelineStepImpl>), response, "response is List<PipelineStepImpl>");
        }
        
        /// <summary>
        /// Test GetPipelineRunNodes
        /// </summary>
        [Test]
        public void GetPipelineRunNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //var response = instance.GetPipelineRunNodes(organization, pipeline, run);
            //Assert.IsInstanceOf(typeof(List<PipelineRunNode>), response, "response is List<PipelineRunNode>");
        }
        
        /// <summary>
        /// Test GetPipelineRuns
        /// </summary>
        [Test]
        public void GetPipelineRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.GetPipelineRuns(organization, pipeline);
            //Assert.IsInstanceOf(typeof(List<PipelineRun>), response, "response is List<PipelineRun>");
        }
        
        /// <summary>
        /// Test GetPipelines
        /// </summary>
        [Test]
        public void GetPipelinesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //var response = instance.GetPipelines(organization);
            //Assert.IsInstanceOf(typeof(List<Pipeline>), response, "response is List<Pipeline>");
        }
        
        /// <summary>
        /// Test GetSCM
        /// </summary>
        [Test]
        public void GetSCMTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string scm = null;
            //var response = instance.GetSCM(organization, scm);
            //Assert.IsInstanceOf(typeof(GithubScm), response, "response is GithubScm");
        }
        
        /// <summary>
        /// Test GetSCMOrganisationRepositories
        /// </summary>
        [Test]
        public void GetSCMOrganisationRepositoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string scm = null;
            //string scmOrganisation = null;
            //string credentialId = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //var response = instance.GetSCMOrganisationRepositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
            //Assert.IsInstanceOf(typeof(List<GithubOrganization>), response, "response is List<GithubOrganization>");
        }
        
        /// <summary>
        /// Test GetSCMOrganisationRepository
        /// </summary>
        [Test]
        public void GetSCMOrganisationRepositoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string scm = null;
            //string scmOrganisation = null;
            //string repository = null;
            //string credentialId = null;
            //var response = instance.GetSCMOrganisationRepository(organization, scm, scmOrganisation, repository, credentialId);
            //Assert.IsInstanceOf(typeof(List<GithubOrganization>), response, "response is List<GithubOrganization>");
        }
        
        /// <summary>
        /// Test GetSCMOrganisations
        /// </summary>
        [Test]
        public void GetSCMOrganisationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string scm = null;
            //string credentialId = null;
            //var response = instance.GetSCMOrganisations(organization, scm, credentialId);
            //Assert.IsInstanceOf(typeof(List<GithubOrganization>), response, "response is List<GithubOrganization>");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string user = null;
            //var response = instance.GetUser(organization, user);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserFavorites
        /// </summary>
        [Test]
        public void GetUserFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string user = null;
            //var response = instance.GetUserFavorites(user);
            //Assert.IsInstanceOf(typeof(List<FavoriteImpl>), response, "response is List<FavoriteImpl>");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //var response = instance.GetUsers(organization);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test PostPipelineRun
        /// </summary>
        [Test]
        public void PostPipelineRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //var response = instance.PostPipelineRun(organization, pipeline, run);
            //Assert.IsInstanceOf(typeof(QueueItemImpl), response, "response is QueueItemImpl");
        }
        
        /// <summary>
        /// Test PostPipelineRuns
        /// </summary>
        [Test]
        public void PostPipelineRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //var response = instance.PostPipelineRuns(organization, pipeline);
            //Assert.IsInstanceOf(typeof(QueueItemImpl), response, "response is QueueItemImpl");
        }
        
        /// <summary>
        /// Test PutPipelineFavorite
        /// </summary>
        [Test]
        public void PutPipelineFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //bool body = null;
            //var response = instance.PutPipelineFavorite(organization, pipeline, body);
            //Assert.IsInstanceOf(typeof(FavoriteImpl), response, "response is FavoriteImpl");
        }
        
        /// <summary>
        /// Test PutPipelineRun
        /// </summary>
        [Test]
        public void PutPipelineRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string pipeline = null;
            //string run = null;
            //string blocking = null;
            //int? timeOutInSecs = null;
            //var response = instance.PutPipelineRun(organization, pipeline, run, blocking, timeOutInSecs);
            //Assert.IsInstanceOf(typeof(PipelineRun), response, "response is PipelineRun");
        }
        
        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.Search(q);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test SearchClasses
        /// </summary>
        [Test]
        public void SearchClassesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.SearchClasses(q);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
    }

}
