<?php
/**
 * AbstractBlueOceanApi
 *
 * PHP version 7
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractBlueOceanApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractBlueOceanApi
{

    /**
     * @var ContainerInterface Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface $container Slim app container instance
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }


    /**
     * DELETE deletePipelineQueueItem
     * Notes: Delete queue item from an organization pipeline queue
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function deletePipelineQueueItem(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $queue = $args['queue'];
        $message = "How about implementing deletePipelineQueueItem as a DELETE method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getAuthenticatedUser
     * Notes: Retrieve authenticated user details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getAuthenticatedUser(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $message = "How about implementing getAuthenticatedUser as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getClasses
     * Notes: Get a list of class names supported by a given class
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getClasses(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $class = $args['class'];
        $message = "How about implementing getClasses as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getJsonWebKey
     * Notes: Retrieve JSON Web Key
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getJsonWebKey(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $key = $args['key'];
        $message = "How about implementing getJsonWebKey as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getJsonWebToken
     * Notes: Retrieve JSON Web Token
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getJsonWebToken(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $expiryTimeInMins = $request->getQueryParam('expiryTimeInMins');
        $maxExpiryTimeInMins = $request->getQueryParam('maxExpiryTimeInMins');
        $message = "How about implementing getJsonWebToken as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getOrganisation
     * Notes: Retrieve organization details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getOrganisation(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $message = "How about implementing getOrganisation as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getOrganisations
     * Notes: Retrieve all organizations details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getOrganisations(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $message = "How about implementing getOrganisations as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipeline
     * Notes: Retrieve pipeline details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing getPipeline as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineActivities
     * Notes: Retrieve all activities details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineActivities(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing getPipelineActivities as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineBranch
     * Notes: Retrieve branch details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineBranch(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $branch = $args['branch'];
        $message = "How about implementing getPipelineBranch as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineBranchRun
     * Notes: Retrieve branch run details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineBranchRun(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $branch = $args['branch'];
        $run = $args['run'];
        $message = "How about implementing getPipelineBranchRun as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineBranches
     * Notes: Retrieve all branches details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineBranches(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing getPipelineBranches as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineFolder
     * Notes: Retrieve pipeline folder for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineFolder(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $folder = $args['folder'];
        $message = "How about implementing getPipelineFolder as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineFolderPipeline
     * Notes: Retrieve pipeline details for an organization folder
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineFolderPipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $folder = $args['folder'];
        $message = "How about implementing getPipelineFolderPipeline as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineQueue
     * Notes: Retrieve queue details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineQueue(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing getPipelineQueue as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRun
     * Notes: Retrieve run details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRun(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $message = "How about implementing getPipelineRun as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunLog
     * Notes: Get log for a pipeline run
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunLog(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $queryParams = $request->getQueryParams();
        $start = $request->getQueryParam('start');
        $download = $request->getQueryParam('download');
        $message = "How about implementing getPipelineRunLog as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunNode
     * Notes: Retrieve run node details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunNode(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $message = "How about implementing getPipelineRunNode as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunNodeStep
     * Notes: Retrieve run node details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunNodeStep(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $step = $args['step'];
        $message = "How about implementing getPipelineRunNodeStep as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunNodeStepLog
     * Notes: Get log for a pipeline run node step
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunNodeStepLog(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $step = $args['step'];
        $message = "How about implementing getPipelineRunNodeStepLog as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunNodeSteps
     * Notes: Retrieve run node steps details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunNodeSteps(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $message = "How about implementing getPipelineRunNodeSteps as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRunNodes
     * Notes: Retrieve run nodes details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRunNodes(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $message = "How about implementing getPipelineRunNodes as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelineRuns
     * Notes: Retrieve all runs details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelineRuns(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing getPipelineRuns as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getPipelines
     * Notes: Retrieve all pipelines details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelines(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $message = "How about implementing getPipelines as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSCM
     * Notes: Retrieve SCM details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSCM(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $message = "How about implementing getSCM as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSCMOrganisationRepositories
     * Notes: Retrieve SCM organization repositories details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSCMOrganisationRepositories(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $scmOrganisation = $args['scmOrganisation'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $pageSize = $request->getQueryParam('pageSize');
        $pageNumber = $request->getQueryParam('pageNumber');
        $message = "How about implementing getSCMOrganisationRepositories as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSCMOrganisationRepository
     * Notes: Retrieve SCM organization repository details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSCMOrganisationRepository(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $scmOrganisation = $args['scmOrganisation'];
        $repository = $args['repository'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $message = "How about implementing getSCMOrganisationRepository as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSCMOrganisations
     * Notes: Retrieve SCM organizations details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSCMOrganisations(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $message = "How about implementing getSCMOrganisations as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getUser
     * Notes: Retrieve user details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getUser(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $user = $args['user'];
        $message = "How about implementing getUser as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getUserFavorites
     * Notes: Retrieve user favorites details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getUserFavorites(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $user = $args['user'];
        $message = "How about implementing getUserFavorites as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getUsers
     * Notes: Retrieve users details for an organization
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getUsers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $message = "How about implementing getUsers as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * POST postPipelineRun
     * Notes: Replay an organization pipeline run
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function postPipelineRun(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $message = "How about implementing postPipelineRun as a POST method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * POST postPipelineRuns
     * Notes: Start a build for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function postPipelineRuns(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $message = "How about implementing postPipelineRuns as a POST method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * PUT putPipelineFavorite
     * Notes: Favorite/unfavorite a pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function putPipelineFavorite(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $body = $request->getParsedBody();
        $message = "How about implementing putPipelineFavorite as a PUT method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * PUT putPipelineRun
     * Notes: Stop a build of an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function putPipelineRun(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $queryParams = $request->getQueryParams();
        $blocking = $request->getQueryParam('blocking');
        $timeOutInSecs = $request->getQueryParam('timeOutInSecs');
        $message = "How about implementing putPipelineRun as a PUT method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET search
     * Notes: Search for any resource details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function search(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $q = $request->getQueryParam('q');
        $message = "How about implementing search as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET searchClasses
     * Notes: Get classes details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function searchClasses(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $q = $request->getQueryParam('q');
        $message = "How about implementing searchClasses as a GET method in OpenAPIServer\Api\BlueOceanApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }
}
