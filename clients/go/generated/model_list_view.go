/*
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

API version: 1.5.1-pre.0
Contact: blah@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ListView struct for ListView
type ListView struct {
	Class *string `json:"_class,omitempty"`
	Description *string `json:"description,omitempty"`
	Jobs []FreeStyleProject `json:"jobs,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewListView instantiates a new ListView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListView() *ListView {
	this := ListView{}
	return &this
}

// NewListViewWithDefaults instantiates a new ListView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListViewWithDefaults() *ListView {
	this := ListView{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ListView) GetClass() string {
	if o == nil || o.Class == nil {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListView) GetClassOk() (*string, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ListView) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ListView) SetClass(v string) {
	o.Class = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListView) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListView) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ListView) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListView) SetDescription(v string) {
	o.Description = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *ListView) GetJobs() []FreeStyleProject {
	if o == nil || o.Jobs == nil {
		var ret []FreeStyleProject
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListView) GetJobsOk() ([]FreeStyleProject, bool) {
	if o == nil || o.Jobs == nil {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *ListView) HasJobs() bool {
	if o != nil && o.Jobs != nil {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []FreeStyleProject and assigns it to the Jobs field.
func (o *ListView) SetJobs(v []FreeStyleProject) {
	o.Jobs = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListView) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ListView) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListView) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ListView) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ListView) SetUrl(v string) {
	o.Url = &v
}

func (o ListView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Class != nil {
		toSerialize["_class"] = o.Class
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Jobs != nil {
		toSerialize["jobs"] = o.Jobs
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableListView struct {
	value *ListView
	isSet bool
}

func (v NullableListView) Get() *ListView {
	return v.value
}

func (v *NullableListView) Set(val *ListView) {
	v.value = val
	v.isSet = true
}

func (v NullableListView) IsSet() bool {
	return v.isSet
}

func (v *NullableListView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListView(val *ListView) *NullableListView {
	return &NullableListView{value: val, isSet: true}
}

func (v NullableListView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


