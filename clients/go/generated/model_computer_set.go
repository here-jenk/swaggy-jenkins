/*
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

API version: 1.1.2-pre.0
Contact: blah@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ComputerSet struct for ComputerSet
type ComputerSet struct {
	Class *string `json:"_class,omitempty"`
	BusyExecutors *int32 `json:"busyExecutors,omitempty"`
	Computer []HudsonMasterComputer `json:"computer,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	TotalExecutors *int32 `json:"totalExecutors,omitempty"`
}

// NewComputerSet instantiates a new ComputerSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerSet() *ComputerSet {
	this := ComputerSet{}
	return &this
}

// NewComputerSetWithDefaults instantiates a new ComputerSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerSetWithDefaults() *ComputerSet {
	this := ComputerSet{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ComputerSet) GetClass() string {
	if o == nil || o.Class == nil {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSet) GetClassOk() (*string, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ComputerSet) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ComputerSet) SetClass(v string) {
	o.Class = &v
}

// GetBusyExecutors returns the BusyExecutors field value if set, zero value otherwise.
func (o *ComputerSet) GetBusyExecutors() int32 {
	if o == nil || o.BusyExecutors == nil {
		var ret int32
		return ret
	}
	return *o.BusyExecutors
}

// GetBusyExecutorsOk returns a tuple with the BusyExecutors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSet) GetBusyExecutorsOk() (*int32, bool) {
	if o == nil || o.BusyExecutors == nil {
		return nil, false
	}
	return o.BusyExecutors, true
}

// HasBusyExecutors returns a boolean if a field has been set.
func (o *ComputerSet) HasBusyExecutors() bool {
	if o != nil && o.BusyExecutors != nil {
		return true
	}

	return false
}

// SetBusyExecutors gets a reference to the given int32 and assigns it to the BusyExecutors field.
func (o *ComputerSet) SetBusyExecutors(v int32) {
	o.BusyExecutors = &v
}

// GetComputer returns the Computer field value if set, zero value otherwise.
func (o *ComputerSet) GetComputer() []HudsonMasterComputer {
	if o == nil || o.Computer == nil {
		var ret []HudsonMasterComputer
		return ret
	}
	return o.Computer
}

// GetComputerOk returns a tuple with the Computer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSet) GetComputerOk() ([]HudsonMasterComputer, bool) {
	if o == nil || o.Computer == nil {
		return nil, false
	}
	return o.Computer, true
}

// HasComputer returns a boolean if a field has been set.
func (o *ComputerSet) HasComputer() bool {
	if o != nil && o.Computer != nil {
		return true
	}

	return false
}

// SetComputer gets a reference to the given []HudsonMasterComputer and assigns it to the Computer field.
func (o *ComputerSet) SetComputer(v []HudsonMasterComputer) {
	o.Computer = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ComputerSet) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSet) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ComputerSet) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ComputerSet) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetTotalExecutors returns the TotalExecutors field value if set, zero value otherwise.
func (o *ComputerSet) GetTotalExecutors() int32 {
	if o == nil || o.TotalExecutors == nil {
		var ret int32
		return ret
	}
	return *o.TotalExecutors
}

// GetTotalExecutorsOk returns a tuple with the TotalExecutors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSet) GetTotalExecutorsOk() (*int32, bool) {
	if o == nil || o.TotalExecutors == nil {
		return nil, false
	}
	return o.TotalExecutors, true
}

// HasTotalExecutors returns a boolean if a field has been set.
func (o *ComputerSet) HasTotalExecutors() bool {
	if o != nil && o.TotalExecutors != nil {
		return true
	}

	return false
}

// SetTotalExecutors gets a reference to the given int32 and assigns it to the TotalExecutors field.
func (o *ComputerSet) SetTotalExecutors(v int32) {
	o.TotalExecutors = &v
}

func (o ComputerSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Class != nil {
		toSerialize["_class"] = o.Class
	}
	if o.BusyExecutors != nil {
		toSerialize["busyExecutors"] = o.BusyExecutors
	}
	if o.Computer != nil {
		toSerialize["computer"] = o.Computer
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.TotalExecutors != nil {
		toSerialize["totalExecutors"] = o.TotalExecutors
	}
	return json.Marshal(toSerialize)
}

type NullableComputerSet struct {
	value *ComputerSet
	isSet bool
}

func (v NullableComputerSet) Get() *ComputerSet {
	return v.value
}

func (v *NullableComputerSet) Set(val *ComputerSet) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerSet) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerSet(val *ComputerSet) *NullableComputerSet {
	return &NullableComputerSet{value: val, isSet: true}
}

func (v NullableComputerSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


