/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * API version: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type FreeStyleProject struct {

	Class string `json:"_class,omitempty"`

	Name string `json:"name,omitempty"`

	Url string `json:"url,omitempty"`

	Color string `json:"color,omitempty"`

	Actions []FreeStyleProjectactions `json:"actions,omitempty"`

	Description string `json:"description,omitempty"`

	DisplayName string `json:"displayName,omitempty"`

	DisplayNameOrNull string `json:"displayNameOrNull,omitempty"`

	FullDisplayName string `json:"fullDisplayName,omitempty"`

	FullName string `json:"fullName,omitempty"`

	Buildable bool `json:"buildable,omitempty"`

	Builds []FreeStyleBuild `json:"builds,omitempty"`

	FirstBuild FreeStyleBuild `json:"firstBuild,omitempty"`

	HealthReport []FreeStyleProjecthealthReport `json:"healthReport,omitempty"`

	InQueue bool `json:"inQueue,omitempty"`

	KeepDependencies bool `json:"keepDependencies,omitempty"`

	LastBuild FreeStyleBuild `json:"lastBuild,omitempty"`

	LastCompletedBuild FreeStyleBuild `json:"lastCompletedBuild,omitempty"`

	LastFailedBuild string `json:"lastFailedBuild,omitempty"`

	LastStableBuild FreeStyleBuild `json:"lastStableBuild,omitempty"`

	LastSuccessfulBuild FreeStyleBuild `json:"lastSuccessfulBuild,omitempty"`

	LastUnstableBuild string `json:"lastUnstableBuild,omitempty"`

	LastUnsuccessfulBuild string `json:"lastUnsuccessfulBuild,omitempty"`

	NextBuildNumber int32 `json:"nextBuildNumber,omitempty"`

	QueueItem string `json:"queueItem,omitempty"`

	ConcurrentBuild bool `json:"concurrentBuild,omitempty"`

	Scm NullScm `json:"scm,omitempty"`
}

// AssertFreeStyleProjectRequired checks if the required fields are not zero-ed
func AssertFreeStyleProjectRequired(obj FreeStyleProject) error {
	for _, el := range obj.Actions {
		if err := AssertFreeStyleProjectactionsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Builds {
		if err := AssertFreeStyleBuildRequired(el); err != nil {
			return err
		}
	}
	if err := AssertFreeStyleBuildRequired(obj.FirstBuild); err != nil {
		return err
	}
	for _, el := range obj.HealthReport {
		if err := AssertFreeStyleProjecthealthReportRequired(el); err != nil {
			return err
		}
	}
	if err := AssertFreeStyleBuildRequired(obj.LastBuild); err != nil {
		return err
	}
	if err := AssertFreeStyleBuildRequired(obj.LastCompletedBuild); err != nil {
		return err
	}
	if err := AssertFreeStyleBuildRequired(obj.LastStableBuild); err != nil {
		return err
	}
	if err := AssertFreeStyleBuildRequired(obj.LastSuccessfulBuild); err != nil {
		return err
	}
	if err := AssertNullScmRequired(obj.Scm); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFreeStyleProjectRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of FreeStyleProject (e.g. [][]FreeStyleProject), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFreeStyleProjectRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFreeStyleProject, ok := obj.(FreeStyleProject)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFreeStyleProjectRequired(aFreeStyleProject)
	})
}
