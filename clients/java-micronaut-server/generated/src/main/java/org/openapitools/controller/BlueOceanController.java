/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import org.openapitools.model.BranchImpl;
import org.openapitools.model.FavoriteImpl;
import org.openapitools.model.GithubOrganization;
import org.openapitools.model.GithubScm;
import org.openapitools.model.MultibranchPipeline;
import org.openapitools.model.Organisation;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineActivity;
import org.openapitools.model.PipelineFolderImpl;
import org.openapitools.model.PipelineImpl;
import org.openapitools.model.PipelineRun;
import org.openapitools.model.PipelineRunNode;
import org.openapitools.model.PipelineStepImpl;
import org.openapitools.model.QueueItemImpl;
import org.openapitools.model.UNKNOWN_BASE_TYPE;
import org.openapitools.model.User;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-02-10T09:45:45.459643Z[Etc/UTC]")
@Controller("${context-path}")
public class BlueOceanController {
    /**
     * Delete queue item from an organization pipeline queue
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     */
    @ApiOperation(
        value = "",
        nickname = "deletePipelineQueueItem",
        notes = "Delete queue item from an organization pipeline queue",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully deleted queue item"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Delete(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> deletePipelineQueueItem(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="queue") @NotNull String queue
    ) {
        // TODO implement deletePipelineQueueItem() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve authenticated user details for an organization
     *
     * @param organization Name of the organization (required)
     * @return User
     */
    @ApiOperation(
        value = "",
        nickname = "getAuthenticatedUser",
        notes = "Retrieve authenticated user details for an organization",
        response = User.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved authenticated user details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/user/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<User> getAuthenticatedUser(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getAuthenticatedUser() body;
        Mono<User> result = Mono.empty();
        return result;
    }

    /**
     * Get a list of class names supported by a given class
     *
     * @param propertyClass Name of the class (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getClasses",
        notes = "Get a list of class names supported by a given class",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved class names", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/classes/{class}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> getClasses(
        @PathVariable(value="class") @NotNull String propertyClass
    ) {
        // TODO implement getClasses() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve JSON Web Key
     *
     * @param key Key ID received as part of JWT header field kid (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getJsonWebKey",
        notes = "Retrieve JSON Web Key",
        response = String.class,
        authorizations = {},
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved JWT token", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/jwt-auth/jwks/{key}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_ANONYMOUS)
    public Mono<String> getJsonWebKey(
        @PathVariable(value="key") @NotNull Integer key
    ) {
        // TODO implement getJsonWebKey() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve JSON Web Token
     *
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getJsonWebToken",
        notes = "Retrieve JSON Web Token",
        response = String.class,
        authorizations = {},
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved JWT token", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/jwt-auth/token")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_ANONYMOUS)
    public Mono<String> getJsonWebToken(
        @QueryValue(value="expiryTimeInMins") @Nullable Integer expiryTimeInMins, 
        @QueryValue(value="maxExpiryTimeInMins") @Nullable Integer maxExpiryTimeInMins
    ) {
        // TODO implement getJsonWebToken() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve organization details
     *
     * @param organization Name of the organization (required)
     * @return Organisation
     */
    @ApiOperation(
        value = "",
        nickname = "getOrganisation",
        notes = "Retrieve organization details",
        response = Organisation.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Organisation.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance")})
    @Get(uri="/blue/rest/organizations/{organization}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Organisation> getOrganisation(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getOrganisation() body;
        Mono<Organisation> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve all organizations details
     *
     * @return List&lt;Organisation&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getOrganisations",
        notes = "Retrieve all organizations details",
        response = Organisation.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Organisation.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<Organisation>> getOrganisations() {
        // TODO implement getOrganisations() body;
        Mono<List<Organisation>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve pipeline details for an organization
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Pipeline
     */
    @ApiOperation(
        value = "",
        nickname = "getPipeline",
        notes = "Retrieve pipeline details for an organization",
        response = Pipeline.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Pipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Pipeline> getPipeline(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipeline() body;
        Mono<Pipeline> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve all activities details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineActivity&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineActivities",
        notes = "Retrieve all activities details for an organization pipeline",
        response = PipelineActivity.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved all activities details", response = PipelineActivity.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<PipelineActivity>> getPipelineActivities(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineActivities() body;
        Mono<List<PipelineActivity>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve branch details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return BranchImpl
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineBranch",
        notes = "Retrieve branch details for an organization pipeline",
        response = BranchImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved branch details", response = BranchImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<BranchImpl> getPipelineBranch(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="branch") @NotNull String branch
    ) {
        // TODO implement getPipelineBranch() body;
        Mono<BranchImpl> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve branch run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineBranchRun",
        notes = "Retrieve branch run details for an organization pipeline",
        response = PipelineRun.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineRun> getPipelineBranchRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="branch") @NotNull String branch, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineBranchRun() body;
        Mono<PipelineRun> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve all branches details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return MultibranchPipeline
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineBranches",
        notes = "Retrieve all branches details for an organization pipeline",
        response = MultibranchPipeline.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved all branches details", response = MultibranchPipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<MultibranchPipeline> getPipelineBranches(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineBranches() body;
        Mono<MultibranchPipeline> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve pipeline folder for an organization
     *
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return PipelineFolderImpl
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineFolder",
        notes = "Retrieve pipeline folder for an organization",
        response = PipelineFolderImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved folder details", response = PipelineFolderImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{folder}/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineFolderImpl> getPipelineFolder(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="folder") @NotNull String folder
    ) {
        // TODO implement getPipelineFolder() body;
        Mono<PipelineFolderImpl> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve pipeline details for an organization folder
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return PipelineImpl
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineFolderPipeline",
        notes = "Retrieve pipeline details for an organization folder",
        response = PipelineImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = PipelineImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineImpl> getPipelineFolderPipeline(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="folder") @NotNull String folder
    ) {
        // TODO implement getPipelineFolderPipeline() body;
        Mono<PipelineImpl> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve queue details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;QueueItemImpl&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineQueue",
        notes = "Retrieve queue details for an organization pipeline",
        response = QueueItemImpl.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved queue details", response = QueueItemImpl.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<QueueItemImpl>> getPipelineQueue(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineQueue() body;
        Mono<List<QueueItemImpl>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRun",
        notes = "Retrieve run details for an organization pipeline",
        response = PipelineRun.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineRun> getPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineRun() body;
        Mono<PipelineRun> result = Mono.empty();
        return result;
    }

    /**
     * Get log for a pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunLog",
        notes = "Get log for a pipeline run",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> getPipelineRunLog(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @QueryValue(value="start") @Nullable Integer start, 
        @QueryValue(value="download") @Nullable Boolean download
    ) {
        // TODO implement getPipelineRunLog() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return PipelineRunNode
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunNode",
        notes = "Retrieve run node details for an organization pipeline",
        response = PipelineRunNode.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run node details", response = PipelineRunNode.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineRunNode> getPipelineRunNode(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node
    ) {
        // TODO implement getPipelineRunNode() body;
        Mono<PipelineRunNode> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return PipelineStepImpl
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunNodeStep",
        notes = "Retrieve run node details for an organization pipeline",
        response = PipelineStepImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run node step details", response = PipelineStepImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineStepImpl> getPipelineRunNodeStep(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node, 
        @PathVariable(value="step") @NotNull String step
    ) {
        // TODO implement getPipelineRunNodeStep() body;
        Mono<PipelineStepImpl> result = Mono.empty();
        return result;
    }

    /**
     * Get log for a pipeline run node step
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunNodeStepLog",
        notes = "Get log for a pipeline run node step",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run node step log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> getPipelineRunNodeStepLog(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node, 
        @PathVariable(value="step") @NotNull String step
    ) {
        // TODO implement getPipelineRunNodeStepLog() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve run node steps details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return List&lt;PipelineStepImpl&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunNodeSteps",
        notes = "Retrieve run node steps details for an organization pipeline",
        response = PipelineStepImpl.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run node steps details", response = PipelineStepImpl.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<PipelineStepImpl>> getPipelineRunNodeSteps(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node
    ) {
        // TODO implement getPipelineRunNodeSteps() body;
        Mono<List<PipelineStepImpl>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve run nodes details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return List&lt;PipelineRunNode&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRunNodes",
        notes = "Retrieve run nodes details for an organization pipeline",
        response = PipelineRunNode.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved run nodes details", response = PipelineRunNode.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<PipelineRunNode>> getPipelineRunNodes(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineRunNodes() body;
        Mono<List<PipelineRunNode>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve all runs details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineRun&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelineRuns",
        notes = "Retrieve all runs details for an organization pipeline",
        response = PipelineRun.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved runs details", response = PipelineRun.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<PipelineRun>> getPipelineRuns(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineRuns() body;
        Mono<List<PipelineRun>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve all pipelines details for an organization
     *
     * @param organization Name of the organization (required)
     * @return List&lt;Pipeline&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getPipelines",
        notes = "Retrieve all pipelines details for an organization",
        response = Pipeline.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Pipeline.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<Pipeline>> getPipelines(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getPipelines() body;
        Mono<List<Pipeline>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve SCM details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return GithubScm
     */
    @ApiOperation(
        value = "",
        nickname = "getSCM",
        notes = "Retrieve SCM details for an organization",
        response = GithubScm.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved SCM details", response = GithubScm.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<GithubScm> getSCM(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm
    ) {
        // TODO implement getSCM() body;
        Mono<GithubScm> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve SCM organization repositories details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getSCMOrganisationRepositories",
        notes = "Retrieve SCM organization repositories details for an organization",
        response = GithubOrganization.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organization repositories details", response = GithubOrganization.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<GithubOrganization>> getSCMOrganisationRepositories(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @PathVariable(value="scmOrganisation") @NotNull String scmOrganisation, 
        @QueryValue(value="credentialId") @Nullable String credentialId, 
        @QueryValue(value="pageSize") @Nullable Integer pageSize, 
        @QueryValue(value="pageNumber") @Nullable Integer pageNumber
    ) {
        // TODO implement getSCMOrganisationRepositories() body;
        Mono<List<GithubOrganization>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve SCM organization repository details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getSCMOrganisationRepository",
        notes = "Retrieve SCM organization repository details for an organization",
        response = GithubOrganization.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = GithubOrganization.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<GithubOrganization>> getSCMOrganisationRepository(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @PathVariable(value="scmOrganisation") @NotNull String scmOrganisation, 
        @PathVariable(value="repository") @NotNull String repository, 
        @QueryValue(value="credentialId") @Nullable String credentialId
    ) {
        // TODO implement getSCMOrganisationRepository() body;
        Mono<List<GithubOrganization>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve SCM organizations details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getSCMOrganisations",
        notes = "Retrieve SCM organizations details for an organization",
        response = GithubOrganization.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = GithubOrganization.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<GithubOrganization>> getSCMOrganisations(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @QueryValue(value="credentialId") @Nullable String credentialId
    ) {
        // TODO implement getSCMOrganisations() body;
        Mono<List<GithubOrganization>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve user details for an organization
     *
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return User
     */
    @ApiOperation(
        value = "",
        nickname = "getUser",
        notes = "Retrieve user details for an organization",
        response = User.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/users/{user}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<User> getUser(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="user") @NotNull String user
    ) {
        // TODO implement getUser() body;
        Mono<User> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve user favorites details for an organization
     *
     * @param user Name of the user (required)
     * @return List&lt;FavoriteImpl&gt;
     */
    @ApiOperation(
        value = "",
        nickname = "getUserFavorites",
        notes = "Retrieve user favorites details for an organization",
        response = FavoriteImpl.class,
        responseContainer = "array",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved users favorites details", response = FavoriteImpl.class, responseContainer = "array"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/users/{user}/favorites")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<List<FavoriteImpl>> getUserFavorites(
        @PathVariable(value="user") @NotNull String user
    ) {
        // TODO implement getUserFavorites() body;
        Mono<List<FavoriteImpl>> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve users details for an organization
     *
     * @param organization Name of the organization (required)
     * @return User
     */
    @ApiOperation(
        value = "",
        nickname = "getUsers",
        notes = "Retrieve users details for an organization",
        response = User.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/organizations/{organization}/users/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<User> getUsers(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getUsers() body;
        Mono<User> result = Mono.empty();
        return result;
    }

    /**
     * Replay an organization pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return QueueItemImpl
     */
    @ApiOperation(
        value = "",
        nickname = "postPipelineRun",
        notes = "Replay an organization pipeline run",
        response = QueueItemImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully replayed a pipeline run", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Post(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<QueueItemImpl> postPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement postPipelineRun() body;
        Mono<QueueItemImpl> result = Mono.empty();
        return result;
    }

    /**
     * Start a build for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return QueueItemImpl
     */
    @ApiOperation(
        value = "",
        nickname = "postPipelineRuns",
        notes = "Start a build for an organization pipeline",
        response = QueueItemImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully started a build", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Post(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<QueueItemImpl> postPipelineRuns(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement postPipelineRuns() body;
        Mono<QueueItemImpl> result = Mono.empty();
        return result;
    }

    /**
     * Favorite/unfavorite a pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param UNKNOWN_BASE_TYPE Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return FavoriteImpl
     */
    @ApiOperation(
        value = "",
        nickname = "putPipelineFavorite",
        notes = "Favorite/unfavorite a pipeline",
        response = FavoriteImpl.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully favorited/unfavorited a pipeline", response = FavoriteImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Put(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<FavoriteImpl> putPipelineFavorite(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @Body @Nullable UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE
    ) {
        // TODO implement putPipelineFavorite() body;
        Mono<FavoriteImpl> result = Mono.empty();
        return result;
    }

    /**
     * Stop a build of an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return PipelineRun
     */
    @ApiOperation(
        value = "",
        nickname = "putPipelineRun",
        notes = "Stop a build of an organization pipeline",
        response = PipelineRun.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully stopped a build", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Put(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<PipelineRun> putPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @QueryValue(value="blocking") @Nullable String blocking, 
        @QueryValue(value="timeOutInSecs") @Nullable Integer timeOutInSecs
    ) {
        // TODO implement putPipelineRun() body;
        Mono<PipelineRun> result = Mono.empty();
        return result;
    }

    /**
     * Search for any resource details
     *
     * @param q Query string (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "search",
        notes = "Search for any resource details",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/search/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> search(
        @QueryValue(value="q") @NotNull String q
    ) {
        // TODO implement search() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Get classes details
     *
     * @param q Query string containing an array of class names (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "searchClasses",
        notes = "Get classes details",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/blue/rest/classes/")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> searchClasses(
        @QueryValue(value="q") @NotNull String q
    ) {
        // TODO implement searchClasses() body;
        Mono<String> result = Mono.empty();
        return result;
    }
}
