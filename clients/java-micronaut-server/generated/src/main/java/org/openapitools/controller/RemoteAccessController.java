/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import org.openapitools.model.ComputerSet;
import org.openapitools.model.FreeStyleBuild;
import org.openapitools.model.FreeStyleProject;
import org.openapitools.model.Hudson;
import org.openapitools.model.ListView;
import org.openapitools.model.Queue;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-02-10T09:45:45.459643Z[Etc/UTC]")
@Controller("${context-path}")
public class RemoteAccessController {
    /**
     * Retrieve computer details
     *
     * @param depth Recursion depth in response model (required)
     * @return ComputerSet
     */
    @ApiOperation(
        value = "",
        nickname = "getComputer",
        notes = "Retrieve computer details",
        response = ComputerSet.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved computer details", response = ComputerSet.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/computer/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<ComputerSet> getComputer(
        @QueryValue(value="depth") @NotNull Integer depth
    ) {
        // TODO implement getComputer() body;
        Mono<ComputerSet> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve Jenkins details
     *
     * @return Hudson
     */
    @ApiOperation(
        value = "",
        nickname = "getJenkins",
        notes = "Retrieve Jenkins details",
        response = Hudson.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved Jenkins details", response = Hudson.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Hudson> getJenkins() {
        // TODO implement getJenkins() body;
        Mono<Hudson> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve job details
     *
     * @param name Name of the job (required)
     * @return FreeStyleProject
     */
    @ApiOperation(
        value = "",
        nickname = "getJob",
        notes = "Retrieve job details",
        response = FreeStyleProject.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved job details", response = FreeStyleProject.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Get(uri="/job/{name}/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<FreeStyleProject> getJob(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJob() body;
        Mono<FreeStyleProject> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve job configuration
     *
     * @param name Name of the job (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getJobConfig",
        notes = "Retrieve job configuration",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved job configuration in config.xml format", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Get(uri="/job/{name}/config.xml")
    @Produces(value = {"text/xml"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> getJobConfig(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJobConfig() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve job&#39;s last build details
     *
     * @param name Name of the job (required)
     * @return FreeStyleBuild
     */
    @ApiOperation(
        value = "",
        nickname = "getJobLastBuild",
        notes = "Retrieve job's last build details",
        response = FreeStyleBuild.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved job's last build details", response = FreeStyleBuild.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Get(uri="/job/{name}/lastBuild/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<FreeStyleBuild> getJobLastBuild(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJobLastBuild() body;
        Mono<FreeStyleBuild> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve job&#39;s build progressive text output
     *
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     */
    @ApiOperation(
        value = "",
        nickname = "getJobProgressiveText",
        notes = "Retrieve job's build progressive text output",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved job's build progressive text output"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Get(uri="/job/{name}/{number}/logText/progressiveText")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> getJobProgressiveText(
        @PathVariable(value="name") @NotNull String name, 
        @PathVariable(value="number") @NotNull String number, 
        @QueryValue(value="start") @NotNull String start
    ) {
        // TODO implement getJobProgressiveText() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve queue details
     *
     * @return Queue
     */
    @ApiOperation(
        value = "",
        nickname = "getQueue",
        notes = "Retrieve queue details",
        response = Queue.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved queue details", response = Queue.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/queue/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Queue> getQueue() {
        // TODO implement getQueue() body;
        Mono<Queue> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve queued item details
     *
     * @param number Queue number (required)
     * @return Queue
     */
    @ApiOperation(
        value = "",
        nickname = "getQueueItem",
        notes = "Retrieve queued item details",
        response = Queue.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved queued item details", response = Queue.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Get(uri="/queue/item/{number}/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Queue> getQueueItem(
        @PathVariable(value="number") @NotNull String number
    ) {
        // TODO implement getQueueItem() body;
        Mono<Queue> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve view details
     *
     * @param name Name of the view (required)
     * @return ListView
     */
    @ApiOperation(
        value = "",
        nickname = "getView",
        notes = "Retrieve view details",
        response = ListView.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved view details", response = ListView.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "View cannot be found on Jenkins instance")})
    @Get(uri="/view/{name}/api/json")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<ListView> getView(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getView() body;
        Mono<ListView> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve view configuration
     *
     * @param name Name of the view (required)
     * @return String
     */
    @ApiOperation(
        value = "",
        nickname = "getViewConfig",
        notes = "Retrieve view configuration",
        response = String.class,
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved view configuration in config.xml format", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "View cannot be found on Jenkins instance")})
    @Get(uri="/view/{name}/config.xml")
    @Produces(value = {"text/xml"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<String> getViewConfig(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getViewConfig() body;
        Mono<String> result = Mono.empty();
        return result;
    }

    /**
     * Retrieve Jenkins headers
     *
     */
    @ApiOperation(
        value = "",
        nickname = "headJenkins",
        notes = "Retrieve Jenkins headers",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved Jenkins headers"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Head(uri="/api/json")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> headJenkins() {
        // TODO implement headJenkins() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Create a new job using job configuration, or copied from an existing job
     *
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param _body Job configuration in config.xml format (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postCreateItem",
        notes = "Create a new job using job configuration, or copied from an existing job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully created a new job"),
        @ApiResponse(code = 400, message = "An error has occurred - error message is embedded inside the HTML response", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Post(uri="/createItem")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postCreateItem(
        @QueryValue(value="name") @NotNull String name, 
        @QueryValue(value="from") @Nullable String from, 
        @QueryValue(value="mode") @Nullable String mode, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb, 
        @Header(value="Content-Type") @Nullable String contentType, 
        @Body @Nullable String _body
    ) {
        // TODO implement postCreateItem() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Create a new view using view configuration
     *
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param _body View configuration in config.xml format (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postCreateView",
        notes = "Create a new view using view configuration",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully created the view"),
        @ApiResponse(code = 400, message = "An error has occurred - error message is embedded inside the HTML response", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password")})
    @Post(uri="/createView")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postCreateView(
        @QueryValue(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb, 
        @Header(value="Content-Type") @Nullable String contentType, 
        @Body @Nullable String _body
    ) {
        // TODO implement postCreateView() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Build a job
     *
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobBuild",
        notes = "Build a job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully built the job (backward compatibility for older versions of Jenkins)"),
        @ApiResponse(code = 201, message = "Successfully built the job"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/build")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobBuild(
        @PathVariable(value="name") @NotNull String name, 
        @QueryValue(value="json") @NotNull String json, 
        @QueryValue(value="token") @Nullable String token, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobBuild() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Update job configuration
     *
     * @param name Name of the job (required)
     * @param _body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobConfig",
        notes = "Update job configuration",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved job configuration in config.xml format"),
        @ApiResponse(code = 400, message = "An error has occurred - error message is embedded inside the HTML response", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/config.xml")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobConfig(
        @PathVariable(value="name") @NotNull String name, 
        @Body @NotNull String _body, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobConfig() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Delete a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobDelete",
        notes = "Delete a job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully deleted the job"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/doDelete")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobDelete(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobDelete() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Disable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobDisable",
        notes = "Disable a job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully disabled the job"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/disable")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobDisable(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobDisable() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Enable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobEnable",
        notes = "Enable a job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully enabled the job"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/enable")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobEnable(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobEnable() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Stop a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postJobLastBuildStop",
        notes = "Stop a job",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully stopped the job"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Job cannot be found on Jenkins instance")})
    @Post(uri="/job/{name}/lastBuild/stop")
    @Produces(value = {})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postJobLastBuildStop(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobLastBuildStop() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Update view configuration
     *
     * @param name Name of the view (required)
     * @param _body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @ApiOperation(
        value = "",
        nickname = "postViewConfig",
        notes = "Update view configuration",
        authorizations = {
            @Authorization(value = "jenkins_auth")
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully updated view configuration"),
        @ApiResponse(code = 400, message = "An error has occurred - error message is embedded inside the HTML response", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "View cannot be found on Jenkins instance")})
    @Post(uri="/view/{name}/config.xml")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> postViewConfig(
        @PathVariable(value="name") @NotNull String name, 
        @Body @NotNull String _body, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postViewConfig() body;
        Mono<Object> result = Mono.empty();
        return result;
    }
}
