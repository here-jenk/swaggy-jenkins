<?php
/**
 * RemoteAccessApiInterface
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.5.1-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\ComputerSet;
use OpenAPI\Server\Model\FreeStyleBuild;
use OpenAPI\Server\Model\FreeStyleProject;
use OpenAPI\Server\Model\Hudson;
use OpenAPI\Server\Model\ListView;
use OpenAPI\Server\Model\Queue;

/**
 * RemoteAccessApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface RemoteAccessApiInterface
{

    /**
     * Sets authentication method jenkins_auth
     *
     * @param string $value Value of the jenkins_auth authentication method.
     *
     * @return void
     */
    public function setjenkins_auth($value);

    /**
     * Operation getComputer
     *
     * @param  \int $depth  Recursion depth in response model (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\ComputerSet
     */
    public function getComputer($depth, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\ComputerSet;


    /**
     * Operation getJenkins
     *
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\Hudson
     */
    public function getJenkins(&$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\Hudson;


    /**
     * Operation getJob
     *
     * @param  \string $name  Name of the job (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\FreeStyleProject
     */
    public function getJob($name, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\FreeStyleProject;


    /**
     * Operation getJobConfig
     *
     * @param  \string $name  Name of the job (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \string
     */
    public function getJobConfig($name, &$responseCode, array &$responseHeaders): array|\string;


    /**
     * Operation getJobLastBuild
     *
     * @param  \string $name  Name of the job (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\FreeStyleBuild
     */
    public function getJobLastBuild($name, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\FreeStyleBuild;


    /**
     * Operation getJobProgressiveText
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $number  Build number (required)
     * @param  \string $start  Starting point of progressive text output (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function getJobProgressiveText($name, $number, $start, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation getQueue
     *
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\Queue
     */
    public function getQueue(&$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\Queue;


    /**
     * Operation getQueueItem
     *
     * @param  \string $number  Queue number (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\Queue
     */
    public function getQueueItem($number, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\Queue;


    /**
     * Operation getView
     *
     * @param  \string $name  Name of the view (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\ListView
     */
    public function getView($name, &$responseCode, array &$responseHeaders): array|\OpenAPI\Server\Model\ListView;


    /**
     * Operation getViewConfig
     *
     * @param  \string $name  Name of the view (required)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \string
     */
    public function getViewConfig($name, &$responseCode, array &$responseHeaders): array|\string;


    /**
     * Operation headJenkins
     *
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function headJenkins(&$responseCode, array &$responseHeaders): void;


    /**
     * Operation postCreateItem
     *
     * @param  \string $name  Name of the new job (required)
     * @param  \string $from  Existing job to copy from (optional)
     * @param  \string $mode  Set to &#39;copy&#39; for copying an existing job (optional)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \string $contentType  Content type header application/xml (optional)
     * @param  \string $body  Job configuration in config.xml format (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postCreateItem($name, $from = null, $mode = null, $jenkinsCrumb = null, $contentType = null, $body = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postCreateView
     *
     * @param  \string $name  Name of the new view (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \string $contentType  Content type header application/xml (optional)
     * @param  \string $body  View configuration in config.xml format (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postCreateView($name, $jenkinsCrumb = null, $contentType = null, $body = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobBuild
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $json   (required)
     * @param  \string $token   (optional)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobBuild($name, $json, $token = null, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobConfig
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $body  Job configuration in config.xml format (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobConfig($name, $body, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobDelete
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobDelete($name, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobDisable
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobDisable($name, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobEnable
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobEnable($name, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postJobLastBuildStop
     *
     * @param  \string $name  Name of the job (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postJobLastBuildStop($name, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;


    /**
     * Operation postViewConfig
     *
     * @param  \string $name  Name of the view (required)
     * @param  \string $body  View configuration in config.xml format (required)
     * @param  \string $jenkinsCrumb  CSRF protection token (optional)
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function postViewConfig($name, $body, $jenkinsCrumb = null, &$responseCode, array &$responseHeaders): void;

}
