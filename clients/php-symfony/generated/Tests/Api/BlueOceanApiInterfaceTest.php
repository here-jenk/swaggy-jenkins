<?php
/**
 * BlueOceanApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BlueOceanApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class BlueOceanApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deletePipelineQueueItem
     *
     * .
     *
     */
    public function testDeletePipelineQueueItem()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{queue}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for getAuthenticatedUser
     *
     * .
     *
     */
    public function testGetAuthenticatedUser()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/user/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getClasses
     *
     * .
     *
     */
    public function testGetClasses()
    {
        $client = static::createClient();

        $path = '/blue/rest/classes/{class}';
        $pattern = '{class}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getJsonWebKey
     *
     * .
     *
     */
    public function testGetJsonWebKey()
    {
        $client = static::createClient();

        $path = '/jwt-auth/jwks/{key}';
        $pattern = '{key}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getJsonWebToken
     *
     * .
     *
     */
    public function testGetJsonWebToken()
    {
        $client = static::createClient();

        $path = '/jwt-auth/token';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getOrganisation
     *
     * .
     *
     */
    public function testGetOrganisation()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getOrganisations
     *
     * .
     *
     */
    public function testGetOrganisations()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipeline
     *
     * .
     *
     */
    public function testGetPipeline()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineActivities
     *
     * .
     *
     */
    public function testGetPipelineActivities()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineBranch
     *
     * .
     *
     */
    public function testGetPipelineBranch()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{branch}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineBranchRun
     *
     * .
     *
     */
    public function testGetPipelineBranchRun()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{branch}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineBranches
     *
     * .
     *
     */
    public function testGetPipelineBranches()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineFolder
     *
     * .
     *
     */
    public function testGetPipelineFolder()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{folder}/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folder}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineFolderPipeline
     *
     * .
     *
     */
    public function testGetPipelineFolderPipeline()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folder}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineQueue
     *
     * .
     *
     */
    public function testGetPipelineQueue()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRun
     *
     * .
     *
     */
    public function testGetPipelineRun()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunLog
     *
     * .
     *
     */
    public function testGetPipelineRunLog()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunNode
     *
     * .
     *
     */
    public function testGetPipelineRunNode()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunNodeStep
     *
     * .
     *
     */
    public function testGetPipelineRunNodeStep()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{step}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunNodeStepLog
     *
     * .
     *
     */
    public function testGetPipelineRunNodeStepLog()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{step}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunNodeSteps
     *
     * .
     *
     */
    public function testGetPipelineRunNodeSteps()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRunNodes
     *
     * .
     *
     */
    public function testGetPipelineRunNodes()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelineRuns
     *
     * .
     *
     */
    public function testGetPipelineRuns()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPipelines
     *
     * .
     *
     */
    public function testGetPipelines()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSCM
     *
     * .
     *
     */
    public function testGetSCM()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/scm/{scm}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSCMOrganisationRepositories
     *
     * .
     *
     */
    public function testGetSCMOrganisationRepositories()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scmOrganisation}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSCMOrganisationRepository
     *
     * .
     *
     */
    public function testGetSCMOrganisationRepository()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scmOrganisation}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{repository}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSCMOrganisations
     *
     * .
     *
     */
    public function testGetSCMOrganisations()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getUser
     *
     * .
     *
     */
    public function testGetUser()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/users/{user}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{user}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getUserFavorites
     *
     * .
     *
     */
    public function testGetUserFavorites()
    {
        $client = static::createClient();

        $path = '/blue/rest/users/{user}/favorites';
        $pattern = '{user}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getUsers
     *
     * .
     *
     */
    public function testGetUsers()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/users/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for postPipelineRun
     *
     * .
     *
     */
    public function testPostPipelineRun()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postPipelineRuns
     *
     * .
     *
     */
    public function testPostPipelineRuns()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for putPipelineFavorite
     *
     * .
     *
     */
    public function testPutPipelineFavorite()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for putPipelineRun
     *
     * .
     *
     */
    public function testPutPipelineRun()
    {
        $client = static::createClient();

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path);
    }

    /**
     * Test case for search
     *
     * .
     *
     */
    public function testSearch()
    {
        $client = static::createClient();

        $path = '/blue/rest/search/';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for searchClasses
     *
     * .
     *
     */
    public function testSearchClasses()
    {
        $client = static::createClient();

        $path = '/blue/rest/classes/';

        $crawler = $client->request('GET', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
