/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ComputerSet from '../model/ComputerSet';
import FreeStyleBuild from '../model/FreeStyleBuild';
import FreeStyleProject from '../model/FreeStyleProject';
import Hudson from '../model/Hudson';
import ListView from '../model/ListView';
import Queue from '../model/Queue';

/**
* RemoteAccess service.
* @module api/RemoteAccessApi
* @version 1.1.2-pre.0
*/
export default class RemoteAccessApi extends ApiClient {

    /**
    * Constructs a new RemoteAccessApi. 
    * @alias module:api/RemoteAccessApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Retrieve computer details
     * @param {Number} depth Recursion depth in response model
     * @return {Promise<ComputerSet>}
     */
    async getComputer(depth) {
      let postBody = null;
      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling getComputer");
      }

      let pathParams = {
      };
      let queryParams = {
        'depth': depth
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputerSet;

      return this.callApi(
        '/computer/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Jenkins details
     * @return {Promise<Hudson>}
     */
    async getJenkins() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Hudson;

      return this.callApi(
        '/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve job details
     * @param {String} name Name of the job
     * @return {Promise<FreeStyleProject>}
     */
    async getJob(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJob");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FreeStyleProject;

      return this.callApi(
        '/job/{name}/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve job configuration
     * @param {String} name Name of the job
     * @return {Promise<String>}
     */
    async getJobConfig(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJobConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = 'String';

      return this.callApi(
        '/job/{name}/config.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve job's last build details
     * @param {String} name Name of the job
     * @return {Promise<FreeStyleBuild>}
     */
    async getJobLastBuild(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJobLastBuild");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FreeStyleBuild;

      return this.callApi(
        '/job/{name}/lastBuild/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve job's build progressive text output
     * @param {String} name Name of the job
     * @param {String} _number Build number
     * @param {String} start Starting point of progressive text output
     * @return {Promise}
     */
    async getJobProgressiveText(name, _number, start) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJobProgressiveText");
      }
      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling getJobProgressiveText");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling getJobProgressiveText");
      }

      let pathParams = {
        'name': name,
        'number': _number
      };
      let queryParams = {
        'start': start
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/{number}/logText/progressiveText', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve queue details
     * @return {Promise<Queue>}
     */
    async getQueue() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Queue;

      return this.callApi(
        '/queue/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve queued item details
     * @param {String} _number Queue number
     * @return {Promise<Queue>}
     */
    async getQueueItem(_number) {
      let postBody = null;
      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling getQueueItem");
      }

      let pathParams = {
        'number': _number
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Queue;

      return this.callApi(
        '/queue/item/{number}/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve view details
     * @param {String} name Name of the view
     * @return {Promise<ListView>}
     */
    async getView(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getView");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListView;

      return this.callApi(
        '/view/{name}/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve view configuration
     * @param {String} name Name of the view
     * @return {Promise<String>}
     */
    async getViewConfig(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getViewConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = 'String';

      return this.callApi(
        '/view/{name}/config.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Jenkins headers
     * @return {Promise}
     */
    async headJenkins() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/api/json', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new job using job configuration, or copied from an existing job
     * @param {String} name Name of the new job
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Existing job to copy from
     * @param {String} opts.mode Set to 'copy' for copying an existing job
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @param {String} opts.contentType Content type header application/xml
     * @param {String} opts.body Job configuration in config.xml format
     * @return {Promise}
     */
    async postCreateItem(name, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postCreateItem");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'from': opts['from'],
        'mode': opts['mode']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.callApi(
        '/createItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new view using view configuration
     * @param {String} name Name of the new view
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @param {String} opts.contentType Content type header application/xml
     * @param {String} opts.body View configuration in config.xml format
     * @return {Promise}
     */
    async postCreateView(name, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postCreateView");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.callApi(
        '/createView', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Build a job
     * @param {String} name Name of the job
     * @param {String} json 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobBuild(name, json, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobBuild");
      }
      // verify the required parameter 'json' is set
      if (json === undefined || json === null) {
        throw new Error("Missing the required parameter 'json' when calling postJobBuild");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'json': json,
        'token': opts['token']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/build', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update job configuration
     * @param {String} name Name of the job
     * @param {String} body Job configuration in config.xml format
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobConfig(name, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postJobConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.callApi(
        '/job/{name}/config.xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a job
     * @param {String} name Name of the job
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobDelete(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/doDelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disable a job
     * @param {String} name Name of the job
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobDisable(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobDisable");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable a job
     * @param {String} name Name of the job
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobEnable(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobEnable");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stop a job
     * @param {String} name Name of the job
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postJobLastBuildStop(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postJobLastBuildStop");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/job/{name}/lastBuild/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update view configuration
     * @param {String} name Name of the view
     * @param {String} body View configuration in config.xml format
     * @param {Object} opts Optional parameters
     * @param {String} opts.jenkinsCrumb CSRF protection token
     * @return {Promise}
     */
    async postViewConfig(name, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postViewConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postViewConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.1.2-pre.0/Javascript',
        'Jenkins-Crumb': opts['jenkinsCrumb']
      };
      let formParams = {
      };

      let authNames = ['jenkins_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.callApi(
        '/view/{name}/config.xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
