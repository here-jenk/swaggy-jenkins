//
// Hudson.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Hudson: Codable, JSONEncodable, Hashable {

    public var _class: String?
    public var assignedLabels: [HudsonassignedLabels]?
    public var mode: String?
    public var nodeDescription: String?
    public var nodeName: String?
    public var numExecutors: Int?
    public var description: String?
    public var jobs: [FreeStyleProject]?
    public var primaryView: AllView?
    public var quietingDown: Bool?
    public var slaveAgentPort: Int?
    public var unlabeledLoad: UnlabeledLoadStatistics?
    public var useCrumbs: Bool?
    public var useSecurity: Bool?
    public var views: [AllView]?

    public init(_class: String? = nil, assignedLabels: [HudsonassignedLabels]? = nil, mode: String? = nil, nodeDescription: String? = nil, nodeName: String? = nil, numExecutors: Int? = nil, description: String? = nil, jobs: [FreeStyleProject]? = nil, primaryView: AllView? = nil, quietingDown: Bool? = nil, slaveAgentPort: Int? = nil, unlabeledLoad: UnlabeledLoadStatistics? = nil, useCrumbs: Bool? = nil, useSecurity: Bool? = nil, views: [AllView]? = nil) {
        self._class = _class
        self.assignedLabels = assignedLabels
        self.mode = mode
        self.nodeDescription = nodeDescription
        self.nodeName = nodeName
        self.numExecutors = numExecutors
        self.description = description
        self.jobs = jobs
        self.primaryView = primaryView
        self.quietingDown = quietingDown
        self.slaveAgentPort = slaveAgentPort
        self.unlabeledLoad = unlabeledLoad
        self.useCrumbs = useCrumbs
        self.useSecurity = useSecurity
        self.views = views
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _class
        case assignedLabels
        case mode
        case nodeDescription
        case nodeName
        case numExecutors
        case description
        case jobs
        case primaryView
        case quietingDown
        case slaveAgentPort
        case unlabeledLoad
        case useCrumbs
        case useSecurity
        case views
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(assignedLabels, forKey: .assignedLabels)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(nodeDescription, forKey: .nodeDescription)
        try container.encodeIfPresent(nodeName, forKey: .nodeName)
        try container.encodeIfPresent(numExecutors, forKey: .numExecutors)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(jobs, forKey: .jobs)
        try container.encodeIfPresent(primaryView, forKey: .primaryView)
        try container.encodeIfPresent(quietingDown, forKey: .quietingDown)
        try container.encodeIfPresent(slaveAgentPort, forKey: .slaveAgentPort)
        try container.encodeIfPresent(unlabeledLoad, forKey: .unlabeledLoad)
        try container.encodeIfPresent(useCrumbs, forKey: .useCrumbs)
        try container.encodeIfPresent(useSecurity, forKey: .useSecurity)
        try container.encodeIfPresent(views, forKey: .views)
    }
}

