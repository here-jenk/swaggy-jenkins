//
// HudsonMasterComputermonitorData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HudsonMasterComputermonitorData: Codable, JSONEncodable, Hashable {

    public var hudsonNodeMonitorsSwapSpaceMonitor: SwapSpaceMonitorMemoryUsage2?
    public var hudsonNodeMonitorsTemporarySpaceMonitor: DiskSpaceMonitorDescriptorDiskSpace?
    public var hudsonNodeMonitorsDiskSpaceMonitor: DiskSpaceMonitorDescriptorDiskSpace?
    public var hudsonNodeMonitorsArchitectureMonitor: String?
    public var hudsonNodeMonitorsResponseTimeMonitor: ResponseTimeMonitorData?
    public var hudsonNodeMonitorsClockMonitor: ClockDifference?
    public var _class: String?

    public init(hudsonNodeMonitorsSwapSpaceMonitor: SwapSpaceMonitorMemoryUsage2? = nil, hudsonNodeMonitorsTemporarySpaceMonitor: DiskSpaceMonitorDescriptorDiskSpace? = nil, hudsonNodeMonitorsDiskSpaceMonitor: DiskSpaceMonitorDescriptorDiskSpace? = nil, hudsonNodeMonitorsArchitectureMonitor: String? = nil, hudsonNodeMonitorsResponseTimeMonitor: ResponseTimeMonitorData? = nil, hudsonNodeMonitorsClockMonitor: ClockDifference? = nil, _class: String? = nil) {
        self.hudsonNodeMonitorsSwapSpaceMonitor = hudsonNodeMonitorsSwapSpaceMonitor
        self.hudsonNodeMonitorsTemporarySpaceMonitor = hudsonNodeMonitorsTemporarySpaceMonitor
        self.hudsonNodeMonitorsDiskSpaceMonitor = hudsonNodeMonitorsDiskSpaceMonitor
        self.hudsonNodeMonitorsArchitectureMonitor = hudsonNodeMonitorsArchitectureMonitor
        self.hudsonNodeMonitorsResponseTimeMonitor = hudsonNodeMonitorsResponseTimeMonitor
        self.hudsonNodeMonitorsClockMonitor = hudsonNodeMonitorsClockMonitor
        self._class = _class
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hudsonNodeMonitorsSwapSpaceMonitor = "hudson.node_monitors.SwapSpaceMonitor"
        case hudsonNodeMonitorsTemporarySpaceMonitor = "hudson.node_monitors.TemporarySpaceMonitor"
        case hudsonNodeMonitorsDiskSpaceMonitor = "hudson.node_monitors.DiskSpaceMonitor"
        case hudsonNodeMonitorsArchitectureMonitor = "hudson.node_monitors.ArchitectureMonitor"
        case hudsonNodeMonitorsResponseTimeMonitor = "hudson.node_monitors.ResponseTimeMonitor"
        case hudsonNodeMonitorsClockMonitor = "hudson.node_monitors.ClockMonitor"
        case _class
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hudsonNodeMonitorsSwapSpaceMonitor, forKey: .hudsonNodeMonitorsSwapSpaceMonitor)
        try container.encodeIfPresent(hudsonNodeMonitorsTemporarySpaceMonitor, forKey: .hudsonNodeMonitorsTemporarySpaceMonitor)
        try container.encodeIfPresent(hudsonNodeMonitorsDiskSpaceMonitor, forKey: .hudsonNodeMonitorsDiskSpaceMonitor)
        try container.encodeIfPresent(hudsonNodeMonitorsArchitectureMonitor, forKey: .hudsonNodeMonitorsArchitectureMonitor)
        try container.encodeIfPresent(hudsonNodeMonitorsResponseTimeMonitor, forKey: .hudsonNodeMonitorsResponseTimeMonitor)
        try container.encodeIfPresent(hudsonNodeMonitorsClockMonitor, forKey: .hudsonNodeMonitorsClockMonitor)
        try container.encodeIfPresent(_class, forKey: ._class)
    }
}

