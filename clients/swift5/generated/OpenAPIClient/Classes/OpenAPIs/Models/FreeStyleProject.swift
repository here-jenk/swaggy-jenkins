//
// FreeStyleProject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FreeStyleProject: Codable, JSONEncodable, Hashable {

    public var _class: String?
    public var name: String?
    public var url: String?
    public var color: String?
    public var actions: [FreeStyleProjectactions]?
    public var description: String?
    public var displayName: String?
    public var displayNameOrNull: String?
    public var fullDisplayName: String?
    public var fullName: String?
    public var buildable: Bool?
    public var builds: [FreeStyleBuild]?
    public var firstBuild: FreeStyleBuild?
    public var healthReport: [FreeStyleProjecthealthReport]?
    public var inQueue: Bool?
    public var keepDependencies: Bool?
    public var lastBuild: FreeStyleBuild?
    public var lastCompletedBuild: FreeStyleBuild?
    public var lastFailedBuild: String?
    public var lastStableBuild: FreeStyleBuild?
    public var lastSuccessfulBuild: FreeStyleBuild?
    public var lastUnstableBuild: String?
    public var lastUnsuccessfulBuild: String?
    public var nextBuildNumber: Int?
    public var queueItem: String?
    public var concurrentBuild: Bool?
    public var scm: NullSCM?

    public init(_class: String? = nil, name: String? = nil, url: String? = nil, color: String? = nil, actions: [FreeStyleProjectactions]? = nil, description: String? = nil, displayName: String? = nil, displayNameOrNull: String? = nil, fullDisplayName: String? = nil, fullName: String? = nil, buildable: Bool? = nil, builds: [FreeStyleBuild]? = nil, firstBuild: FreeStyleBuild? = nil, healthReport: [FreeStyleProjecthealthReport]? = nil, inQueue: Bool? = nil, keepDependencies: Bool? = nil, lastBuild: FreeStyleBuild? = nil, lastCompletedBuild: FreeStyleBuild? = nil, lastFailedBuild: String? = nil, lastStableBuild: FreeStyleBuild? = nil, lastSuccessfulBuild: FreeStyleBuild? = nil, lastUnstableBuild: String? = nil, lastUnsuccessfulBuild: String? = nil, nextBuildNumber: Int? = nil, queueItem: String? = nil, concurrentBuild: Bool? = nil, scm: NullSCM? = nil) {
        self._class = _class
        self.name = name
        self.url = url
        self.color = color
        self.actions = actions
        self.description = description
        self.displayName = displayName
        self.displayNameOrNull = displayNameOrNull
        self.fullDisplayName = fullDisplayName
        self.fullName = fullName
        self.buildable = buildable
        self.builds = builds
        self.firstBuild = firstBuild
        self.healthReport = healthReport
        self.inQueue = inQueue
        self.keepDependencies = keepDependencies
        self.lastBuild = lastBuild
        self.lastCompletedBuild = lastCompletedBuild
        self.lastFailedBuild = lastFailedBuild
        self.lastStableBuild = lastStableBuild
        self.lastSuccessfulBuild = lastSuccessfulBuild
        self.lastUnstableBuild = lastUnstableBuild
        self.lastUnsuccessfulBuild = lastUnsuccessfulBuild
        self.nextBuildNumber = nextBuildNumber
        self.queueItem = queueItem
        self.concurrentBuild = concurrentBuild
        self.scm = scm
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _class
        case name
        case url
        case color
        case actions
        case description
        case displayName
        case displayNameOrNull
        case fullDisplayName
        case fullName
        case buildable
        case builds
        case firstBuild
        case healthReport
        case inQueue
        case keepDependencies
        case lastBuild
        case lastCompletedBuild
        case lastFailedBuild
        case lastStableBuild
        case lastSuccessfulBuild
        case lastUnstableBuild
        case lastUnsuccessfulBuild
        case nextBuildNumber
        case queueItem
        case concurrentBuild
        case scm
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(displayNameOrNull, forKey: .displayNameOrNull)
        try container.encodeIfPresent(fullDisplayName, forKey: .fullDisplayName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(buildable, forKey: .buildable)
        try container.encodeIfPresent(builds, forKey: .builds)
        try container.encodeIfPresent(firstBuild, forKey: .firstBuild)
        try container.encodeIfPresent(healthReport, forKey: .healthReport)
        try container.encodeIfPresent(inQueue, forKey: .inQueue)
        try container.encodeIfPresent(keepDependencies, forKey: .keepDependencies)
        try container.encodeIfPresent(lastBuild, forKey: .lastBuild)
        try container.encodeIfPresent(lastCompletedBuild, forKey: .lastCompletedBuild)
        try container.encodeIfPresent(lastFailedBuild, forKey: .lastFailedBuild)
        try container.encodeIfPresent(lastStableBuild, forKey: .lastStableBuild)
        try container.encodeIfPresent(lastSuccessfulBuild, forKey: .lastSuccessfulBuild)
        try container.encodeIfPresent(lastUnstableBuild, forKey: .lastUnstableBuild)
        try container.encodeIfPresent(lastUnsuccessfulBuild, forKey: .lastUnsuccessfulBuild)
        try container.encodeIfPresent(nextBuildNumber, forKey: .nextBuildNumber)
        try container.encodeIfPresent(queueItem, forKey: .queueItem)
        try container.encodeIfPresent(concurrentBuild, forKey: .concurrentBuild)
        try container.encodeIfPresent(scm, forKey: .scm)
    }
}

