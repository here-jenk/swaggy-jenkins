//
// MultibranchPipeline.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MultibranchPipeline: Codable, JSONEncodable, Hashable {

    public var displayName: String?
    public var estimatedDurationInMillis: Int?
    public var latestRun: String?
    public var name: String?
    public var organization: String?
    public var weatherScore: Int?
    public var branchNames: [String]?
    public var numberOfFailingBranches: Int?
    public var numberOfFailingPullRequests: Int?
    public var numberOfSuccessfulBranches: Int?
    public var numberOfSuccessfulPullRequests: Int?
    public var totalNumberOfBranches: Int?
    public var totalNumberOfPullRequests: Int?
    public var _class: String?

    public init(displayName: String? = nil, estimatedDurationInMillis: Int? = nil, latestRun: String? = nil, name: String? = nil, organization: String? = nil, weatherScore: Int? = nil, branchNames: [String]? = nil, numberOfFailingBranches: Int? = nil, numberOfFailingPullRequests: Int? = nil, numberOfSuccessfulBranches: Int? = nil, numberOfSuccessfulPullRequests: Int? = nil, totalNumberOfBranches: Int? = nil, totalNumberOfPullRequests: Int? = nil, _class: String? = nil) {
        self.displayName = displayName
        self.estimatedDurationInMillis = estimatedDurationInMillis
        self.latestRun = latestRun
        self.name = name
        self.organization = organization
        self.weatherScore = weatherScore
        self.branchNames = branchNames
        self.numberOfFailingBranches = numberOfFailingBranches
        self.numberOfFailingPullRequests = numberOfFailingPullRequests
        self.numberOfSuccessfulBranches = numberOfSuccessfulBranches
        self.numberOfSuccessfulPullRequests = numberOfSuccessfulPullRequests
        self.totalNumberOfBranches = totalNumberOfBranches
        self.totalNumberOfPullRequests = totalNumberOfPullRequests
        self._class = _class
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case displayName
        case estimatedDurationInMillis
        case latestRun
        case name
        case organization
        case weatherScore
        case branchNames
        case numberOfFailingBranches
        case numberOfFailingPullRequests
        case numberOfSuccessfulBranches
        case numberOfSuccessfulPullRequests
        case totalNumberOfBranches
        case totalNumberOfPullRequests
        case _class
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(estimatedDurationInMillis, forKey: .estimatedDurationInMillis)
        try container.encodeIfPresent(latestRun, forKey: .latestRun)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(weatherScore, forKey: .weatherScore)
        try container.encodeIfPresent(branchNames, forKey: .branchNames)
        try container.encodeIfPresent(numberOfFailingBranches, forKey: .numberOfFailingBranches)
        try container.encodeIfPresent(numberOfFailingPullRequests, forKey: .numberOfFailingPullRequests)
        try container.encodeIfPresent(numberOfSuccessfulBranches, forKey: .numberOfSuccessfulBranches)
        try container.encodeIfPresent(numberOfSuccessfulPullRequests, forKey: .numberOfSuccessfulPullRequests)
        try container.encodeIfPresent(totalNumberOfBranches, forKey: .totalNumberOfBranches)
        try container.encodeIfPresent(totalNumberOfPullRequests, forKey: .totalNumberOfPullRequests)
        try container.encodeIfPresent(_class, forKey: ._class)
    }
}

