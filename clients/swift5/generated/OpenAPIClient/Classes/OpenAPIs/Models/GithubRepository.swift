//
// GithubRepository.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GithubRepository: Codable, JSONEncodable, Hashable {

    public var _class: String?
    public var links: GithubRepositorylinks?
    public var defaultBranch: String?
    public var description: String?
    public var name: String?
    public var permissions: GithubRepositorypermissions?
    public var _private: Bool?
    public var fullName: String?

    public init(_class: String? = nil, links: GithubRepositorylinks? = nil, defaultBranch: String? = nil, description: String? = nil, name: String? = nil, permissions: GithubRepositorypermissions? = nil, _private: Bool? = nil, fullName: String? = nil) {
        self._class = _class
        self.links = links
        self.defaultBranch = defaultBranch
        self.description = description
        self.name = name
        self.permissions = permissions
        self._private = _private
        self.fullName = fullName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _class
        case links = "_links"
        case defaultBranch
        case description
        case name
        case permissions
        case _private = "private"
        case fullName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(defaultBranch, forKey: .defaultBranch)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(_private, forKey: ._private)
        try container.encodeIfPresent(fullName, forKey: .fullName)
    }
}

