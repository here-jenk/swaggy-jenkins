# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 1.1.2-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BlueOceanApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_pipeline_queue_item(self, organization, pipeline, queue, **kwargs):  # noqa: E501
        """delete_pipeline_queue_item  # noqa: E501

        Delete queue item from an organization pipeline queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pipeline_queue_item(organization, pipeline, queue, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param queue: Name of the queue item (required)
        :type queue: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pipeline_queue_item_with_http_info(organization, pipeline, queue, **kwargs)  # noqa: E501

    def delete_pipeline_queue_item_with_http_info(self, organization, pipeline, queue, **kwargs):  # noqa: E501
        """delete_pipeline_queue_item  # noqa: E501

        Delete queue item from an organization pipeline queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pipeline_queue_item_with_http_info(organization, pipeline, queue, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param queue: Name of the queue item (required)
        :type queue: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'queue'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_queue_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `delete_pipeline_queue_item`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `delete_pipeline_queue_item`")  # noqa: E501
        # verify the required parameter 'queue' is set
        if self.api_client.client_side_validation and ('queue' not in local_var_params or  # noqa: E501
                                                        local_var_params['queue'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `queue` when calling `delete_pipeline_queue_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'queue' in local_var_params:
            path_params['queue'] = local_var_params['queue']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_authenticated_user(self, organization, **kwargs):  # noqa: E501
        """get_authenticated_user  # noqa: E501

        Retrieve authenticated user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authenticated_user(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: User
        """
        kwargs['_return_http_data_only'] = True
        return self.get_authenticated_user_with_http_info(organization, **kwargs)  # noqa: E501

    def get_authenticated_user_with_http_info(self, organization, **kwargs):  # noqa: E501
        """get_authenticated_user  # noqa: E501

        Retrieve authenticated user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authenticated_user_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(User, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authenticated_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_authenticated_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "User",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/user/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_classes(self, _class, **kwargs):  # noqa: E501
        """get_classes  # noqa: E501

        Get a list of class names supported by a given class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classes(_class, async_req=True)
        >>> result = thread.get()

        :param _class: Name of the class (required)
        :type _class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_classes_with_http_info(_class, **kwargs)  # noqa: E501

    def get_classes_with_http_info(self, _class, **kwargs):  # noqa: E501
        """get_classes  # noqa: E501

        Get a list of class names supported by a given class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classes_with_http_info(_class, async_req=True)
        >>> result = thread.get()

        :param _class: Name of the class (required)
        :type _class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            '_class'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter '_class' is set
        if self.api_client.client_side_validation and ('_class' not in local_var_params or  # noqa: E501
                                                        local_var_params['_class'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `_class` when calling `get_classes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_class' in local_var_params:
            path_params['class'] = local_var_params['_class']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/classes/{class}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_json_web_key(self, key, **kwargs):  # noqa: E501
        """get_json_web_key  # noqa: E501

        Retrieve JSON Web Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_key(key, async_req=True)
        >>> result = thread.get()

        :param key: Key ID received as part of JWT header field kid (required)
        :type key: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_json_web_key_with_http_info(key, **kwargs)  # noqa: E501

    def get_json_web_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """get_json_web_key  # noqa: E501

        Retrieve JSON Web Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param key: Key ID received as part of JWT header field kid (required)
        :type key: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json_web_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in local_var_params or  # noqa: E501
                                                        local_var_params['key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key` when calling `get_json_web_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in local_var_params:
            path_params['key'] = local_var_params['key']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/jwt-auth/jwks/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_json_web_token(self, **kwargs):  # noqa: E501
        """get_json_web_token  # noqa: E501

        Retrieve JSON Web Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_token(async_req=True)
        >>> result = thread.get()

        :param expiry_time_in_mins: Token expiry time in minutes, default: 30 minutes
        :type expiry_time_in_mins: int
        :param max_expiry_time_in_mins: Maximum token expiry time in minutes, default: 480 minutes
        :type max_expiry_time_in_mins: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_json_web_token_with_http_info(**kwargs)  # noqa: E501

    def get_json_web_token_with_http_info(self, **kwargs):  # noqa: E501
        """get_json_web_token  # noqa: E501

        Retrieve JSON Web Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param expiry_time_in_mins: Token expiry time in minutes, default: 30 minutes
        :type expiry_time_in_mins: int
        :param max_expiry_time_in_mins: Maximum token expiry time in minutes, default: 480 minutes
        :type max_expiry_time_in_mins: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'expiry_time_in_mins',
            'max_expiry_time_in_mins'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json_web_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expiry_time_in_mins' in local_var_params and local_var_params['expiry_time_in_mins'] is not None:  # noqa: E501
            query_params.append(('expiryTimeInMins', local_var_params['expiry_time_in_mins']))  # noqa: E501
        if 'max_expiry_time_in_mins' in local_var_params and local_var_params['max_expiry_time_in_mins'] is not None:  # noqa: E501
            query_params.append(('maxExpiryTimeInMins', local_var_params['max_expiry_time_in_mins']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/jwt-auth/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_organisation(self, organization, **kwargs):  # noqa: E501
        """get_organisation  # noqa: E501

        Retrieve organization details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisation(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Organisation
        """
        kwargs['_return_http_data_only'] = True
        return self.get_organisation_with_http_info(organization, **kwargs)  # noqa: E501

    def get_organisation_with_http_info(self, organization, **kwargs):  # noqa: E501
        """get_organisation  # noqa: E501

        Retrieve organization details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisation_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Organisation, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_organisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "Organisation",
            401: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_organisations(self, **kwargs):  # noqa: E501
        """get_organisations  # noqa: E501

        Retrieve all organizations details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Organisation]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_organisations_with_http_info(**kwargs)  # noqa: E501

    def get_organisations_with_http_info(self, **kwargs):  # noqa: E501
        """get_organisations  # noqa: E501

        Retrieve all organizations details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Organisation], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[Organisation]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline  # noqa: E501

        Retrieve pipeline details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Pipeline
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def get_pipeline_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline  # noqa: E501

        Retrieve pipeline details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Pipeline, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "Pipeline",
            401: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_activities(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_activities  # noqa: E501

        Retrieve all activities details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_activities(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[PipelineActivity]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_activities_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def get_pipeline_activities_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_activities  # noqa: E501

        Retrieve all activities details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_activities_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[PipelineActivity], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_activities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_activities`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[PipelineActivity]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_branch(self, organization, pipeline, branch, **kwargs):  # noqa: E501
        """get_pipeline_branch  # noqa: E501

        Retrieve branch details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch(organization, pipeline, branch, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param branch: Name of the branch (required)
        :type branch: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BranchImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_branch_with_http_info(organization, pipeline, branch, **kwargs)  # noqa: E501

    def get_pipeline_branch_with_http_info(self, organization, pipeline, branch, **kwargs):  # noqa: E501
        """get_pipeline_branch  # noqa: E501

        Retrieve branch details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch_with_http_info(organization, pipeline, branch, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param branch: Name of the branch (required)
        :type branch: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BranchImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'branch'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_branch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_branch`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_branch`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if self.api_client.client_side_validation and ('branch' not in local_var_params or  # noqa: E501
                                                        local_var_params['branch'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `branch` when calling `get_pipeline_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'branch' in local_var_params:
            path_params['branch'] = local_var_params['branch']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "BranchImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_branch_run(self, organization, pipeline, branch, run, **kwargs):  # noqa: E501
        """get_pipeline_branch_run  # noqa: E501

        Retrieve branch run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch_run(organization, pipeline, branch, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param branch: Name of the branch (required)
        :type branch: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineRun
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_branch_run_with_http_info(organization, pipeline, branch, run, **kwargs)  # noqa: E501

    def get_pipeline_branch_run_with_http_info(self, organization, pipeline, branch, run, **kwargs):  # noqa: E501
        """get_pipeline_branch_run  # noqa: E501

        Retrieve branch run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch_run_with_http_info(organization, pipeline, branch, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param branch: Name of the branch (required)
        :type branch: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineRun, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'branch',
            'run'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_branch_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_branch_run`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_branch_run`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if self.api_client.client_side_validation and ('branch' not in local_var_params or  # noqa: E501
                                                        local_var_params['branch'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `branch` when calling `get_pipeline_branch_run`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_branch_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'branch' in local_var_params:
            path_params['branch'] = local_var_params['branch']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineRun",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_branches(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_branches  # noqa: E501

        Retrieve all branches details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branches(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MultibranchPipeline
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_branches_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def get_pipeline_branches_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_branches  # noqa: E501

        Retrieve all branches details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branches_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MultibranchPipeline, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_branches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_branches`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "MultibranchPipeline",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_folder(self, organization, folder, **kwargs):  # noqa: E501
        """get_pipeline_folder  # noqa: E501

        Retrieve pipeline folder for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder(organization, folder, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param folder: Name of the folder (required)
        :type folder: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineFolderImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_folder_with_http_info(organization, folder, **kwargs)  # noqa: E501

    def get_pipeline_folder_with_http_info(self, organization, folder, **kwargs):  # noqa: E501
        """get_pipeline_folder  # noqa: E501

        Retrieve pipeline folder for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder_with_http_info(organization, folder, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param folder: Name of the folder (required)
        :type folder: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineFolderImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'folder'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_folder`")  # noqa: E501
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder` when calling `get_pipeline_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'folder' in local_var_params:
            path_params['folder'] = local_var_params['folder']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineFolderImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{folder}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_folder_pipeline(self, organization, pipeline, folder, **kwargs):  # noqa: E501
        """get_pipeline_folder_pipeline  # noqa: E501

        Retrieve pipeline details for an organization folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder_pipeline(organization, pipeline, folder, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param folder: Name of the folder (required)
        :type folder: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_folder_pipeline_with_http_info(organization, pipeline, folder, **kwargs)  # noqa: E501

    def get_pipeline_folder_pipeline_with_http_info(self, organization, pipeline, folder, **kwargs):  # noqa: E501
        """get_pipeline_folder_pipeline  # noqa: E501

        Retrieve pipeline details for an organization folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder_pipeline_with_http_info(organization, pipeline, folder, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param folder: Name of the folder (required)
        :type folder: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'folder'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_folder_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_folder_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_folder_pipeline`")  # noqa: E501
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder` when calling `get_pipeline_folder_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'folder' in local_var_params:
            path_params['folder'] = local_var_params['folder']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_queue(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_queue  # noqa: E501

        Retrieve queue details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_queue(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[QueueItemImpl]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_queue_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def get_pipeline_queue_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_queue  # noqa: E501

        Retrieve queue details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_queue_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[QueueItemImpl], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_queue" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_queue`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[QueueItemImpl]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run  # noqa: E501

        Retrieve run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineRun
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_with_http_info(organization, pipeline, run, **kwargs)  # noqa: E501

    def get_pipeline_run_with_http_info(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run  # noqa: E501

        Retrieve run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_with_http_info(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineRun, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineRun",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_log(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run_log  # noqa: E501

        Get log for a pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_log(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param start: Start position of the log
        :type start: int
        :param download: Set to true in order to download the file, otherwise it's passed as a response body
        :type download: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_log_with_http_info(organization, pipeline, run, **kwargs)  # noqa: E501

    def get_pipeline_run_log_with_http_info(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run_log  # noqa: E501

        Get log for a pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_log_with_http_info(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param start: Start position of the log
        :type start: int
        :param download: Set to true in order to download the file, otherwise it's passed as a response body
        :type download: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'start',
            'download'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_log" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_log`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_log`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'download' in local_var_params and local_var_params['download'] is not None:  # noqa: E501
            query_params.append(('download', local_var_params['download']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_node(self, organization, pipeline, run, node, **kwargs):  # noqa: E501
        """get_pipeline_run_node  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineRunNode
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_node_with_http_info(organization, pipeline, run, node, **kwargs)  # noqa: E501

    def get_pipeline_run_node_with_http_info(self, organization, pipeline, run, node, **kwargs):  # noqa: E501
        """get_pipeline_run_node  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_with_http_info(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineRunNode, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'node'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_node" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_node`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_node`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_node`")  # noqa: E501
        # verify the required parameter 'node' is set
        if self.api_client.client_side_validation and ('node' not in local_var_params or  # noqa: E501
                                                        local_var_params['node'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `node` when calling `get_pipeline_run_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501
        if 'node' in local_var_params:
            path_params['node'] = local_var_params['node']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineRunNode",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_node_step(self, organization, pipeline, run, node, step, **kwargs):  # noqa: E501
        """get_pipeline_run_node_step  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param step: Name of the step (required)
        :type step: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineStepImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_node_step_with_http_info(organization, pipeline, run, node, step, **kwargs)  # noqa: E501

    def get_pipeline_run_node_step_with_http_info(self, organization, pipeline, run, node, step, **kwargs):  # noqa: E501
        """get_pipeline_run_node_step  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step_with_http_info(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param step: Name of the step (required)
        :type step: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineStepImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'node',
            'step'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_node_step" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_node_step`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_node_step`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_node_step`")  # noqa: E501
        # verify the required parameter 'node' is set
        if self.api_client.client_side_validation and ('node' not in local_var_params or  # noqa: E501
                                                        local_var_params['node'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `node` when calling `get_pipeline_run_node_step`")  # noqa: E501
        # verify the required parameter 'step' is set
        if self.api_client.client_side_validation and ('step' not in local_var_params or  # noqa: E501
                                                        local_var_params['step'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step` when calling `get_pipeline_run_node_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501
        if 'node' in local_var_params:
            path_params['node'] = local_var_params['node']  # noqa: E501
        if 'step' in local_var_params:
            path_params['step'] = local_var_params['step']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineStepImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_node_step_log(self, organization, pipeline, run, node, step, **kwargs):  # noqa: E501
        """get_pipeline_run_node_step_log  # noqa: E501

        Get log for a pipeline run node step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step_log(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param step: Name of the step (required)
        :type step: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_node_step_log_with_http_info(organization, pipeline, run, node, step, **kwargs)  # noqa: E501

    def get_pipeline_run_node_step_log_with_http_info(self, organization, pipeline, run, node, step, **kwargs):  # noqa: E501
        """get_pipeline_run_node_step_log  # noqa: E501

        Get log for a pipeline run node step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step_log_with_http_info(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param step: Name of the step (required)
        :type step: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'node',
            'step'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_node_step_log" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_node_step_log`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_node_step_log`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_node_step_log`")  # noqa: E501
        # verify the required parameter 'node' is set
        if self.api_client.client_side_validation and ('node' not in local_var_params or  # noqa: E501
                                                        local_var_params['node'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `node` when calling `get_pipeline_run_node_step_log`")  # noqa: E501
        # verify the required parameter 'step' is set
        if self.api_client.client_side_validation and ('step' not in local_var_params or  # noqa: E501
                                                        local_var_params['step'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step` when calling `get_pipeline_run_node_step_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501
        if 'node' in local_var_params:
            path_params['node'] = local_var_params['node']  # noqa: E501
        if 'step' in local_var_params:
            path_params['step'] = local_var_params['step']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_node_steps(self, organization, pipeline, run, node, **kwargs):  # noqa: E501
        """get_pipeline_run_node_steps  # noqa: E501

        Retrieve run node steps details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_steps(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[PipelineStepImpl]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_node_steps_with_http_info(organization, pipeline, run, node, **kwargs)  # noqa: E501

    def get_pipeline_run_node_steps_with_http_info(self, organization, pipeline, run, node, **kwargs):  # noqa: E501
        """get_pipeline_run_node_steps  # noqa: E501

        Retrieve run node steps details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_steps_with_http_info(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param node: Name of the node (required)
        :type node: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[PipelineStepImpl], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'node'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_node_steps" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_node_steps`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_node_steps`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_node_steps`")  # noqa: E501
        # verify the required parameter 'node' is set
        if self.api_client.client_side_validation and ('node' not in local_var_params or  # noqa: E501
                                                        local_var_params['node'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `node` when calling `get_pipeline_run_node_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501
        if 'node' in local_var_params:
            path_params['node'] = local_var_params['node']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[PipelineStepImpl]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_run_nodes(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run_nodes  # noqa: E501

        Retrieve run nodes details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_nodes(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[PipelineRunNode]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_run_nodes_with_http_info(organization, pipeline, run, **kwargs)  # noqa: E501

    def get_pipeline_run_nodes_with_http_info(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """get_pipeline_run_nodes  # noqa: E501

        Retrieve run nodes details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_nodes_with_http_info(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[PipelineRunNode], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_nodes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_run_nodes`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_run_nodes`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `get_pipeline_run_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[PipelineRunNode]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_runs(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_runs  # noqa: E501

        Retrieve all runs details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_runs(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[PipelineRun]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_runs_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def get_pipeline_runs_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """get_pipeline_runs  # noqa: E501

        Retrieve all runs details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_runs_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[PipelineRun], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_runs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipeline_runs`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `get_pipeline_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[PipelineRun]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipelines(self, organization, **kwargs):  # noqa: E501
        """get_pipelines  # noqa: E501

        Retrieve all pipelines details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipelines(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Pipeline]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipelines_with_http_info(organization, **kwargs)  # noqa: E501

    def get_pipelines_with_http_info(self, organization, **kwargs):  # noqa: E501
        """get_pipelines  # noqa: E501

        Retrieve all pipelines details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipelines_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Pipeline], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipelines" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_pipelines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[Pipeline]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_scm(self, organization, scm, **kwargs):  # noqa: E501
        """get_scm  # noqa: E501

        Retrieve SCM details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm(organization, scm, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GithubScm
        """
        kwargs['_return_http_data_only'] = True
        return self.get_scm_with_http_info(organization, scm, **kwargs)  # noqa: E501

    def get_scm_with_http_info(self, organization, scm, **kwargs):  # noqa: E501
        """get_scm  # noqa: E501

        Retrieve SCM details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_with_http_info(organization, scm, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GithubScm, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'scm'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_scm`")  # noqa: E501
        # verify the required parameter 'scm' is set
        if self.api_client.client_side_validation and ('scm' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm` when calling `get_scm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'scm' in local_var_params:
            path_params['scm'] = local_var_params['scm']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "GithubScm",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/scm/{scm}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_scm_organisation_repositories(self, organization, scm, scm_organisation, **kwargs):  # noqa: E501
        """get_scm_organisation_repositories  # noqa: E501

        Retrieve SCM organization repositories details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repositories(organization, scm, scm_organisation, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param scm_organisation: Name of the SCM organization (required)
        :type scm_organisation: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param page_size: Number of items in a page
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[GithubOrganization]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_scm_organisation_repositories_with_http_info(organization, scm, scm_organisation, **kwargs)  # noqa: E501

    def get_scm_organisation_repositories_with_http_info(self, organization, scm, scm_organisation, **kwargs):  # noqa: E501
        """get_scm_organisation_repositories  # noqa: E501

        Retrieve SCM organization repositories details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repositories_with_http_info(organization, scm, scm_organisation, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param scm_organisation: Name of the SCM organization (required)
        :type scm_organisation: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param page_size: Number of items in a page
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[GithubOrganization], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'scm',
            'scm_organisation',
            'credential_id',
            'page_size',
            'page_number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scm_organisation_repositories" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_scm_organisation_repositories`")  # noqa: E501
        # verify the required parameter 'scm' is set
        if self.api_client.client_side_validation and ('scm' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm` when calling `get_scm_organisation_repositories`")  # noqa: E501
        # verify the required parameter 'scm_organisation' is set
        if self.api_client.client_side_validation and ('scm_organisation' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm_organisation'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm_organisation` when calling `get_scm_organisation_repositories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'scm' in local_var_params:
            path_params['scm'] = local_var_params['scm']  # noqa: E501
        if 'scm_organisation' in local_var_params:
            path_params['scmOrganisation'] = local_var_params['scm_organisation']  # noqa: E501

        query_params = []
        if 'credential_id' in local_var_params and local_var_params['credential_id'] is not None:  # noqa: E501
            query_params.append(('credentialId', local_var_params['credential_id']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[GithubOrganization]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_scm_organisation_repository(self, organization, scm, scm_organisation, repository, **kwargs):  # noqa: E501
        """get_scm_organisation_repository  # noqa: E501

        Retrieve SCM organization repository details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repository(organization, scm, scm_organisation, repository, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param scm_organisation: Name of the SCM organization (required)
        :type scm_organisation: str
        :param repository: Name of the SCM repository (required)
        :type repository: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[GithubOrganization]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_scm_organisation_repository_with_http_info(organization, scm, scm_organisation, repository, **kwargs)  # noqa: E501

    def get_scm_organisation_repository_with_http_info(self, organization, scm, scm_organisation, repository, **kwargs):  # noqa: E501
        """get_scm_organisation_repository  # noqa: E501

        Retrieve SCM organization repository details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repository_with_http_info(organization, scm, scm_organisation, repository, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param scm_organisation: Name of the SCM organization (required)
        :type scm_organisation: str
        :param repository: Name of the SCM repository (required)
        :type repository: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[GithubOrganization], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'scm',
            'scm_organisation',
            'repository',
            'credential_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scm_organisation_repository" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_scm_organisation_repository`")  # noqa: E501
        # verify the required parameter 'scm' is set
        if self.api_client.client_side_validation and ('scm' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm` when calling `get_scm_organisation_repository`")  # noqa: E501
        # verify the required parameter 'scm_organisation' is set
        if self.api_client.client_side_validation and ('scm_organisation' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm_organisation'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm_organisation` when calling `get_scm_organisation_repository`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in local_var_params or  # noqa: E501
                                                        local_var_params['repository'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `repository` when calling `get_scm_organisation_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'scm' in local_var_params:
            path_params['scm'] = local_var_params['scm']  # noqa: E501
        if 'scm_organisation' in local_var_params:
            path_params['scmOrganisation'] = local_var_params['scm_organisation']  # noqa: E501
        if 'repository' in local_var_params:
            path_params['repository'] = local_var_params['repository']  # noqa: E501

        query_params = []
        if 'credential_id' in local_var_params and local_var_params['credential_id'] is not None:  # noqa: E501
            query_params.append(('credentialId', local_var_params['credential_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[GithubOrganization]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_scm_organisations(self, organization, scm, **kwargs):  # noqa: E501
        """get_scm_organisations  # noqa: E501

        Retrieve SCM organizations details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisations(organization, scm, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[GithubOrganization]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_scm_organisations_with_http_info(organization, scm, **kwargs)  # noqa: E501

    def get_scm_organisations_with_http_info(self, organization, scm, **kwargs):  # noqa: E501
        """get_scm_organisations  # noqa: E501

        Retrieve SCM organizations details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisations_with_http_info(organization, scm, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param scm: Name of SCM (required)
        :type scm: str
        :param credential_id: Credential ID
        :type credential_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[GithubOrganization], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'scm',
            'credential_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scm_organisations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_scm_organisations`")  # noqa: E501
        # verify the required parameter 'scm' is set
        if self.api_client.client_side_validation and ('scm' not in local_var_params or  # noqa: E501
                                                        local_var_params['scm'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scm` when calling `get_scm_organisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'scm' in local_var_params:
            path_params['scm'] = local_var_params['scm']  # noqa: E501

        query_params = []
        if 'credential_id' in local_var_params and local_var_params['credential_id'] is not None:  # noqa: E501
            query_params.append(('credentialId', local_var_params['credential_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[GithubOrganization]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/scm/{scm}/organizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_user(self, organization, user, **kwargs):  # noqa: E501
        """get_user  # noqa: E501

        Retrieve user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user(organization, user, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param user: Name of the user (required)
        :type user: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: User
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_with_http_info(organization, user, **kwargs)  # noqa: E501

    def get_user_with_http_info(self, organization, user, **kwargs):  # noqa: E501
        """get_user  # noqa: E501

        Retrieve user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_with_http_info(organization, user, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param user: Name of the user (required)
        :type user: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(User, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'user'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in local_var_params or  # noqa: E501
                                                        local_var_params['user'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'user' in local_var_params:
            path_params['user'] = local_var_params['user']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "User",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/users/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_user_favorites(self, user, **kwargs):  # noqa: E501
        """get_user_favorites  # noqa: E501

        Retrieve user favorites details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_favorites(user, async_req=True)
        >>> result = thread.get()

        :param user: Name of the user (required)
        :type user: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[FavoriteImpl]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_favorites_with_http_info(user, **kwargs)  # noqa: E501

    def get_user_favorites_with_http_info(self, user, **kwargs):  # noqa: E501
        """get_user_favorites  # noqa: E501

        Retrieve user favorites details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_favorites_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param user: Name of the user (required)
        :type user: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[FavoriteImpl], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'user'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_favorites" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in local_var_params or  # noqa: E501
                                                        local_var_params['user'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user` when calling `get_user_favorites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in local_var_params:
            path_params['user'] = local_var_params['user']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "list[FavoriteImpl]",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/users/{user}/favorites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_users(self, organization, **kwargs):  # noqa: E501
        """get_users  # noqa: E501

        Retrieve users details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: User
        """
        kwargs['_return_http_data_only'] = True
        return self.get_users_with_http_info(organization, **kwargs)  # noqa: E501

    def get_users_with_http_info(self, organization, **kwargs):  # noqa: E501
        """get_users  # noqa: E501

        Retrieve users details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(User, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `get_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "User",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_pipeline_run(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """post_pipeline_run  # noqa: E501

        Replay an organization pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueueItemImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.post_pipeline_run_with_http_info(organization, pipeline, run, **kwargs)  # noqa: E501

    def post_pipeline_run_with_http_info(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """post_pipeline_run  # noqa: E501

        Replay an organization pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_run_with_http_info(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QueueItemImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `post_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `post_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `post_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "QueueItemImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_pipeline_runs(self, organization, pipeline, **kwargs):  # noqa: E501
        """post_pipeline_runs  # noqa: E501

        Start a build for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_runs(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueueItemImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.post_pipeline_runs_with_http_info(organization, pipeline, **kwargs)  # noqa: E501

    def post_pipeline_runs_with_http_info(self, organization, pipeline, **kwargs):  # noqa: E501
        """post_pipeline_runs  # noqa: E501

        Start a build for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_runs_with_http_info(organization, pipeline, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QueueItemImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pipeline_runs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `post_pipeline_runs`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `post_pipeline_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "QueueItemImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_pipeline_favorite(self, organization, pipeline, unknown_base_type, **kwargs):  # noqa: E501
        """put_pipeline_favorite  # noqa: E501

        Favorite/unfavorite a pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_favorite(organization, pipeline, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param unknown_base_type: Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite (required)
        :type unknown_base_type: UNKNOWN_BASE_TYPE
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FavoriteImpl
        """
        kwargs['_return_http_data_only'] = True
        return self.put_pipeline_favorite_with_http_info(organization, pipeline, unknown_base_type, **kwargs)  # noqa: E501

    def put_pipeline_favorite_with_http_info(self, organization, pipeline, unknown_base_type, **kwargs):  # noqa: E501
        """put_pipeline_favorite  # noqa: E501

        Favorite/unfavorite a pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_favorite_with_http_info(organization, pipeline, unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param unknown_base_type: Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite (required)
        :type unknown_base_type: UNKNOWN_BASE_TYPE
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FavoriteImpl, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_pipeline_favorite" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `put_pipeline_favorite`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `put_pipeline_favorite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "FavoriteImpl",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def put_pipeline_run(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """put_pipeline_run  # noqa: E501

        Stop a build of an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param blocking: Set to true to make blocking stop, default: false
        :type blocking: str
        :param time_out_in_secs: Timeout in seconds, default: 10 seconds
        :type time_out_in_secs: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineRun
        """
        kwargs['_return_http_data_only'] = True
        return self.put_pipeline_run_with_http_info(organization, pipeline, run, **kwargs)  # noqa: E501

    def put_pipeline_run_with_http_info(self, organization, pipeline, run, **kwargs):  # noqa: E501
        """put_pipeline_run  # noqa: E501

        Stop a build of an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_run_with_http_info(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        :param organization: Name of the organization (required)
        :type organization: str
        :param pipeline: Name of the pipeline (required)
        :type pipeline: str
        :param run: Name of the run (required)
        :type run: str
        :param blocking: Set to true to make blocking stop, default: false
        :type blocking: str
        :param time_out_in_secs: Timeout in seconds, default: 10 seconds
        :type time_out_in_secs: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineRun, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'organization',
            'pipeline',
            'run',
            'blocking',
            'time_out_in_secs'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_pipeline_run" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization' is set
        if self.api_client.client_side_validation and ('organization' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization` when calling `put_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if self.api_client.client_side_validation and ('pipeline' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline` when calling `put_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run' is set
        if self.api_client.client_side_validation and ('run' not in local_var_params or  # noqa: E501
                                                        local_var_params['run'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `run` when calling `put_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in local_var_params:
            path_params['organization'] = local_var_params['organization']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501
        if 'run' in local_var_params:
            path_params['run'] = local_var_params['run']  # noqa: E501

        query_params = []
        if 'blocking' in local_var_params and local_var_params['blocking'] is not None:  # noqa: E501
            query_params.append(('blocking', local_var_params['blocking']))  # noqa: E501
        if 'time_out_in_secs' in local_var_params and local_var_params['time_out_in_secs'] is not None:  # noqa: E501
            query_params.append(('timeOutInSecs', local_var_params['time_out_in_secs']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "PipelineRun",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def search(self, q, **kwargs):  # noqa: E501
        """search  # noqa: E501

        Search for any resource details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(q, async_req=True)
        >>> result = thread.get()

        :param q: Query string (required)
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.search_with_http_info(q, **kwargs)  # noqa: E501

    def search_with_http_info(self, q, **kwargs):  # noqa: E501
        """search  # noqa: E501

        Search for any resource details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_with_http_info(q, async_req=True)
        >>> result = thread.get()

        :param q: Query string (required)
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'q'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'q' is set
        if self.api_client.client_side_validation and ('q' not in local_var_params or  # noqa: E501
                                                        local_var_params['q'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `q` when calling `search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/search/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def search_classes(self, q, **kwargs):  # noqa: E501
        """search_classes  # noqa: E501

        Get classes details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_classes(q, async_req=True)
        >>> result = thread.get()

        :param q: Query string containing an array of class names (required)
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.search_classes_with_http_info(q, **kwargs)  # noqa: E501

    def search_classes_with_http_info(self, q, **kwargs):  # noqa: E501
        """search_classes  # noqa: E501

        Get classes details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_classes_with_http_info(q, async_req=True)
        >>> result = thread.get()

        :param q: Query string containing an array of class names (required)
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'q'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_classes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'q' is set
        if self.api_client.client_side_validation and ('q' not in local_var_params or  # noqa: E501
                                                        local_var_params['q'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `q` when calling `search_classes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jenkins_auth']  # noqa: E501

        response_types_map = {
            200: "str",
            401: None,
            403: None,
        }

        return self.api_client.call_api(
            '/blue/rest/classes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
