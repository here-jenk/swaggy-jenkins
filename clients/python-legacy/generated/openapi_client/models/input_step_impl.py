# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 1.5.1-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class InputStepImpl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'links': 'InputStepImpllinks',
        'id': 'str',
        'message': 'str',
        'ok': 'str',
        'parameters': 'list[StringParameterDefinition]',
        'submitter': 'str'
    }

    attribute_map = {
        '_class': '_class',
        'links': '_links',
        'id': 'id',
        'message': 'message',
        'ok': 'ok',
        'parameters': 'parameters',
        'submitter': 'submitter'
    }

    def __init__(self, _class=None, links=None, id=None, message=None, ok=None, parameters=None, submitter=None, local_vars_configuration=None):  # noqa: E501
        """InputStepImpl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self.__class = None
        self._links = None
        self._id = None
        self._message = None
        self._ok = None
        self._parameters = None
        self._submitter = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if ok is not None:
            self.ok = ok
        if parameters is not None:
            self.parameters = parameters
        if submitter is not None:
            self.submitter = submitter

    @property
    def _class(self):
        """Gets the _class of this InputStepImpl.  # noqa: E501


        :return: The _class of this InputStepImpl.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this InputStepImpl.


        :param _class: The _class of this InputStepImpl.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    @property
    def links(self):
        """Gets the links of this InputStepImpl.  # noqa: E501


        :return: The links of this InputStepImpl.  # noqa: E501
        :rtype: InputStepImpllinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InputStepImpl.


        :param links: The links of this InputStepImpl.  # noqa: E501
        :type links: InputStepImpllinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this InputStepImpl.  # noqa: E501


        :return: The id of this InputStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputStepImpl.


        :param id: The id of this InputStepImpl.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this InputStepImpl.  # noqa: E501


        :return: The message of this InputStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InputStepImpl.


        :param message: The message of this InputStepImpl.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def ok(self):
        """Gets the ok of this InputStepImpl.  # noqa: E501


        :return: The ok of this InputStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this InputStepImpl.


        :param ok: The ok of this InputStepImpl.  # noqa: E501
        :type ok: str
        """

        self._ok = ok

    @property
    def parameters(self):
        """Gets the parameters of this InputStepImpl.  # noqa: E501


        :return: The parameters of this InputStepImpl.  # noqa: E501
        :rtype: list[StringParameterDefinition]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InputStepImpl.


        :param parameters: The parameters of this InputStepImpl.  # noqa: E501
        :type parameters: list[StringParameterDefinition]
        """

        self._parameters = parameters

    @property
    def submitter(self):
        """Gets the submitter of this InputStepImpl.  # noqa: E501


        :return: The submitter of this InputStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter):
        """Sets the submitter of this InputStepImpl.


        :param submitter: The submitter of this InputStepImpl.  # noqa: E501
        :type submitter: str
        """

        self._submitter = submitter

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputStepImpl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InputStepImpl):
            return True

        return self.to_dict() != other.to_dict()
