# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 1.5.1-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class HudsonMasterComputerexecutors(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_executable': 'FreeStyleBuild',
        'idle': 'bool',
        'likely_stuck': 'bool',
        'number': 'int',
        'progress': 'int',
        '_class': 'str'
    }

    attribute_map = {
        'current_executable': 'currentExecutable',
        'idle': 'idle',
        'likely_stuck': 'likelyStuck',
        'number': 'number',
        'progress': 'progress',
        '_class': '_class'
    }

    def __init__(self, current_executable=None, idle=None, likely_stuck=None, number=None, progress=None, _class=None, local_vars_configuration=None):  # noqa: E501
        """HudsonMasterComputerexecutors - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_executable = None
        self._idle = None
        self._likely_stuck = None
        self._number = None
        self._progress = None
        self.__class = None
        self.discriminator = None

        if current_executable is not None:
            self.current_executable = current_executable
        if idle is not None:
            self.idle = idle
        if likely_stuck is not None:
            self.likely_stuck = likely_stuck
        if number is not None:
            self.number = number
        if progress is not None:
            self.progress = progress
        if _class is not None:
            self._class = _class

    @property
    def current_executable(self):
        """Gets the current_executable of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The current_executable of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: FreeStyleBuild
        """
        return self._current_executable

    @current_executable.setter
    def current_executable(self, current_executable):
        """Sets the current_executable of this HudsonMasterComputerexecutors.


        :param current_executable: The current_executable of this HudsonMasterComputerexecutors.  # noqa: E501
        :type current_executable: FreeStyleBuild
        """

        self._current_executable = current_executable

    @property
    def idle(self):
        """Gets the idle of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The idle of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: bool
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this HudsonMasterComputerexecutors.


        :param idle: The idle of this HudsonMasterComputerexecutors.  # noqa: E501
        :type idle: bool
        """

        self._idle = idle

    @property
    def likely_stuck(self):
        """Gets the likely_stuck of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The likely_stuck of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: bool
        """
        return self._likely_stuck

    @likely_stuck.setter
    def likely_stuck(self, likely_stuck):
        """Sets the likely_stuck of this HudsonMasterComputerexecutors.


        :param likely_stuck: The likely_stuck of this HudsonMasterComputerexecutors.  # noqa: E501
        :type likely_stuck: bool
        """

        self._likely_stuck = likely_stuck

    @property
    def number(self):
        """Gets the number of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The number of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this HudsonMasterComputerexecutors.


        :param number: The number of this HudsonMasterComputerexecutors.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def progress(self):
        """Gets the progress of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The progress of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this HudsonMasterComputerexecutors.


        :param progress: The progress of this HudsonMasterComputerexecutors.  # noqa: E501
        :type progress: int
        """

        self._progress = progress

    @property
    def _class(self):
        """Gets the _class of this HudsonMasterComputerexecutors.  # noqa: E501


        :return: The _class of this HudsonMasterComputerexecutors.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this HudsonMasterComputerexecutors.


        :param _class: The _class of this HudsonMasterComputerexecutors.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HudsonMasterComputerexecutors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HudsonMasterComputerexecutors):
            return True

        return self.to_dict() != other.to_dict()
