# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 1.1.2-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GithubContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'sha': 'str',
        '_class': 'str',
        'repo': 'str',
        'size': 'int',
        'owner': 'str',
        'path': 'str',
        'base64_data': 'str'
    }

    attribute_map = {
        'name': 'name',
        'sha': 'sha',
        '_class': '_class',
        'repo': 'repo',
        'size': 'size',
        'owner': 'owner',
        'path': 'path',
        'base64_data': 'base64Data'
    }

    def __init__(self, name=None, sha=None, _class=None, repo=None, size=None, owner=None, path=None, base64_data=None, local_vars_configuration=None):  # noqa: E501
        """GithubContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._sha = None
        self.__class = None
        self._repo = None
        self._size = None
        self._owner = None
        self._path = None
        self._base64_data = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if sha is not None:
            self.sha = sha
        if _class is not None:
            self._class = _class
        if repo is not None:
            self.repo = repo
        if size is not None:
            self.size = size
        if owner is not None:
            self.owner = owner
        if path is not None:
            self.path = path
        if base64_data is not None:
            self.base64_data = base64_data

    @property
    def name(self):
        """Gets the name of this GithubContent.  # noqa: E501


        :return: The name of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubContent.


        :param name: The name of this GithubContent.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def sha(self):
        """Gets the sha of this GithubContent.  # noqa: E501


        :return: The sha of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GithubContent.


        :param sha: The sha of this GithubContent.  # noqa: E501
        :type sha: str
        """

        self._sha = sha

    @property
    def _class(self):
        """Gets the _class of this GithubContent.  # noqa: E501


        :return: The _class of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this GithubContent.


        :param _class: The _class of this GithubContent.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    @property
    def repo(self):
        """Gets the repo of this GithubContent.  # noqa: E501


        :return: The repo of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this GithubContent.


        :param repo: The repo of this GithubContent.  # noqa: E501
        :type repo: str
        """

        self._repo = repo

    @property
    def size(self):
        """Gets the size of this GithubContent.  # noqa: E501


        :return: The size of this GithubContent.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GithubContent.


        :param size: The size of this GithubContent.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def owner(self):
        """Gets the owner of this GithubContent.  # noqa: E501


        :return: The owner of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GithubContent.


        :param owner: The owner of this GithubContent.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this GithubContent.  # noqa: E501


        :return: The path of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GithubContent.


        :param path: The path of this GithubContent.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def base64_data(self):
        """Gets the base64_data of this GithubContent.  # noqa: E501


        :return: The base64_data of this GithubContent.  # noqa: E501
        :rtype: str
        """
        return self._base64_data

    @base64_data.setter
    def base64_data(self, base64_data):
        """Sets the base64_data of this GithubContent.


        :param base64_data: The base64_data of this GithubContent.  # noqa: E501
        :type base64_data: str
        """

        self._base64_data = base64_data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubContent):
            return True

        return self.to_dict() != other.to_dict()
