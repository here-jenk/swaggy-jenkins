# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 1.5.1-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class QueueItemImpl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'expected_build_number': 'int',
        'id': 'str',
        'pipeline': 'str',
        'queued_time': 'int'
    }

    attribute_map = {
        '_class': '_class',
        'expected_build_number': 'expectedBuildNumber',
        'id': 'id',
        'pipeline': 'pipeline',
        'queued_time': 'queuedTime'
    }

    def __init__(self, _class=None, expected_build_number=None, id=None, pipeline=None, queued_time=None, local_vars_configuration=None):  # noqa: E501
        """QueueItemImpl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self.__class = None
        self._expected_build_number = None
        self._id = None
        self._pipeline = None
        self._queued_time = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if expected_build_number is not None:
            self.expected_build_number = expected_build_number
        if id is not None:
            self.id = id
        if pipeline is not None:
            self.pipeline = pipeline
        if queued_time is not None:
            self.queued_time = queued_time

    @property
    def _class(self):
        """Gets the _class of this QueueItemImpl.  # noqa: E501


        :return: The _class of this QueueItemImpl.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this QueueItemImpl.


        :param _class: The _class of this QueueItemImpl.  # noqa: E501
        :type _class: str
        """

        self.__class = _class

    @property
    def expected_build_number(self):
        """Gets the expected_build_number of this QueueItemImpl.  # noqa: E501


        :return: The expected_build_number of this QueueItemImpl.  # noqa: E501
        :rtype: int
        """
        return self._expected_build_number

    @expected_build_number.setter
    def expected_build_number(self, expected_build_number):
        """Sets the expected_build_number of this QueueItemImpl.


        :param expected_build_number: The expected_build_number of this QueueItemImpl.  # noqa: E501
        :type expected_build_number: int
        """

        self._expected_build_number = expected_build_number

    @property
    def id(self):
        """Gets the id of this QueueItemImpl.  # noqa: E501


        :return: The id of this QueueItemImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueItemImpl.


        :param id: The id of this QueueItemImpl.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def pipeline(self):
        """Gets the pipeline of this QueueItemImpl.  # noqa: E501


        :return: The pipeline of this QueueItemImpl.  # noqa: E501
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this QueueItemImpl.


        :param pipeline: The pipeline of this QueueItemImpl.  # noqa: E501
        :type pipeline: str
        """

        self._pipeline = pipeline

    @property
    def queued_time(self):
        """Gets the queued_time of this QueueItemImpl.  # noqa: E501


        :return: The queued_time of this QueueItemImpl.  # noqa: E501
        :rtype: int
        """
        return self._queued_time

    @queued_time.setter
    def queued_time(self, queued_time):
        """Sets the queued_time of this QueueItemImpl.


        :param queued_time: The queued_time of this QueueItemImpl.  # noqa: E501
        :type queued_time: int
        """

        self._queued_time = queued_time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueItemImpl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueItemImpl):
            return True

        return self.to_dict() != other.to_dict()
