/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.5.1-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputerexecutors
    /// </summary>
    [DataContract(Name = "HudsonMasterComputerexecutors")]
    public partial class HudsonMasterComputerexecutors : IEquatable<HudsonMasterComputerexecutors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputerexecutors" /> class.
        /// </summary>
        /// <param name="currentExecutable">currentExecutable.</param>
        /// <param name="idle">idle.</param>
        /// <param name="likelyStuck">likelyStuck.</param>
        /// <param name="number">number.</param>
        /// <param name="progress">progress.</param>
        /// <param name="_class">_class.</param>
        public HudsonMasterComputerexecutors(FreeStyleBuild currentExecutable = default(FreeStyleBuild), bool idle = default(bool), bool likelyStuck = default(bool), int number = default(int), int progress = default(int), string _class = default(string))
        {
            this.CurrentExecutable = currentExecutable;
            this.Idle = idle;
            this.LikelyStuck = likelyStuck;
            this.Number = number;
            this.Progress = progress;
            this.Class = _class;
        }

        /// <summary>
        /// Gets or Sets CurrentExecutable
        /// </summary>
        [DataMember(Name = "currentExecutable", EmitDefaultValue = false)]
        public FreeStyleBuild CurrentExecutable { get; set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [DataMember(Name = "idle", EmitDefaultValue = true)]
        public bool Idle { get; set; }

        /// <summary>
        /// Gets or Sets LikelyStuck
        /// </summary>
        [DataMember(Name = "likelyStuck", EmitDefaultValue = true)]
        public bool LikelyStuck { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public int Progress { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name = "_class", EmitDefaultValue = false)]
        public string Class { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputerexecutors {\n");
            sb.Append("  CurrentExecutable: ").Append(CurrentExecutable).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  LikelyStuck: ").Append(LikelyStuck).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HudsonMasterComputerexecutors);
        }

        /// <summary>
        /// Returns true if HudsonMasterComputerexecutors instances are equal
        /// </summary>
        /// <param name="input">Instance of HudsonMasterComputerexecutors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonMasterComputerexecutors input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrentExecutable == input.CurrentExecutable ||
                    (this.CurrentExecutable != null &&
                    this.CurrentExecutable.Equals(input.CurrentExecutable))
                ) && 
                (
                    this.Idle == input.Idle ||
                    this.Idle.Equals(input.Idle)
                ) && 
                (
                    this.LikelyStuck == input.LikelyStuck ||
                    this.LikelyStuck.Equals(input.LikelyStuck)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentExecutable != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentExecutable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Idle.GetHashCode();
                hashCode = (hashCode * 59) + this.LikelyStuck.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                if (this.Class != null)
                {
                    hashCode = (hashCode * 59) + this.Class.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
