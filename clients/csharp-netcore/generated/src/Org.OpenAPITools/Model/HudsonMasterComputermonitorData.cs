/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputermonitorData
    /// </summary>
    [DataContract(Name = "HudsonMasterComputermonitorData")]
    public partial class HudsonMasterComputermonitorData : IEquatable<HudsonMasterComputermonitorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputermonitorData" /> class.
        /// </summary>
        /// <param name="hudsonNodeMonitorsSwapSpaceMonitor">hudsonNodeMonitorsSwapSpaceMonitor.</param>
        /// <param name="hudsonNodeMonitorsTemporarySpaceMonitor">hudsonNodeMonitorsTemporarySpaceMonitor.</param>
        /// <param name="hudsonNodeMonitorsDiskSpaceMonitor">hudsonNodeMonitorsDiskSpaceMonitor.</param>
        /// <param name="hudsonNodeMonitorsArchitectureMonitor">hudsonNodeMonitorsArchitectureMonitor.</param>
        /// <param name="hudsonNodeMonitorsResponseTimeMonitor">hudsonNodeMonitorsResponseTimeMonitor.</param>
        /// <param name="hudsonNodeMonitorsClockMonitor">hudsonNodeMonitorsClockMonitor.</param>
        /// <param name="_class">_class.</param>
        public HudsonMasterComputermonitorData(SwapSpaceMonitorMemoryUsage2 hudsonNodeMonitorsSwapSpaceMonitor = default(SwapSpaceMonitorMemoryUsage2), DiskSpaceMonitorDescriptorDiskSpace hudsonNodeMonitorsTemporarySpaceMonitor = default(DiskSpaceMonitorDescriptorDiskSpace), DiskSpaceMonitorDescriptorDiskSpace hudsonNodeMonitorsDiskSpaceMonitor = default(DiskSpaceMonitorDescriptorDiskSpace), string hudsonNodeMonitorsArchitectureMonitor = default(string), ResponseTimeMonitorData hudsonNodeMonitorsResponseTimeMonitor = default(ResponseTimeMonitorData), ClockDifference hudsonNodeMonitorsClockMonitor = default(ClockDifference), string _class = default(string))
        {
            this.HudsonNodeMonitorsSwapSpaceMonitor = hudsonNodeMonitorsSwapSpaceMonitor;
            this.HudsonNodeMonitorsTemporarySpaceMonitor = hudsonNodeMonitorsTemporarySpaceMonitor;
            this.HudsonNodeMonitorsDiskSpaceMonitor = hudsonNodeMonitorsDiskSpaceMonitor;
            this.HudsonNodeMonitorsArchitectureMonitor = hudsonNodeMonitorsArchitectureMonitor;
            this.HudsonNodeMonitorsResponseTimeMonitor = hudsonNodeMonitorsResponseTimeMonitor;
            this.HudsonNodeMonitorsClockMonitor = hudsonNodeMonitorsClockMonitor;
            this.Class = _class;
        }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsSwapSpaceMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.SwapSpaceMonitor", EmitDefaultValue = false)]
        public SwapSpaceMonitorMemoryUsage2 HudsonNodeMonitorsSwapSpaceMonitor { get; set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsTemporarySpaceMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.TemporarySpaceMonitor", EmitDefaultValue = false)]
        public DiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsTemporarySpaceMonitor { get; set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsDiskSpaceMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.DiskSpaceMonitor", EmitDefaultValue = false)]
        public DiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsDiskSpaceMonitor { get; set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsArchitectureMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.ArchitectureMonitor", EmitDefaultValue = false)]
        public string HudsonNodeMonitorsArchitectureMonitor { get; set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsResponseTimeMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.ResponseTimeMonitor", EmitDefaultValue = false)]
        public ResponseTimeMonitorData HudsonNodeMonitorsResponseTimeMonitor { get; set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsClockMonitor
        /// </summary>
        [DataMember(Name = "hudson.node_monitors.ClockMonitor", EmitDefaultValue = false)]
        public ClockDifference HudsonNodeMonitorsClockMonitor { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name = "_class", EmitDefaultValue = false)]
        public string Class { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputermonitorData {\n");
            sb.Append("  HudsonNodeMonitorsSwapSpaceMonitor: ").Append(HudsonNodeMonitorsSwapSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsTemporarySpaceMonitor: ").Append(HudsonNodeMonitorsTemporarySpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsDiskSpaceMonitor: ").Append(HudsonNodeMonitorsDiskSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsArchitectureMonitor: ").Append(HudsonNodeMonitorsArchitectureMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsResponseTimeMonitor: ").Append(HudsonNodeMonitorsResponseTimeMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsClockMonitor: ").Append(HudsonNodeMonitorsClockMonitor).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HudsonMasterComputermonitorData);
        }

        /// <summary>
        /// Returns true if HudsonMasterComputermonitorData instances are equal
        /// </summary>
        /// <param name="input">Instance of HudsonMasterComputermonitorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonMasterComputermonitorData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HudsonNodeMonitorsSwapSpaceMonitor == input.HudsonNodeMonitorsSwapSpaceMonitor ||
                    (this.HudsonNodeMonitorsSwapSpaceMonitor != null &&
                    this.HudsonNodeMonitorsSwapSpaceMonitor.Equals(input.HudsonNodeMonitorsSwapSpaceMonitor))
                ) && 
                (
                    this.HudsonNodeMonitorsTemporarySpaceMonitor == input.HudsonNodeMonitorsTemporarySpaceMonitor ||
                    (this.HudsonNodeMonitorsTemporarySpaceMonitor != null &&
                    this.HudsonNodeMonitorsTemporarySpaceMonitor.Equals(input.HudsonNodeMonitorsTemporarySpaceMonitor))
                ) && 
                (
                    this.HudsonNodeMonitorsDiskSpaceMonitor == input.HudsonNodeMonitorsDiskSpaceMonitor ||
                    (this.HudsonNodeMonitorsDiskSpaceMonitor != null &&
                    this.HudsonNodeMonitorsDiskSpaceMonitor.Equals(input.HudsonNodeMonitorsDiskSpaceMonitor))
                ) && 
                (
                    this.HudsonNodeMonitorsArchitectureMonitor == input.HudsonNodeMonitorsArchitectureMonitor ||
                    (this.HudsonNodeMonitorsArchitectureMonitor != null &&
                    this.HudsonNodeMonitorsArchitectureMonitor.Equals(input.HudsonNodeMonitorsArchitectureMonitor))
                ) && 
                (
                    this.HudsonNodeMonitorsResponseTimeMonitor == input.HudsonNodeMonitorsResponseTimeMonitor ||
                    (this.HudsonNodeMonitorsResponseTimeMonitor != null &&
                    this.HudsonNodeMonitorsResponseTimeMonitor.Equals(input.HudsonNodeMonitorsResponseTimeMonitor))
                ) && 
                (
                    this.HudsonNodeMonitorsClockMonitor == input.HudsonNodeMonitorsClockMonitor ||
                    (this.HudsonNodeMonitorsClockMonitor != null &&
                    this.HudsonNodeMonitorsClockMonitor.Equals(input.HudsonNodeMonitorsClockMonitor))
                ) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HudsonNodeMonitorsSwapSpaceMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsSwapSpaceMonitor.GetHashCode();
                }
                if (this.HudsonNodeMonitorsTemporarySpaceMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsTemporarySpaceMonitor.GetHashCode();
                }
                if (this.HudsonNodeMonitorsDiskSpaceMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsDiskSpaceMonitor.GetHashCode();
                }
                if (this.HudsonNodeMonitorsArchitectureMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsArchitectureMonitor.GetHashCode();
                }
                if (this.HudsonNodeMonitorsResponseTimeMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsResponseTimeMonitor.GetHashCode();
                }
                if (this.HudsonNodeMonitorsClockMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.HudsonNodeMonitorsClockMonitor.GetHashCode();
                }
                if (this.Class != null)
                {
                    hashCode = (hashCode * 59) + this.Class.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
