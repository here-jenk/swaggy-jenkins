/* tslint:disable */
/* eslint-disable */
/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 1.1.2-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GithubRepositorieslinks,
    GithubRepositorieslinksFromJSON,
    GithubRepositorieslinksFromJSONTyped,
    GithubRepositorieslinksToJSON,
} from './GithubRepositorieslinks';
import {
    GithubRepository,
    GithubRepositoryFromJSON,
    GithubRepositoryFromJSONTyped,
    GithubRepositoryToJSON,
} from './GithubRepository';

/**
 * 
 * @export
 * @interface GithubRepositories
 */
export interface GithubRepositories {
    /**
     * 
     * @type {string}
     * @memberof GithubRepositories
     */
    _class?: string;
    /**
     * 
     * @type {GithubRepositorieslinks}
     * @memberof GithubRepositories
     */
    links?: GithubRepositorieslinks;
    /**
     * 
     * @type {Array<GithubRepository>}
     * @memberof GithubRepositories
     */
    items?: Array<GithubRepository>;
    /**
     * 
     * @type {number}
     * @memberof GithubRepositories
     */
    lastPage?: number;
    /**
     * 
     * @type {number}
     * @memberof GithubRepositories
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof GithubRepositories
     */
    pageSize?: number;
}

export function GithubRepositoriesFromJSON(json: any): GithubRepositories {
    return GithubRepositoriesFromJSONTyped(json, false);
}

export function GithubRepositoriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): GithubRepositories {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_class': !exists(json, '_class') ? undefined : json['_class'],
        'links': !exists(json, '_links') ? undefined : GithubRepositorieslinksFromJSON(json['_links']),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(GithubRepositoryFromJSON)),
        'lastPage': !exists(json, 'lastPage') ? undefined : json['lastPage'],
        'nextPage': !exists(json, 'nextPage') ? undefined : json['nextPage'],
        'pageSize': !exists(json, 'pageSize') ? undefined : json['pageSize'],
    };
}

export function GithubRepositoriesToJSON(value?: GithubRepositories | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_class': value._class,
        '_links': GithubRepositorieslinksToJSON(value.links),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(GithubRepositoryToJSON)),
        'lastPage': value.lastPage,
        'nextPage': value.nextPage,
        'pageSize': value.pageSize,
    };
}

