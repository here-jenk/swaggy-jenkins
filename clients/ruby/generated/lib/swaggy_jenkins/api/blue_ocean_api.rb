=begin
#Swaggy Jenkins

#Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 1.1.2-pre.0
Contact: blah@cliffano.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module SwaggyJenkinsClient
  class BlueOceanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete queue item from an organization pipeline queue
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param queue [String] Name of the queue item
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline_queue_item(organization, pipeline, queue, opts = {})
      delete_pipeline_queue_item_with_http_info(organization, pipeline, queue, opts)
      nil
    end

    # Delete queue item from an organization pipeline queue
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param queue [String] Name of the queue item
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_queue_item_with_http_info(organization, pipeline, queue, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.delete_pipeline_queue_item ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.delete_pipeline_queue_item"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.delete_pipeline_queue_item"
      end
      # verify the required parameter 'queue' is set
      if @api_client.config.client_side_validation && queue.nil?
        fail ArgumentError, "Missing the required parameter 'queue' when calling BlueOceanApi.delete_pipeline_queue_item"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'queue' + '}', CGI.escape(queue.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.delete_pipeline_queue_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#delete_pipeline_queue_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve authenticated user details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_authenticated_user(organization, opts = {})
      data, _status_code, _headers = get_authenticated_user_with_http_info(organization, opts)
      data
    end

    # Retrieve authenticated user details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_authenticated_user_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_authenticated_user ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_authenticated_user"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/user/'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_authenticated_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of class names supported by a given class
    # @param _class [String] Name of the class
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_classes(_class, opts = {})
      data, _status_code, _headers = get_classes_with_http_info(_class, opts)
      data
    end

    # Get a list of class names supported by a given class
    # @param _class [String] Name of the class
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_classes_with_http_info(_class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_classes ...'
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling BlueOceanApi.get_classes"
      end
      # resource path
      local_var_path = '/blue/rest/classes/{class}'.sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_classes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve JSON Web Key
    # @param key [Integer] Key ID received as part of JWT header field kid
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_json_web_key(key, opts = {})
      data, _status_code, _headers = get_json_web_key_with_http_info(key, opts)
      data
    end

    # Retrieve JSON Web Key
    # @param key [Integer] Key ID received as part of JWT header field kid
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_json_web_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_json_web_key ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling BlueOceanApi.get_json_web_key"
      end
      # resource path
      local_var_path = '/jwt-auth/jwks/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_json_web_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_json_web_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve JSON Web Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiry_time_in_mins Token expiry time in minutes, default: 30 minutes
    # @option opts [Integer] :max_expiry_time_in_mins Maximum token expiry time in minutes, default: 480 minutes
    # @return [String]
    def get_json_web_token(opts = {})
      data, _status_code, _headers = get_json_web_token_with_http_info(opts)
      data
    end

    # Retrieve JSON Web Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiry_time_in_mins Token expiry time in minutes, default: 30 minutes
    # @option opts [Integer] :max_expiry_time_in_mins Maximum token expiry time in minutes, default: 480 minutes
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_json_web_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_json_web_token ...'
      end
      # resource path
      local_var_path = '/jwt-auth/token'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expiryTimeInMins'] = opts[:'expiry_time_in_mins'] if !opts[:'expiry_time_in_mins'].nil?
      query_params[:'maxExpiryTimeInMins'] = opts[:'max_expiry_time_in_mins'] if !opts[:'max_expiry_time_in_mins'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_json_web_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_json_web_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve organization details
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Organisation]
    def get_organisation(organization, opts = {})
      data, _status_code, _headers = get_organisation_with_http_info(organization, opts)
      data
    end

    # Retrieve organization details
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Organisation, Integer, Hash)>] Organisation data, response status code and response headers
    def get_organisation_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_organisation ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_organisation"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organisation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_organisation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_organisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all organizations details
    # @param [Hash] opts the optional parameters
    # @return [Array<Organisation>]
    def get_organisations(opts = {})
      data, _status_code, _headers = get_organisations_with_http_info(opts)
      data
    end

    # Retrieve all organizations details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Organisation>, Integer, Hash)>] Array<Organisation> data, response status code and response headers
    def get_organisations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_organisations ...'
      end
      # resource path
      local_var_path = '/blue/rest/organizations/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Organisation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_organisations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_organisations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve pipeline details for an organization
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def get_pipeline(organization, pipeline, opts = {})
      data, _status_code, _headers = get_pipeline_with_http_info(organization, pipeline, opts)
      data
    end

    # Retrieve pipeline details for an organization
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all activities details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<PipelineActivity>]
    def get_pipeline_activities(organization, pipeline, opts = {})
      data, _status_code, _headers = get_pipeline_activities_with_http_info(organization, pipeline, opts)
      data
    end

    # Retrieve all activities details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PipelineActivity>, Integer, Hash)>] Array<PipelineActivity> data, response status code and response headers
    def get_pipeline_activities_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_activities ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_activities"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_activities"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PipelineActivity>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve branch details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param [Hash] opts the optional parameters
    # @return [BranchImpl]
    def get_pipeline_branch(organization, pipeline, branch, opts = {})
      data, _status_code, _headers = get_pipeline_branch_with_http_info(organization, pipeline, branch, opts)
      data
    end

    # Retrieve branch details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param [Hash] opts the optional parameters
    # @return [Array<(BranchImpl, Integer, Hash)>] BranchImpl data, response status code and response headers
    def get_pipeline_branch_with_http_info(organization, pipeline, branch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_branch ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branch"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branch"
      end
      # verify the required parameter 'branch' is set
      if @api_client.config.client_side_validation && branch.nil?
        fail ArgumentError, "Missing the required parameter 'branch' when calling BlueOceanApi.get_pipeline_branch"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'branch' + '}', CGI.escape(branch.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BranchImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_branch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve branch run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [PipelineRun]
    def get_pipeline_branch_run(organization, pipeline, branch, run, opts = {})
      data, _status_code, _headers = get_pipeline_branch_run_with_http_info(organization, pipeline, branch, run, opts)
      data
    end

    # Retrieve branch run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def get_pipeline_branch_run_with_http_info(organization, pipeline, branch, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_branch_run ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branch_run"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branch_run"
      end
      # verify the required parameter 'branch' is set
      if @api_client.config.client_side_validation && branch.nil?
        fail ArgumentError, "Missing the required parameter 'branch' when calling BlueOceanApi.get_pipeline_branch_run"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_branch_run"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'branch' + '}', CGI.escape(branch.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_branch_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_branch_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all branches details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [MultibranchPipeline]
    def get_pipeline_branches(organization, pipeline, opts = {})
      data, _status_code, _headers = get_pipeline_branches_with_http_info(organization, pipeline, opts)
      data
    end

    # Retrieve all branches details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultibranchPipeline, Integer, Hash)>] MultibranchPipeline data, response status code and response headers
    def get_pipeline_branches_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_branches ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branches"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branches"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MultibranchPipeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_branches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_branches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve pipeline folder for an organization
    # @param organization [String] Name of the organization
    # @param folder [String] Name of the folder
    # @param [Hash] opts the optional parameters
    # @return [PipelineFolderImpl]
    def get_pipeline_folder(organization, folder, opts = {})
      data, _status_code, _headers = get_pipeline_folder_with_http_info(organization, folder, opts)
      data
    end

    # Retrieve pipeline folder for an organization
    # @param organization [String] Name of the organization
    # @param folder [String] Name of the folder
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineFolderImpl, Integer, Hash)>] PipelineFolderImpl data, response status code and response headers
    def get_pipeline_folder_with_http_info(organization, folder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_folder ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_folder"
      end
      # verify the required parameter 'folder' is set
      if @api_client.config.client_side_validation && folder.nil?
        fail ArgumentError, "Missing the required parameter 'folder' when calling BlueOceanApi.get_pipeline_folder"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{folder}/'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'folder' + '}', CGI.escape(folder.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineFolderImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve pipeline details for an organization folder
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param folder [String] Name of the folder
    # @param [Hash] opts the optional parameters
    # @return [PipelineImpl]
    def get_pipeline_folder_pipeline(organization, pipeline, folder, opts = {})
      data, _status_code, _headers = get_pipeline_folder_pipeline_with_http_info(organization, pipeline, folder, opts)
      data
    end

    # Retrieve pipeline details for an organization folder
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param folder [String] Name of the folder
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineImpl, Integer, Hash)>] PipelineImpl data, response status code and response headers
    def get_pipeline_folder_pipeline_with_http_info(organization, pipeline, folder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_folder_pipeline ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_folder_pipeline"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_folder_pipeline"
      end
      # verify the required parameter 'folder' is set
      if @api_client.config.client_side_validation && folder.nil?
        fail ArgumentError, "Missing the required parameter 'folder' when calling BlueOceanApi.get_pipeline_folder_pipeline"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'folder' + '}', CGI.escape(folder.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_folder_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_folder_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve queue details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<QueueItemImpl>]
    def get_pipeline_queue(organization, pipeline, opts = {})
      data, _status_code, _headers = get_pipeline_queue_with_http_info(organization, pipeline, opts)
      data
    end

    # Retrieve queue details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QueueItemImpl>, Integer, Hash)>] Array<QueueItemImpl> data, response status code and response headers
    def get_pipeline_queue_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_queue ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_queue"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_queue"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<QueueItemImpl>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [PipelineRun]
    def get_pipeline_run(organization, pipeline, run, opts = {})
      data, _status_code, _headers = get_pipeline_run_with_http_info(organization, pipeline, run, opts)
      data
    end

    # Retrieve run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def get_pipeline_run_with_http_info(organization, pipeline, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get log for a pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Start position of the log
    # @option opts [Boolean] :download Set to true in order to download the file, otherwise it&#39;s passed as a response body
    # @return [String]
    def get_pipeline_run_log(organization, pipeline, run, opts = {})
      data, _status_code, _headers = get_pipeline_run_log_with_http_info(organization, pipeline, run, opts)
      data
    end

    # Get log for a pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Start position of the log
    # @option opts [Boolean] :download Set to true in order to download the file, otherwise it&#39;s passed as a response body
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_pipeline_run_log_with_http_info(organization, pipeline, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_log ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_log"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_log"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_log"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'download'] = opts[:'download'] if !opts[:'download'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param [Hash] opts the optional parameters
    # @return [PipelineRunNode]
    def get_pipeline_run_node(organization, pipeline, run, node, opts = {})
      data, _status_code, _headers = get_pipeline_run_node_with_http_info(organization, pipeline, run, node, opts)
      data
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineRunNode, Integer, Hash)>] PipelineRunNode data, response status code and response headers
    def get_pipeline_run_node_with_http_info(organization, pipeline, run, node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_node ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s)).sub('{' + 'node' + '}', CGI.escape(node.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineRunNode'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @param [Hash] opts the optional parameters
    # @return [PipelineStepImpl]
    def get_pipeline_run_node_step(organization, pipeline, run, node, step, opts = {})
      data, _status_code, _headers = get_pipeline_run_node_step_with_http_info(organization, pipeline, run, node, step, opts)
      data
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineStepImpl, Integer, Hash)>] PipelineStepImpl data, response status code and response headers
    def get_pipeline_run_node_step_with_http_info(organization, pipeline, run, node, step, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_node_step ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_step"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_step"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_step"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_step"
      end
      # verify the required parameter 'step' is set
      if @api_client.config.client_side_validation && step.nil?
        fail ArgumentError, "Missing the required parameter 'step' when calling BlueOceanApi.get_pipeline_run_node_step"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s)).sub('{' + 'node' + '}', CGI.escape(node.to_s)).sub('{' + 'step' + '}', CGI.escape(step.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineStepImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_node_step",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_node_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get log for a pipeline run node step
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_pipeline_run_node_step_log(organization, pipeline, run, node, step, opts = {})
      data, _status_code, _headers = get_pipeline_run_node_step_log_with_http_info(organization, pipeline, run, node, step, opts)
      data
    end

    # Get log for a pipeline run node step
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_pipeline_run_node_step_log_with_http_info(organization, pipeline, run, node, step, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_node_step_log ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_step_log"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_step_log"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_step_log"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_step_log"
      end
      # verify the required parameter 'step' is set
      if @api_client.config.client_side_validation && step.nil?
        fail ArgumentError, "Missing the required parameter 'step' when calling BlueOceanApi.get_pipeline_run_node_step_log"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s)).sub('{' + 'node' + '}', CGI.escape(node.to_s)).sub('{' + 'step' + '}', CGI.escape(step.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_node_step_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_node_step_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve run node steps details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param [Hash] opts the optional parameters
    # @return [Array<PipelineStepImpl>]
    def get_pipeline_run_node_steps(organization, pipeline, run, node, opts = {})
      data, _status_code, _headers = get_pipeline_run_node_steps_with_http_info(organization, pipeline, run, node, opts)
      data
    end

    # Retrieve run node steps details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PipelineStepImpl>, Integer, Hash)>] Array<PipelineStepImpl> data, response status code and response headers
    def get_pipeline_run_node_steps_with_http_info(organization, pipeline, run, node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_node_steps ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_steps"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_steps"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_steps"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_steps"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s)).sub('{' + 'node' + '}', CGI.escape(node.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PipelineStepImpl>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_node_steps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_node_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve run nodes details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [Array<PipelineRunNode>]
    def get_pipeline_run_nodes(organization, pipeline, run, opts = {})
      data, _status_code, _headers = get_pipeline_run_nodes_with_http_info(organization, pipeline, run, opts)
      data
    end

    # Retrieve run nodes details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PipelineRunNode>, Integer, Hash)>] Array<PipelineRunNode> data, response status code and response headers
    def get_pipeline_run_nodes_with_http_info(organization, pipeline, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_run_nodes ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_nodes"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_nodes"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_nodes"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PipelineRunNode>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_run_nodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_run_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all runs details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<PipelineRun>]
    def get_pipeline_runs(organization, pipeline, opts = {})
      data, _status_code, _headers = get_pipeline_runs_with_http_info(organization, pipeline, opts)
      data
    end

    # Retrieve all runs details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PipelineRun>, Integer, Hash)>] Array<PipelineRun> data, response status code and response headers
    def get_pipeline_runs_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipeline_runs ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_runs"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_runs"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PipelineRun>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipeline_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipeline_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all pipelines details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<Pipeline>]
    def get_pipelines(organization, opts = {})
      data, _status_code, _headers = get_pipelines_with_http_info(organization, opts)
      data
    end

    # Retrieve all pipelines details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Pipeline>, Integer, Hash)>] Array<Pipeline> data, response status code and response headers
    def get_pipelines_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_pipelines ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_pipelines"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Pipeline>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCM details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param [Hash] opts the optional parameters
    # @return [GithubScm]
    def get_scm(organization, scm, opts = {})
      data, _status_code, _headers = get_scm_with_http_info(organization, scm, opts)
      data
    end

    # Retrieve SCM details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param [Hash] opts the optional parameters
    # @return [Array<(GithubScm, Integer, Hash)>] GithubScm data, response status code and response headers
    def get_scm_with_http_info(organization, scm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_scm ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_scm"
      end
      # verify the required parameter 'scm' is set
      if @api_client.config.client_side_validation && scm.nil?
        fail ArgumentError, "Missing the required parameter 'scm' when calling BlueOceanApi.get_scm"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/scm/{scm}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'scm' + '}', CGI.escape(scm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GithubScm'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_scm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_scm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCM organization repositories details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @option opts [Integer] :page_size Number of items in a page
    # @option opts [Integer] :page_number Page number
    # @return [Array<GithubOrganization>]
    def get_scm_organisation_repositories(organization, scm, scm_organisation, opts = {})
      data, _status_code, _headers = get_scm_organisation_repositories_with_http_info(organization, scm, scm_organisation, opts)
      data
    end

    # Retrieve SCM organization repositories details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @option opts [Integer] :page_size Number of items in a page
    # @option opts [Integer] :page_number Page number
    # @return [Array<(Array<GithubOrganization>, Integer, Hash)>] Array<GithubOrganization> data, response status code and response headers
    def get_scm_organisation_repositories_with_http_info(organization, scm, scm_organisation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_scm_organisation_repositories ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisation_repositories"
      end
      # verify the required parameter 'scm' is set
      if @api_client.config.client_side_validation && scm.nil?
        fail ArgumentError, "Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisation_repositories"
      end
      # verify the required parameter 'scm_organisation' is set
      if @api_client.config.client_side_validation && scm_organisation.nil?
        fail ArgumentError, "Missing the required parameter 'scm_organisation' when calling BlueOceanApi.get_scm_organisation_repositories"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'scm' + '}', CGI.escape(scm.to_s)).sub('{' + 'scmOrganisation' + '}', CGI.escape(scm_organisation.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'credentialId'] = opts[:'credential_id'] if !opts[:'credential_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GithubOrganization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_scm_organisation_repositories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_scm_organisation_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCM organization repository details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param repository [String] Name of the SCM repository
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @return [Array<GithubOrganization>]
    def get_scm_organisation_repository(organization, scm, scm_organisation, repository, opts = {})
      data, _status_code, _headers = get_scm_organisation_repository_with_http_info(organization, scm, scm_organisation, repository, opts)
      data
    end

    # Retrieve SCM organization repository details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param repository [String] Name of the SCM repository
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @return [Array<(Array<GithubOrganization>, Integer, Hash)>] Array<GithubOrganization> data, response status code and response headers
    def get_scm_organisation_repository_with_http_info(organization, scm, scm_organisation, repository, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_scm_organisation_repository ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisation_repository"
      end
      # verify the required parameter 'scm' is set
      if @api_client.config.client_side_validation && scm.nil?
        fail ArgumentError, "Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisation_repository"
      end
      # verify the required parameter 'scm_organisation' is set
      if @api_client.config.client_side_validation && scm_organisation.nil?
        fail ArgumentError, "Missing the required parameter 'scm_organisation' when calling BlueOceanApi.get_scm_organisation_repository"
      end
      # verify the required parameter 'repository' is set
      if @api_client.config.client_side_validation && repository.nil?
        fail ArgumentError, "Missing the required parameter 'repository' when calling BlueOceanApi.get_scm_organisation_repository"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'scm' + '}', CGI.escape(scm.to_s)).sub('{' + 'scmOrganisation' + '}', CGI.escape(scm_organisation.to_s)).sub('{' + 'repository' + '}', CGI.escape(repository.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'credentialId'] = opts[:'credential_id'] if !opts[:'credential_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GithubOrganization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_scm_organisation_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_scm_organisation_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve SCM organizations details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @return [Array<GithubOrganization>]
    def get_scm_organisations(organization, scm, opts = {})
      data, _status_code, _headers = get_scm_organisations_with_http_info(organization, scm, opts)
      data
    end

    # Retrieve SCM organizations details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param [Hash] opts the optional parameters
    # @option opts [String] :credential_id Credential ID
    # @return [Array<(Array<GithubOrganization>, Integer, Hash)>] Array<GithubOrganization> data, response status code and response headers
    def get_scm_organisations_with_http_info(organization, scm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_scm_organisations ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisations"
      end
      # verify the required parameter 'scm' is set
      if @api_client.config.client_side_validation && scm.nil?
        fail ArgumentError, "Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisations"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'scm' + '}', CGI.escape(scm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'credentialId'] = opts[:'credential_id'] if !opts[:'credential_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GithubOrganization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_scm_organisations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_scm_organisations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve user details for an organization
    # @param organization [String] Name of the organization
    # @param user [String] Name of the user
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(organization, user, opts = {})
      data, _status_code, _headers = get_user_with_http_info(organization, user, opts)
      data
    end

    # Retrieve user details for an organization
    # @param organization [String] Name of the organization
    # @param user [String] Name of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(organization, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_user ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_user"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling BlueOceanApi.get_user"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/users/{user}'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve user favorites details for an organization
    # @param user [String] Name of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<FavoriteImpl>]
    def get_user_favorites(user, opts = {})
      data, _status_code, _headers = get_user_favorites_with_http_info(user, opts)
      data
    end

    # Retrieve user favorites details for an organization
    # @param user [String] Name of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FavoriteImpl>, Integer, Hash)>] Array<FavoriteImpl> data, response status code and response headers
    def get_user_favorites_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_user_favorites ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling BlueOceanApi.get_user_favorites"
      end
      # resource path
      local_var_path = '/blue/rest/users/{user}/favorites'.sub('{' + 'user' + '}', CGI.escape(user.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FavoriteImpl>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_user_favorites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_user_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve users details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_users(organization, opts = {})
      data, _status_code, _headers = get_users_with_http_info(organization, opts)
      data
    end

    # Retrieve users details for an organization
    # @param organization [String] Name of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_users_with_http_info(organization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.get_users ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.get_users"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/users/'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replay an organization pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [QueueItemImpl]
    def post_pipeline_run(organization, pipeline, run, opts = {})
      data, _status_code, _headers = post_pipeline_run_with_http_info(organization, pipeline, run, opts)
      data
    end

    # Replay an organization pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueItemImpl, Integer, Hash)>] QueueItemImpl data, response status code and response headers
    def post_pipeline_run_with_http_info(organization, pipeline, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.post_pipeline_run ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.post_pipeline_run"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.post_pipeline_run"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.post_pipeline_run"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueItemImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.post_pipeline_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#post_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a build for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [QueueItemImpl]
    def post_pipeline_runs(organization, pipeline, opts = {})
      data, _status_code, _headers = post_pipeline_runs_with_http_info(organization, pipeline, opts)
      data
    end

    # Start a build for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueItemImpl, Integer, Hash)>] QueueItemImpl data, response status code and response headers
    def post_pipeline_runs_with_http_info(organization, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.post_pipeline_runs ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.post_pipeline_runs"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.post_pipeline_runs"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QueueItemImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.post_pipeline_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#post_pipeline_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Favorite/unfavorite a pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param body [Boolean] Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
    # @param [Hash] opts the optional parameters
    # @return [FavoriteImpl]
    def put_pipeline_favorite(organization, pipeline, body, opts = {})
      data, _status_code, _headers = put_pipeline_favorite_with_http_info(organization, pipeline, body, opts)
      data
    end

    # Favorite/unfavorite a pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param body [Boolean] Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
    # @param [Hash] opts the optional parameters
    # @return [Array<(FavoriteImpl, Integer, Hash)>] FavoriteImpl data, response status code and response headers
    def put_pipeline_favorite_with_http_info(organization, pipeline, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.put_pipeline_favorite ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.put_pipeline_favorite"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.put_pipeline_favorite"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueOceanApi.put_pipeline_favorite"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FavoriteImpl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.put_pipeline_favorite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#put_pipeline_favorite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop a build of an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @option opts [String] :blocking Set to true to make blocking stop, default: false
    # @option opts [Integer] :time_out_in_secs Timeout in seconds, default: 10 seconds
    # @return [PipelineRun]
    def put_pipeline_run(organization, pipeline, run, opts = {})
      data, _status_code, _headers = put_pipeline_run_with_http_info(organization, pipeline, run, opts)
      data
    end

    # Stop a build of an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param [Hash] opts the optional parameters
    # @option opts [String] :blocking Set to true to make blocking stop, default: false
    # @option opts [Integer] :time_out_in_secs Timeout in seconds, default: 10 seconds
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def put_pipeline_run_with_http_info(organization, pipeline, run, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.put_pipeline_run ...'
      end
      # verify the required parameter 'organization' is set
      if @api_client.config.client_side_validation && organization.nil?
        fail ArgumentError, "Missing the required parameter 'organization' when calling BlueOceanApi.put_pipeline_run"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling BlueOceanApi.put_pipeline_run"
      end
      # verify the required parameter 'run' is set
      if @api_client.config.client_side_validation && run.nil?
        fail ArgumentError, "Missing the required parameter 'run' when calling BlueOceanApi.put_pipeline_run"
      end
      # resource path
      local_var_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop'.sub('{' + 'organization' + '}', CGI.escape(organization.to_s)).sub('{' + 'pipeline' + '}', CGI.escape(pipeline.to_s)).sub('{' + 'run' + '}', CGI.escape(run.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'blocking'] = opts[:'blocking'] if !opts[:'blocking'].nil?
      query_params[:'timeOutInSecs'] = opts[:'time_out_in_secs'] if !opts[:'time_out_in_secs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PipelineRun'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.put_pipeline_run",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#put_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for any resource details
    # @param q [String] Query string
    # @param [Hash] opts the optional parameters
    # @return [String]
    def search(q, opts = {})
      data, _status_code, _headers = search_with_http_info(q, opts)
      data
    end

    # Search for any resource details
    # @param q [String] Query string
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def search_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.search ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling BlueOceanApi.search"
      end
      # resource path
      local_var_path = '/blue/rest/search/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get classes details
    # @param q [String] Query string containing an array of class names
    # @param [Hash] opts the optional parameters
    # @return [String]
    def search_classes(q, opts = {})
      data, _status_code, _headers = search_classes_with_http_info(q, opts)
      data
    end

    # Get classes details
    # @param q [String] Query string containing an array of class names
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def search_classes_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueOceanApi.search_classes ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling BlueOceanApi.search_classes"
      end
      # resource path
      local_var_path = '/blue/rest/classes/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jenkins_auth']

      new_options = opts.merge(
        :operation => :"BlueOceanApi.search_classes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueOceanApi#search_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
