=begin
#Swaggy Jenkins

#Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 1.1.2-pre.0
Contact: blah@cliffano.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module SwaggyJenkinsClient
  class FreeStyleProject
    attr_accessor :_class

    attr_accessor :name

    attr_accessor :url

    attr_accessor :color

    attr_accessor :actions

    attr_accessor :description

    attr_accessor :display_name

    attr_accessor :display_name_or_null

    attr_accessor :full_display_name

    attr_accessor :full_name

    attr_accessor :buildable

    attr_accessor :builds

    attr_accessor :first_build

    attr_accessor :health_report

    attr_accessor :in_queue

    attr_accessor :keep_dependencies

    attr_accessor :last_build

    attr_accessor :last_completed_build

    attr_accessor :last_failed_build

    attr_accessor :last_stable_build

    attr_accessor :last_successful_build

    attr_accessor :last_unstable_build

    attr_accessor :last_unsuccessful_build

    attr_accessor :next_build_number

    attr_accessor :queue_item

    attr_accessor :concurrent_build

    attr_accessor :scm

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_class' => :'_class',
        :'name' => :'name',
        :'url' => :'url',
        :'color' => :'color',
        :'actions' => :'actions',
        :'description' => :'description',
        :'display_name' => :'displayName',
        :'display_name_or_null' => :'displayNameOrNull',
        :'full_display_name' => :'fullDisplayName',
        :'full_name' => :'fullName',
        :'buildable' => :'buildable',
        :'builds' => :'builds',
        :'first_build' => :'firstBuild',
        :'health_report' => :'healthReport',
        :'in_queue' => :'inQueue',
        :'keep_dependencies' => :'keepDependencies',
        :'last_build' => :'lastBuild',
        :'last_completed_build' => :'lastCompletedBuild',
        :'last_failed_build' => :'lastFailedBuild',
        :'last_stable_build' => :'lastStableBuild',
        :'last_successful_build' => :'lastSuccessfulBuild',
        :'last_unstable_build' => :'lastUnstableBuild',
        :'last_unsuccessful_build' => :'lastUnsuccessfulBuild',
        :'next_build_number' => :'nextBuildNumber',
        :'queue_item' => :'queueItem',
        :'concurrent_build' => :'concurrentBuild',
        :'scm' => :'scm'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_class' => :'String',
        :'name' => :'String',
        :'url' => :'String',
        :'color' => :'String',
        :'actions' => :'Array<FreeStyleProjectactions>',
        :'description' => :'String',
        :'display_name' => :'String',
        :'display_name_or_null' => :'String',
        :'full_display_name' => :'String',
        :'full_name' => :'String',
        :'buildable' => :'Boolean',
        :'builds' => :'Array<FreeStyleBuild>',
        :'first_build' => :'FreeStyleBuild',
        :'health_report' => :'Array<FreeStyleProjecthealthReport>',
        :'in_queue' => :'Boolean',
        :'keep_dependencies' => :'Boolean',
        :'last_build' => :'FreeStyleBuild',
        :'last_completed_build' => :'FreeStyleBuild',
        :'last_failed_build' => :'String',
        :'last_stable_build' => :'FreeStyleBuild',
        :'last_successful_build' => :'FreeStyleBuild',
        :'last_unstable_build' => :'String',
        :'last_unsuccessful_build' => :'String',
        :'next_build_number' => :'Integer',
        :'queue_item' => :'String',
        :'concurrent_build' => :'Boolean',
        :'scm' => :'NullSCM'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggyJenkinsClient::FreeStyleProject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggyJenkinsClient::FreeStyleProject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_class')
        self._class = attributes[:'_class']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'actions')
        if (value = attributes[:'actions']).is_a?(Array)
          self.actions = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'display_name_or_null')
        self.display_name_or_null = attributes[:'display_name_or_null']
      end

      if attributes.key?(:'full_display_name')
        self.full_display_name = attributes[:'full_display_name']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'buildable')
        self.buildable = attributes[:'buildable']
      end

      if attributes.key?(:'builds')
        if (value = attributes[:'builds']).is_a?(Array)
          self.builds = value
        end
      end

      if attributes.key?(:'first_build')
        self.first_build = attributes[:'first_build']
      end

      if attributes.key?(:'health_report')
        if (value = attributes[:'health_report']).is_a?(Array)
          self.health_report = value
        end
      end

      if attributes.key?(:'in_queue')
        self.in_queue = attributes[:'in_queue']
      end

      if attributes.key?(:'keep_dependencies')
        self.keep_dependencies = attributes[:'keep_dependencies']
      end

      if attributes.key?(:'last_build')
        self.last_build = attributes[:'last_build']
      end

      if attributes.key?(:'last_completed_build')
        self.last_completed_build = attributes[:'last_completed_build']
      end

      if attributes.key?(:'last_failed_build')
        self.last_failed_build = attributes[:'last_failed_build']
      end

      if attributes.key?(:'last_stable_build')
        self.last_stable_build = attributes[:'last_stable_build']
      end

      if attributes.key?(:'last_successful_build')
        self.last_successful_build = attributes[:'last_successful_build']
      end

      if attributes.key?(:'last_unstable_build')
        self.last_unstable_build = attributes[:'last_unstable_build']
      end

      if attributes.key?(:'last_unsuccessful_build')
        self.last_unsuccessful_build = attributes[:'last_unsuccessful_build']
      end

      if attributes.key?(:'next_build_number')
        self.next_build_number = attributes[:'next_build_number']
      end

      if attributes.key?(:'queue_item')
        self.queue_item = attributes[:'queue_item']
      end

      if attributes.key?(:'concurrent_build')
        self.concurrent_build = attributes[:'concurrent_build']
      end

      if attributes.key?(:'scm')
        self.scm = attributes[:'scm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _class == o._class &&
          name == o.name &&
          url == o.url &&
          color == o.color &&
          actions == o.actions &&
          description == o.description &&
          display_name == o.display_name &&
          display_name_or_null == o.display_name_or_null &&
          full_display_name == o.full_display_name &&
          full_name == o.full_name &&
          buildable == o.buildable &&
          builds == o.builds &&
          first_build == o.first_build &&
          health_report == o.health_report &&
          in_queue == o.in_queue &&
          keep_dependencies == o.keep_dependencies &&
          last_build == o.last_build &&
          last_completed_build == o.last_completed_build &&
          last_failed_build == o.last_failed_build &&
          last_stable_build == o.last_stable_build &&
          last_successful_build == o.last_successful_build &&
          last_unstable_build == o.last_unstable_build &&
          last_unsuccessful_build == o.last_unsuccessful_build &&
          next_build_number == o.next_build_number &&
          queue_item == o.queue_item &&
          concurrent_build == o.concurrent_build &&
          scm == o.scm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_class, name, url, color, actions, description, display_name, display_name_or_null, full_display_name, full_name, buildable, builds, first_build, health_report, in_queue, keep_dependencies, last_build, last_completed_build, last_failed_build, last_stable_build, last_successful_build, last_unstable_build, last_unsuccessful_build, next_build_number, queue_item, concurrent_build, scm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggyJenkinsClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
