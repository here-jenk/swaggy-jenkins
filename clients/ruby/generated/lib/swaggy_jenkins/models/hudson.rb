=begin
#Swaggy Jenkins

#Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 1.1.1
Contact: blah@cliffano.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module SwaggyJenkinsClient
  class Hudson
    attr_accessor :_class

    attr_accessor :assigned_labels

    attr_accessor :mode

    attr_accessor :node_description

    attr_accessor :node_name

    attr_accessor :num_executors

    attr_accessor :description

    attr_accessor :jobs

    attr_accessor :primary_view

    attr_accessor :quieting_down

    attr_accessor :slave_agent_port

    attr_accessor :unlabeled_load

    attr_accessor :use_crumbs

    attr_accessor :use_security

    attr_accessor :views

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_class' => :'_class',
        :'assigned_labels' => :'assignedLabels',
        :'mode' => :'mode',
        :'node_description' => :'nodeDescription',
        :'node_name' => :'nodeName',
        :'num_executors' => :'numExecutors',
        :'description' => :'description',
        :'jobs' => :'jobs',
        :'primary_view' => :'primaryView',
        :'quieting_down' => :'quietingDown',
        :'slave_agent_port' => :'slaveAgentPort',
        :'unlabeled_load' => :'unlabeledLoad',
        :'use_crumbs' => :'useCrumbs',
        :'use_security' => :'useSecurity',
        :'views' => :'views'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_class' => :'String',
        :'assigned_labels' => :'Array<HudsonassignedLabels>',
        :'mode' => :'String',
        :'node_description' => :'String',
        :'node_name' => :'String',
        :'num_executors' => :'Integer',
        :'description' => :'String',
        :'jobs' => :'Array<FreeStyleProject>',
        :'primary_view' => :'AllView',
        :'quieting_down' => :'Boolean',
        :'slave_agent_port' => :'Integer',
        :'unlabeled_load' => :'UnlabeledLoadStatistics',
        :'use_crumbs' => :'Boolean',
        :'use_security' => :'Boolean',
        :'views' => :'Array<AllView>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggyJenkinsClient::Hudson` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggyJenkinsClient::Hudson`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_class')
        self._class = attributes[:'_class']
      end

      if attributes.key?(:'assigned_labels')
        if (value = attributes[:'assigned_labels']).is_a?(Array)
          self.assigned_labels = value
        end
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.key?(:'node_description')
        self.node_description = attributes[:'node_description']
      end

      if attributes.key?(:'node_name')
        self.node_name = attributes[:'node_name']
      end

      if attributes.key?(:'num_executors')
        self.num_executors = attributes[:'num_executors']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'jobs')
        if (value = attributes[:'jobs']).is_a?(Array)
          self.jobs = value
        end
      end

      if attributes.key?(:'primary_view')
        self.primary_view = attributes[:'primary_view']
      end

      if attributes.key?(:'quieting_down')
        self.quieting_down = attributes[:'quieting_down']
      end

      if attributes.key?(:'slave_agent_port')
        self.slave_agent_port = attributes[:'slave_agent_port']
      end

      if attributes.key?(:'unlabeled_load')
        self.unlabeled_load = attributes[:'unlabeled_load']
      end

      if attributes.key?(:'use_crumbs')
        self.use_crumbs = attributes[:'use_crumbs']
      end

      if attributes.key?(:'use_security')
        self.use_security = attributes[:'use_security']
      end

      if attributes.key?(:'views')
        if (value = attributes[:'views']).is_a?(Array)
          self.views = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _class == o._class &&
          assigned_labels == o.assigned_labels &&
          mode == o.mode &&
          node_description == o.node_description &&
          node_name == o.node_name &&
          num_executors == o.num_executors &&
          description == o.description &&
          jobs == o.jobs &&
          primary_view == o.primary_view &&
          quieting_down == o.quieting_down &&
          slave_agent_port == o.slave_agent_port &&
          unlabeled_load == o.unlabeled_load &&
          use_crumbs == o.use_crumbs &&
          use_security == o.use_security &&
          views == o.views
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_class, assigned_labels, mode, node_description, node_name, num_executors, description, jobs, primary_view, quieting_down, slave_agent_port, unlabeled_load, use_crumbs, use_security, views].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggyJenkinsClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
