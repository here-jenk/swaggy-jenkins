=begin
#Swaggy Jenkins

#Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 1.1.1
Contact: blah@cliffano.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module SwaggyJenkinsClient
  class HudsonMasterComputer
    attr_accessor :_class

    attr_accessor :display_name

    attr_accessor :executors

    attr_accessor :icon

    attr_accessor :icon_class_name

    attr_accessor :idle

    attr_accessor :jnlp_agent

    attr_accessor :launch_supported

    attr_accessor :load_statistics

    attr_accessor :manual_launch_allowed

    attr_accessor :monitor_data

    attr_accessor :num_executors

    attr_accessor :offline

    attr_accessor :offline_cause

    attr_accessor :offline_cause_reason

    attr_accessor :temporarily_offline

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_class' => :'_class',
        :'display_name' => :'displayName',
        :'executors' => :'executors',
        :'icon' => :'icon',
        :'icon_class_name' => :'iconClassName',
        :'idle' => :'idle',
        :'jnlp_agent' => :'jnlpAgent',
        :'launch_supported' => :'launchSupported',
        :'load_statistics' => :'loadStatistics',
        :'manual_launch_allowed' => :'manualLaunchAllowed',
        :'monitor_data' => :'monitorData',
        :'num_executors' => :'numExecutors',
        :'offline' => :'offline',
        :'offline_cause' => :'offlineCause',
        :'offline_cause_reason' => :'offlineCauseReason',
        :'temporarily_offline' => :'temporarilyOffline'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_class' => :'String',
        :'display_name' => :'String',
        :'executors' => :'Array<HudsonMasterComputerexecutors>',
        :'icon' => :'String',
        :'icon_class_name' => :'String',
        :'idle' => :'Boolean',
        :'jnlp_agent' => :'Boolean',
        :'launch_supported' => :'Boolean',
        :'load_statistics' => :'Label1',
        :'manual_launch_allowed' => :'Boolean',
        :'monitor_data' => :'HudsonMasterComputermonitorData',
        :'num_executors' => :'Integer',
        :'offline' => :'Boolean',
        :'offline_cause' => :'String',
        :'offline_cause_reason' => :'String',
        :'temporarily_offline' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggyJenkinsClient::HudsonMasterComputer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggyJenkinsClient::HudsonMasterComputer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_class')
        self._class = attributes[:'_class']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'executors')
        if (value = attributes[:'executors']).is_a?(Array)
          self.executors = value
        end
      end

      if attributes.key?(:'icon')
        self.icon = attributes[:'icon']
      end

      if attributes.key?(:'icon_class_name')
        self.icon_class_name = attributes[:'icon_class_name']
      end

      if attributes.key?(:'idle')
        self.idle = attributes[:'idle']
      end

      if attributes.key?(:'jnlp_agent')
        self.jnlp_agent = attributes[:'jnlp_agent']
      end

      if attributes.key?(:'launch_supported')
        self.launch_supported = attributes[:'launch_supported']
      end

      if attributes.key?(:'load_statistics')
        self.load_statistics = attributes[:'load_statistics']
      end

      if attributes.key?(:'manual_launch_allowed')
        self.manual_launch_allowed = attributes[:'manual_launch_allowed']
      end

      if attributes.key?(:'monitor_data')
        self.monitor_data = attributes[:'monitor_data']
      end

      if attributes.key?(:'num_executors')
        self.num_executors = attributes[:'num_executors']
      end

      if attributes.key?(:'offline')
        self.offline = attributes[:'offline']
      end

      if attributes.key?(:'offline_cause')
        self.offline_cause = attributes[:'offline_cause']
      end

      if attributes.key?(:'offline_cause_reason')
        self.offline_cause_reason = attributes[:'offline_cause_reason']
      end

      if attributes.key?(:'temporarily_offline')
        self.temporarily_offline = attributes[:'temporarily_offline']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _class == o._class &&
          display_name == o.display_name &&
          executors == o.executors &&
          icon == o.icon &&
          icon_class_name == o.icon_class_name &&
          idle == o.idle &&
          jnlp_agent == o.jnlp_agent &&
          launch_supported == o.launch_supported &&
          load_statistics == o.load_statistics &&
          manual_launch_allowed == o.manual_launch_allowed &&
          monitor_data == o.monitor_data &&
          num_executors == o.num_executors &&
          offline == o.offline &&
          offline_cause == o.offline_cause &&
          offline_cause_reason == o.offline_cause_reason &&
          temporarily_offline == o.temporarily_offline
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_class, display_name, executors, icon, icon_class_name, idle, jnlp_agent, launch_supported, load_statistics, manual_launch_allowed, monitor_data, num_executors, offline, offline_cause, offline_cause_reason, temporarily_offline].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggyJenkinsClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
